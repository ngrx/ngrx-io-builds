{"version":3,"file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.774c375687a9e428.js","mappings":"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","names":["i0","CodeComponent","constructor","snackbar","pretty","copier","logger","this","EventEmitter","code","_code","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabel","ngOnChanges","leftAlignedCode","leftAlign","text","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","map","substring","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","tap","codeFormatted","emit","subscribe","c","err","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","doCopy","copyText","log","open","duration","error","Error","linenums","parseInt","isNaN","match","length","static","_angular_core__WEBPACK_IMPORTED_MODULE_3__","selectors","CodeModule","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","window","Promise","resolve","__webpack_require__","then","msg","message","console","first","_angular_core__WEBPACK_IMPORTED_MODULE_5__","factory","createFake","docElem","document","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","removeFake","removeChild","execCommand","_r2","ctx_r1","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MatSnackBarLabel","ɵfac","ɵdir","MatSnackBarActions","MatSnackBarAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵcmp","i2","i3","styles","matSnackBarAnimations","snackBarState","trigger","state","transform","opacity","transition","animate","_MatSnackBarContainerBase","BasePortalOutlet","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","super","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","take","element","panelClasses","panelClass","Array","isArray","cssClass","classList","add","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","activeElement","HTMLElement","contains","removeAttribute","focus","i1","viewQuery","CdkPortalOutlet","_t","ctx","MatSnackBarContainer","label","_label","labelClass","toggle","t","_c0","decls","i3$1","ɵmod","ɵinj","OverlayModule","PortalModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","openFromComponent","component","config","_attach","openFromTemplate","template","_config","undefined","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","injector","Injector","viewContainerRef","providers","provide","useValue","containerPortal","ComponentPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","takeUntil","detachments","overlayElement","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","OverlayConfig","direction","positionStrategy","global","isRtl","isLeft","isRight","left","right","centerHorizontally","bottom","create","i1$1","i2$1","i3$2","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///","sources":["./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n    selector: 'aio-code',\n    template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n    ariaLabel = '';\n\n    /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n    private codeText: string;\n\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code: string) {\n        this._code = code;\n\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        } else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code(): string {\n        return this._code;\n    }\n    _code: string;\n\n    /** Whether the copy button should be shown. */\n    @Input() hideCopy: boolean;\n\n    /** Language to render the code (e.g. javascript, dart, typescript). */\n    @Input() language: string;\n\n    /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n    @Input() linenums: boolean | number | string;\n\n    /** Path to the source of the code. */\n    @Input() path: string;\n\n    /** Region of the source of the code being displayed. */\n    @Input() region: string;\n\n    /** Optional header to be displayed above the code. */\n    @Input()\n    set header(header: string) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header(): string {\n        return this._header;\n    }\n    private _header: string;\n\n    @Output() codeFormatted = new EventEmitter<void>();\n\n    /** The element in the template that will display the formatted code. */\n    @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n    constructor(\n        private snackbar: MatSnackBar,\n        private pretty: PrettyPrinter,\n        private copier: CopierService,\n        private logger: Logger\n    ) {}\n\n    ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n\n    private formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n        this.pretty\n            .formatCode(\n                leftAlignedCode,\n                this.language,\n                this.getLinenums(leftAlignedCode)\n            )\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(\n                c => this.setCodeHtml(c),\n                err => {\n                    /* ignore failure to format */\n                }\n            );\n    }\n\n    /** Sets the message showing that the code could not be found. */\n    private showMissingCodeMessage() {\n        const src = this.path\n            ? this.path + (this.region ? '#' + this.region : '')\n            : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(\n            `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n        );\n    }\n\n    /** Sets the innerHTML of the code container to the provided code string. */\n    private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n\n    /** Gets the textContent of the displayed code element. */\n    private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        } else {\n            this.logger.error(\n                new Error(`ERROR copying code to clipboard: \"${code}\"`)\n            );\n            this.snackbar.open('Copy failed. Please try again!', '', {\n                duration: 800,\n            });\n        }\n    }\n\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums(code: string) {\n        const linenums =\n      typeof this.linenums === 'boolean'\n          ? this.linenums\n          : this.linenums === 'true'\n              ? true\n              : this.linenums === 'false'\n                  ? false\n                  : typeof this.linenums === 'string'\n                      ? parseInt(this.linenums, 10)\n                      : this.linenums;\n\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums as number)\n            ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n            : linenums;\n    }\n}\n\nfunction leftAlign(text: string): string {\n    let indent = Number.MAX_VALUE;\n\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n\n    return lines\n        .map(line => line.substring(indent))\n        .join('\\n')\n        .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n    imports: [CommonModule, MatSnackBarModule],\n    declarations: [CodeComponent],\n    exports: [CodeComponent],\n    providers: [PrettyPrinter, CopierService],\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substring(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement | null;\n\n    /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n    createFake(text: string) {\n        const docElem = document.documentElement!;\n        const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n        // Create a fake element to hold the contents to copy\n        this.fakeElem = document.createElement('textarea');\n\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || docElem.scrollTop;\n        this.fakeElem.style.top = yPosition + 'px';\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = text;\n\n        document.body.appendChild(this.fakeElem);\n\n        this.fakeElem.select();\n        this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n        if (this.fakeElem) {\n            document.body.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    copyText(text: string) {\n        try {\n            this.createFake(text);\n            return document.execCommand('copy');\n        } catch (err) {\n            return false;\n        } finally {\n            this.removeFake();\n        }\n    }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n}\nMatSnackBarLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSnackBarLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n}\nMatSnackBarActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSnackBarActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n}\nMatSnackBarAction.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSnackBarAction.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    /** Applies the correct CSS class to the label based on its content. */\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatSnackBarContainer, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__dismiss .mdc-button__icon{font-size:var(--mdc-icon-button-icon-size, 24px)}.mat-mdc-snack-bar-container .mdc-snackbar__dismiss svg,.mat-mdc-snack-bar-container .mdc-snackbar__dismiss img{width:var(--mdc-icon-button-icon-size, 24px);height:var(--mdc-icon-button-icon-size, 24px)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color, inherit)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape, var(--mdc-shape-small, 4px))}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color, inherit)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size, inherit);font-family:var(--mdc-snackbar-supporting-text-font, inherit);font-weight:var(--mdc-snackbar-supporting-text-weight, inherit);line-height:var(--mdc-snackbar-supporting-text-line-height, inherit)}.cdk-high-contrast-active .mat-mdc-snack-bar-container{border:solid 1px}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-mdc-snack-bar-button-color, transparent);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__dismiss .mdc-button__icon{font-size:var(--mdc-icon-button-icon-size, 24px)}.mat-mdc-snack-bar-container .mdc-snackbar__dismiss svg,.mat-mdc-snack-bar-container .mdc-snackbar__dismiss img{width:var(--mdc-icon-button-icon-size, 24px);height:var(--mdc-icon-button-icon-size, 24px)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color, inherit)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape, var(--mdc-shape-small, 4px))}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color, inherit)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size, inherit);font-family:var(--mdc-snackbar-supporting-text-font, inherit);font-weight:var(--mdc-snackbar-supporting-text-weight, inherit);line-height:var(--mdc-snackbar-supporting-text-line-height, inherit)}.cdk-high-contrast-active .mat-mdc-snack-bar-container{border:solid 1px}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-mdc-snack-bar-button-color, transparent);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], propDecorators: { _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, declarations: [SimpleSnackBar,\n        MatSnackBarContainer,\n        MatSnackBarLabel,\n        MatSnackBarActions,\n        MatSnackBarAction], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatCommonModule,\n        MatSnackBarContainer,\n        MatSnackBarLabel,\n        MatSnackBarActions,\n        MatSnackBarAction] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [\n                        MatCommonModule,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                    declarations: [\n                        SimpleSnackBar,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"x_google_ignoreList":[4]}