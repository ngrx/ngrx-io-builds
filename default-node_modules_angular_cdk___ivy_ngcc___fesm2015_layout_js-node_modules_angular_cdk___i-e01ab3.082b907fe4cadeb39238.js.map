{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js","./node_modules/rxjs/_esm2015/internal/operators/skip.js","./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js"],"names":["mediaQueryStyleNode","SkipOperator","total","this","subscriber","source","subscribe","SkipSubscriber","destination","count","x","next","Subscriber","mediaQueriesForWebkitCompatibility","Set","MediaMatcher","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","createEmptyStyleRule","ɵfac","t","ɵprov","factory","token","providedIn","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","Subject","complete","value","splitQueries","some","mediaQuery","_registerQuery","mql","observables","map","observable","stateObservable","combineLatest","concat","pipe","take","lift","debounceTime","breakpointStates","response","breakpoints","forEach","get","output","Observable","observer","handler","run","startWith","takeUntil","set","queries","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","TakeWhileOperator","predicate","inclusive","TakeWhileSubscriber","index","result","err","nextOrComplete","predicateResult","Boolean","scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","key","undefined","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","indexOf","splice","length","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","_isAttached","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_clickListener","target","composedPath","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","isTestEnvironment","__karma__","jasmine","OverlayContainer","container","_containerElement","parentNode","removeChild","_createContainer","containerClass","oppositePlatformContainers","querySelectorAll","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","subscription","merge","children","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","startX","_isRtl","endX","y","overlayStartX","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentValue","currentOverflow","axis","Element","hasOwnProperty","input","units","parseFloat","clientRect","floor","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","ɵdir","type","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","changes","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keydownEvents","keyCode","preventDefault","outsidePointerEvents","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","takeWhile","inputs","outputs","features","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","providers","imports"],"mappings":"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","file":"default-node_modules_angular_cdk___ivy_ngcc___fesm2015_layout_js-node_modules_angular_cdk___i-e01ab3.082b907fe4cadeb39238.js","sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵfac = function LayoutModule_Factory(t) { return new (t || LayoutModule)(); };\nLayoutModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(i0.ɵɵinject(i1.Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n    constructor(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n}\nclass TakeWhileSubscriber extends Subscriber {\n    constructor(destination, predicate, inclusive) {\n        super(destination);\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        let result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    }\n    nextOrComplete(value, predicateResult) {\n        const destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=takeWhile.js.map","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        if (this._platform.isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n//# sourceMappingURL=overlay.js.map"],"sourceRoot":"webpack:///"}