{"version":3,"mappings":"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","names":["mediaQueryStyleNode","mediaQueriesForWebkitCompatibility","Set","MediaMatcher","_platform","this","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","createEmptyStyleRule","ɵfac","i0","i1","ɵprov","factory","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","Subject","next","complete","value","splitQueries","coerceArray","some","I","_registerQuery","mediaQuery","mql","observables","map","observable","stateObservable","combineLatest","concat","pipe","take","skip","debounceTime","response","breakpoints","breakpointStates","forEach","Z","get","output","Observable","observer","handler","run","startWith","F","takeUntil","set","queries","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","p","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","s","disable","_overlayRef","hasAttached","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","t","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","element","scrollContainers","bottom","containerBounds","right","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","close","config","r","block","reposition","DOCUMENT","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","key","i","undefined","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","event","f","_keydownEvents","_outsidePointerEvents","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","_disposeBackdrop","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","addEventListener","requestAnimationFrame","runOutsideAngular","nextSibling","parentNode","backdropToDetach","timeoutId","finishDetach","removeEventListener","clearTimeout","setTimeout","cssClasses","isAdd","filter","c","length","a","subscription","merge","children","backdrop","OverlayContainer","_containerElement","_createContainer","containerClass","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","i1$1","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","push","position","origin","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","st","Y","bestFit","bestScore","M","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","indexOf","margin","flexibleDimensions","arguments","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","originX","startX","_isRtl","endX","y","originY","overlayStartX","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","nativeElement","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","destination","source","hasOwnProperty","input","units","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","u","parent","OverlayPositionBuilder","BaseOverlayDispatcher","_attachedOverlays","index","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","X","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","slice","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","i5","i6","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","ɵdir","selectors","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","EventEmitter","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","coerceBooleanProperty","changes","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","outsidePointerEvents","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","withPositions","withFlexibleDimensions","withPush","withGrowAfterOpen","withViewportMargin","withLockedPosition","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","predicate","inclusive","operate","subscriber","OperatorSubscriber","result","takeWhile","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","imports","BidiModule","PortalModule","ScrollingModule"],"sources":["./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/rxjs/dist/esm/internal/operators/takeWhile.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, ApplicationRef, InjectionToken, Directive, EventEmitter, Optional, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        const finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                this._disposeBackdrop(backdropToDetach);\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer\n            .getContainerElement()\n            .getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('pointerdown', this._pointerDownListener, true);\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            const result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_cdk_fesm2015_layout_mjs-node_modules_angular_cdk_fesm2015_overlay_mjs.fcb7f9a800293317.js"}