{"version":3,"file":"default-node_modules_angular_cdk_fesm2022_portal_mjs.ea0a32978ccbc879.js","mappings":"8OAoDA,MAAMA,EAEFC,OAAOC,GASH,OAAAC,KAAKC,cAAgBF,EACdA,EAAKD,OAAOE,KACvB,CAEAE,SACI,IAAIH,EAAOC,KAAKC,cACJ,MAARF,IACAC,KAAKC,cAAgB,KACrBF,EAAKG,SAKb,CAEA,cAAIC,GACA,OAA6B,MAAtBH,KAAKC,aAChB,CAKAG,gBAAgBL,GACZC,KAAKC,cAAgBF,CACzB,EAKJ,MAAMM,UAAwBR,EAC1BS,YAAYC,EAAWC,EAAkBC,EAAUC,EAA0BC,GACzEC,QACAZ,KAAKO,UAAYA,EACjBP,KAAKQ,iBAAmBA,EACxBR,KAAKS,SAAWA,EAChBT,KAAKU,yBAA2BA,EAChCV,KAAKW,iBAAmBA,CAC5B,EAKJ,MAAME,UAAuBhB,EACzBS,YAEAQ,EAEAN,EAEAO,EAEAN,GACIG,QACAZ,KAAKc,YAAcA,EACnBd,KAAKQ,iBAAmBA,EACxBR,KAAKe,QAAUA,EACff,KAAKS,SAAWA,CACpB,CACA,UAAIO,GACA,OAAOhB,KAAKc,YAAYG,UAC5B,CAMAnB,OAAOC,EAAMgB,EAAUf,KAAKe,SACxB,OAAAf,KAAKe,QAAUA,EACRH,MAAMd,OAAOC,EACxB,CACAG,SACI,OAAAF,KAAKe,aAAUG,EACRN,MAAMV,QACjB,EAOJ,MAAMiB,UAAkBtB,EACpBS,YAAYc,GACRR,QACAZ,KAAKoB,QAAUA,aAAmBC,MAAaD,EAAQE,cAAgBF,CAC3E,EAMJ,MAAMG,EACFjB,cAEIN,KAAKwB,aAAc,EAEnBxB,KAAKyB,gBAAkB,IAC3B,CAEAC,cACI,QAAS1B,KAAK2B,eAClB,CAEA7B,OAAO8B,GAYH,OAAIA,aAAkBvB,GAClBL,KAAK2B,gBAAkBC,EAChB5B,KAAK6B,sBAAsBD,IAE7BA,aAAkBf,GACvBb,KAAK2B,gBAAkBC,EAChB5B,KAAK8B,qBAAqBF,IAG5B5B,KAAKyB,iBAAmBG,aAAkBT,GAC/CnB,KAAK2B,gBAAkBC,EAChB5B,KAAKyB,gBAAgBG,SAF3B,CAOT,CAEA1B,SACQF,KAAK2B,kBACL3B,KAAK2B,gBAAgBvB,gBAAgB,MACrCJ,KAAK2B,gBAAkB,MAE3B3B,KAAK+B,kBACT,CAEAC,UACQhC,KAAK0B,eACL1B,KAAKE,SAETF,KAAK+B,mBACL/B,KAAKwB,aAAc,CACvB,CAEAS,aAAaC,GACTlC,KAAKmC,WAAaD,CACtB,CACAH,mBACQ/B,KAAKmC,aACLnC,KAAKmC,aACLnC,KAAKmC,WAAa,KAE1B,EAaJ,MAAMC,UAAwBb,EAY1BjB,YAEA+B,EAAeC,EAA2BC,EAASC,EAKnDC,GACI7B,QACAZ,KAAKqC,cAAgBA,EACrBrC,KAAKsC,0BAA4BA,EACjCtC,KAAKuC,QAAUA,EACfvC,KAAKwC,iBAAmBA,EAOxBxC,KAAKyB,gBAAmBG,IAMpB,MAAMR,EAAUQ,EAAOR,QAMjBsB,EAAa1C,KAAKyC,UAAUE,cAAc,cAChDvB,EAAQwB,WAAWC,aAAaH,EAAYtB,GAC5CpB,KAAKqC,cAAcS,YAAY1B,GAC/BpB,KAAK2B,gBAAkBC,EACvBhB,MAAMqB,aAAa,KAEXS,EAAWE,YACXF,EAAWE,WAAWG,aAAa3B,EAASsB,EAAU,EAE7D,EAEL1C,KAAKyC,UAAYA,CACrB,CAMAZ,sBAAsBD,GAKlB,MAAMoB,GAJYpB,EAAOlB,0BAA4BV,KAAKsC,2BAIxBW,wBAAwBrB,EAAOrB,WACjE,IAAI2C,EAKJ,OAAItB,EAAOpB,kBACP0C,EAAetB,EAAOpB,iBAAiB2C,gBAAgBH,EAAkBpB,EAAOpB,iBAAiB4C,OAAQxB,EAAOnB,UAAYmB,EAAOpB,iBAAiBC,SAAUmB,EAAOjB,uBAAoBO,GACzLlB,KAAKiC,aAAa,IAAMiB,EAAaG,aAMrCH,EAAeF,EAAiBM,OAAO1B,EAAOnB,UAAYT,KAAKwC,kBAAoBe,MAASC,MAC5FxD,KAAKuC,QAAQkB,WAAWP,EAAaQ,UACrC1D,KAAKiC,aAAa,KAGVjC,KAAKuC,QAAQoB,UAAY,GACzB3D,KAAKuC,QAAQqB,WAAWV,EAAaQ,UAEzCR,EAAaG,SAAQ,IAK7BrD,KAAKqC,cAAcS,YAAY9C,KAAK6D,sBAAsBX,IAC1DlD,KAAK2B,gBAAkBC,EAChBsB,CACX,CAMApB,qBAAqBF,GACjB,IAAIkC,EAAgBlC,EAAOpB,iBACvBuD,EAAUD,EAAcE,mBAAmBpC,EAAOd,YAAac,EAAOb,QAAS,CAC/EN,SAAUmB,EAAOnB,WAMrBsD,SAAQE,UAAUC,QAAQC,GAAYnE,KAAKqC,cAAcS,YAAYqB,IAIrEJ,EAAQK,gBACRpE,KAAKiC,aAAa,KACd,IAAIoC,EAAQP,EAAcQ,QAAQP,IACpB,IAAVM,GACAP,EAAcS,OAAOF,EAAK,GAGlCrE,KAAK2B,gBAAkBC,EAEhBmC,CACX,CAIA/B,UACIpB,MAAMoB,UACNhC,KAAKqC,cAAckC,QACvB,CAEAV,sBAAsBX,GAClB,OAAOA,EAAaQ,SAASO,UAAU,EAC3C,EASJ,IAIMO,EAAS,UAAAC,EAAf,MAAMD,UAAkB3D,EACpBP,YAAYQ,EAAaN,GACrBI,MAAME,EAAaN,EACvB,EAGHiE,SANKD,GAIYE,UAAI,SAAAC,GAAA,WAAAA,GAA6FH,GAAVI,MAAqCA,OAArCA,MAAgEA,OAAmB,EAC/KH,EAAKI,UADuFD,MAAE,CAAAE,KACJN,EAASO,UAAA,sBAAAC,SAAA,cAAAC,SAAA,CADPL,SAJnGJ,CAAS,KA+CTU,EAAe,UAAAC,EAArB,MAAMD,UAAwB3D,EAC1BjB,YAAYgC,EAA2B8C,EAKvC3C,GACI7B,QACAZ,KAAKsC,0BAA4BA,EACjCtC,KAAKoF,kBAAoBA,EAEzBpF,KAAKqF,gBAAiB,EAEtBrF,KAAKsF,SAAW,IAAIC,MAOpBvF,KAAKyB,gBAAmBG,IAMpB,MAAMR,EAAUQ,EAAOR,QAMjBsB,EAAa1C,KAAKyC,UAAUE,cAAc,cAChDf,EAAOxB,gBAAgBJ,MACvBoB,EAAQwB,WAAWC,aAAaH,EAAYtB,GAC5CpB,KAAKwF,eAAe1C,YAAY1B,GAChCpB,KAAK2B,gBAAkBC,EACvBhB,MAAMqB,aAAa,KACXS,EAAWE,YACXF,EAAWE,WAAWG,aAAa3B,EAASsB,EAAU,EAE7D,EAEL1C,KAAKyC,UAAYA,CACrB,CAEA,UAAIb,GACA,OAAO5B,KAAK2B,eAChB,CACA,UAAIC,CAAOA,GAKH5B,KAAK0B,gBAAkBE,IAAW5B,KAAKqF,iBAGvCrF,KAAK0B,eACLd,MAAMV,SAEN0B,GACAhB,MAAMd,OAAO8B,GAEjB5B,KAAK2B,gBAAkBC,GAAU,KACrC,CAEA,eAAI6D,GACA,OAAOzF,KAAK0F,YAChB,CACAC,WACI3F,KAAKqF,gBAAiB,CAC1B,CACAO,cACIhF,MAAMoB,UACNhC,KAAK0F,aAAe1F,KAAK2B,gBAAkB,IAC/C,CAOAE,sBAAsBD,GAClBA,EAAOxB,gBAAgBJ,MAGvB,MAAMQ,EAA8C,MAA3BoB,EAAOpB,iBAA2BoB,EAAOpB,iBAAmBR,KAAKoF,kBAEpFpC,GADWpB,EAAOlB,0BAA4BV,KAAKsC,2BACvBW,wBAAwBrB,EAAOrB,WAC3DsF,EAAMrF,EAAiB2C,gBAAgBH,EAAkBxC,EAAiB4C,OAAQxB,EAAOnB,UAAYD,EAAiBC,SAAUmB,EAAOjB,uBAAoBO,GAIjK,OAAIV,IAAqBR,KAAKoF,mBAC1BpF,KAAKwF,eAAe1C,YAAY+C,EAAInC,SAASO,UAAU,IAE3DrD,MAAMqB,aAAa,IAAM4D,EAAIxC,WAC7BrD,KAAK2B,gBAAkBC,EACvB5B,KAAK0F,aAAeG,EACpB7F,KAAKsF,SAASQ,KAAKD,GACZA,CACX,CAMA/D,qBAAqBF,GACjBA,EAAOxB,gBAAgBJ,MACvB,MAAM+D,EAAU/D,KAAKoF,kBAAkBpB,mBAAmBpC,EAAOd,YAAac,EAAOb,QAAS,CAC1FN,SAAUmB,EAAOnB,WAErB,OAAAG,MAAMqB,aAAa,IAAMjC,KAAKoF,kBAAkBW,SAChD/F,KAAK2B,gBAAkBC,EACvB5B,KAAK0F,aAAe3B,EACpB/D,KAAKsF,SAASQ,KAAK/B,GACZA,CACX,CAEAyB,eACI,MAAMlE,EAAgBtB,KAAKoF,kBAAkBhE,QAAQE,cAGrD,OAAQA,EAAc0E,WAAa1E,EAAc2E,aAC3C3E,EACAA,EAAcsB,UACxB,EAGHuC,SAjIKD,GA+HYR,UAAI,SAAAC,GAAA,WAAAA,GAA6FO,GA1KVN,MA0K2CA,OA1K3CA,MA0KmFA,OA1KnFA,MA0KmHsB,MAAQ,EACvNf,EAAKN,UA3KuFD,MAAE,CAAAE,KA2KJI,EAAeH,UAAA,4BAAAoB,OAAA,CAAAvE,OAAA,8BAAAwE,QAAA,CAAAd,SAAA,YAAAN,SAAA,oBAAAC,SAAA,CA3KbL,SA2CnGM,CAAe,KA0KfmB,EAAY,UAAAC,EAAlB,MAAMD,GAILC,SAJKD,GACY3B,UAAI,SAAAC,GAAA,WAAAA,GAA6F0B,EAAY,EAClHC,EAAKC,UAvNuF3B,MAAE,CAAAE,KAuNSuB,IACvGC,EAAKE,UAxNuF5B,MAAE,IAqNrGyB,CAAY","names":["Portal","attach","host","this","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","componentFactoryResolver","projectableNodes","super","TemplatePortal","templateRef","context","origin","elementRef","undefined","DomPortal","element","ElementRef","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","anchorNode","createComment","parentNode","insertBefore","appendChild","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","length","destroy","create","Injector","NULL","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","CdkPortal","_class","ɵfac","t","i0","ɵdir","type","selectors","exportAs","features","CdkPortalOutlet","_class3","_viewContainerRef","_isInitialized","attached","EventEmitter","_getRootNode","attachedRef","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","nodeType","ELEMENT_NODE","DOCUMENT","inputs","outputs","PortalModule","_class5","ɵmod","ɵinj"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/portal.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n            {\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective,\n            },\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n            {\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective,\n            },\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: PortalModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n"],"x_google_ignoreList":[0]}