{"version":3,"file":"default-node_modules_angular_cdk_fesm2020_layout_mjs-node_modules_angular_cdk_fesm2020_overlay_mjs.2815685037368004.js","mappings":"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","names":["mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","constructor","_platform","this","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","createEmptyStyleRule","ɵfac","i0","i1","ɵprov","factory","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","Subject","ngOnDestroy","next","complete","isMatched","value","queries","coerceArray","some","mediaQuery","_registerQuery","mql","observe","observables","map","observable","stateObservable","combineLatest","concat","pipe","take","skip","debounceTime","breakpointStates","response","breakpoints","forEach","get","output","Observable","observer","handler","run","startWith","takeUntil","set","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","element","scrollContainers","containerBounds","bottom","right","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","close","config","block","reposition","DOCUMENT","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","undefined","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","index","indexOf","splice","length","OverlayKeyboardDispatcher","super","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","origin","type","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","filter","c","subscription","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","s","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","nativeElement","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","destination","source","hasOwnProperty","input","units","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","h","k","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","i5","i6","ANIMATION_MODULE_TYPE","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","ɵdir","selectors","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","EventEmitter","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","coerceBooleanProperty","lockPosition","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","predicate","inclusive","operate","subscriber","createOperatorSubscriber","result","takeWhile","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","imports","BidiModule","PortalModule","ScrollingModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2020/layout.mjs","./node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/rxjs/dist/esm/internal/operators/takeWhile.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n"]}