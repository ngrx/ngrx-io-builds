{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js","./node_modules/rxjs/_esm2015/internal/operators/skip.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts"],"names":["scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","document","this","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","t","ɵprov","factory","token","providedIn","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","key","undefined","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","push","index","indexOf","splice","length","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_clickListener","target","composedPath","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","isTestEnvironment","__karma__","jasmine","OverlayContainer","container","_containerElement","parentNode","removeChild","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","value","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","forEach","cssClass","subscription","takeUntil","merge","children","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","Element","destination","source","hasOwnProperty","input","split","units","parseFloat","clientRect","floor","mediaQueryStyleNode","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","type","ɵinj","providers","imports","SkipOperator","total","subscriber","SkipSubscriber","count","Subscriber","mediaQueriesForWebkitCompatibility","Set","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","head","sheet","insertRule","e","console","error","createEmptyStyleRule","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","splitQueries","mediaQuery","_registerQuery","mql","observables","observable","stateObservable","combineLatest","concat","lift","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","queries","a1","a2","SimpleSnackBar_div_2_Template","rf","ctx","_r2","action","ctx_r0","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","ɵcmp","selectors","hostAttrs","decls","vars","consts","template","message","hasAction","directives","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","toState","fromState","_completeExit","onEnter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","removeAttribute","focus","viewQuery","_t","first","hostVars","hostBindings","$event","onAnimationEnd","features","animation","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","component","_attach","openFromComponent","injector","viewContainerRef","useValue","containerPortal","containerRef","instance","content","userConfig","_createOverlay","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","state","announce","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","global","isLeft","isRight","centerHorizontally","create","snackbar","pretty","copier","logger","ariaLabel","codeFormatted","_code","code","formatDisplayedCode","showMissingCodeMessage","_header","header","ngOnChanges","indent","lines","leftAlignedCode","Number","MAX_VALUE","line","lineIndent","search","substr","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","emit","c","err","src","path","region","formattedCode","codeContainer","innerHTML","textContent","doCopy","copyText","log","open","Error","linenums","parseInt","isNaN","match","CodeComponent","CodeModule","prettyPrintOne","getPrettyPrintOne","ppo","Promise","resolve","then","msg","PrettyPrinter","createFake","text","docElem","isRTL","getAttribute","fakeElem","fontSize","border","padding","yPosition","pageYOffset","scrollTop","select","setSelectionRange","removeFake","execCommand","CopierService"],"mappings":"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","file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.e291679684178c524735.js","sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        if (this._platform.isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n//# sourceMappingURL=overlay.js.map","import * as i0 from '@angular/core';\nimport { NgModule, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵfac = function LayoutModule_Factory(t) { return new (t || LayoutModule)(); };\nLayoutModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(i0.ɵɵinject(i1.Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n    selector: 'aio-code',\n    template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n    ariaLabel = '';\n\n    /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n    private codeText: string;\n\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code: string) {\n        this._code = code;\n\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        } else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code(): string {\n        return this._code;\n    }\n    _code: string;\n\n    /** Whether the copy button should be shown. */\n    @Input() hideCopy: boolean;\n\n    /** Language to render the code (e.g. javascript, dart, typescript). */\n    @Input() language: string;\n\n    /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n    @Input() linenums: boolean | number | string;\n\n    /** Path to the source of the code. */\n    @Input() path: string;\n\n    /** Region of the source of the code being displayed. */\n    @Input() region: string;\n\n    /** Optional header to be displayed above the code. */\n    @Input()\n    set header(header: string) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header(): string {\n        return this._header;\n    }\n    private _header: string;\n\n    @Output() codeFormatted = new EventEmitter<void>();\n\n    /** The element in the template that will display the formatted code. */\n    @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n    constructor(\n        private snackbar: MatSnackBar,\n        private pretty: PrettyPrinter,\n        private copier: CopierService,\n        private logger: Logger\n    ) {}\n\n    ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n\n    private formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n        this.pretty\n            .formatCode(\n                leftAlignedCode,\n                this.language,\n                this.getLinenums(leftAlignedCode)\n            )\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(\n                c => this.setCodeHtml(c),\n                err => {\n                    /* ignore failure to format */\n                }\n            );\n    }\n\n    /** Sets the message showing that the code could not be found. */\n    private showMissingCodeMessage() {\n        const src = this.path\n            ? this.path + (this.region ? '#' + this.region : '')\n            : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(\n            `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n        );\n    }\n\n    /** Sets the innerHTML of the code container to the provided code string. */\n    private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n\n    /** Gets the textContent of the displayed code element. */\n    private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        } else {\n            this.logger.error(\n                new Error(`ERROR copying code to clipboard: \"${code}\"`)\n            );\n            this.snackbar.open('Copy failed. Please try again!', '', {\n                duration: 800,\n            });\n        }\n    }\n\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums(code: string) {\n        const linenums =\n      typeof this.linenums === 'boolean'\n          ? this.linenums\n          : this.linenums === 'true'\n              ? true\n              : this.linenums === 'false'\n                  ? false\n                  : typeof this.linenums === 'string'\n                      ? parseInt(this.linenums, 10)\n                      : this.linenums;\n\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums as number)\n            ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n            : linenums;\n    }\n}\n\nfunction leftAlign(text: string): string {\n    let indent = Number.MAX_VALUE;\n\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n\n    return lines\n        .map(line => line.substr(indent))\n        .join('\\n')\n        .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n    imports: [ CommonModule, MatSnackBarModule ],\n    declarations: [ CodeComponent ],\n    entryComponents: [ CodeComponent ],\n    exports: [ CodeComponent ],\n    providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement | null;\n\n    /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n    createFake(text: string) {\n        const docElem = document.documentElement!;\n        const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n        // Create a fake element to hold the contents to copy\n        this.fakeElem = document.createElement('textarea');\n\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || docElem.scrollTop;\n        this.fakeElem.style.top = yPosition + 'px';\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = text;\n\n        document.body.appendChild(this.fakeElem);\n\n        this.fakeElem.select();\n        this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n        if (this.fakeElem) {\n            document.body.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    copyText(text: string) {\n        try {\n            this.createFake(text);\n            return document.execCommand('copy');\n        } catch (err) {\n            return false;\n        } finally {\n            this.removeFake();\n        }\n    }\n}\n"],"sourceRoot":"webpack:///"}