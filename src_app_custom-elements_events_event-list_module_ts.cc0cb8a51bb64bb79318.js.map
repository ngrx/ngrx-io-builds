{"version":3,"sources":["./src/app/custom-elements/events/event.service.ts","./src/app/custom-elements/events/event-order-by.pipe.ts","./src/app/custom-elements/events/event-date-range.pipe.ts","./src/app/custom-elements/events/event-list.component.ts","./src/app/custom-elements/events/event-list.module.ts"],"names":["eventsPath","http","now","Date","this","currentDate","UTC","getFullYear","getMonth","getDate","events$","getEvents","upcomingEvents$","pipe","map","events","filter","event","endDate","pastEvents$","get","eventResponses","eventResponse","startDate","undefined","publishLast","connect","EventService","transform","orderBy","sort","eventOne","eventTwo","EventOrderByPipe","getTime","getYear","getDay","getDateString","EventDateRangePipe","date","getUTCDate","months","getUTCMonth","getUTCFullYear","eventService","EventListComponent","customElementComponent","EventListModule"],"mappings":"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","file":"src_app_custom-elements_events_event-list_module_ts.cc0cb8a51bb64bb79318.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { publishLast, map } from 'rxjs/operators';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { EventResponse, Event } from './event.model';\n\nconst eventsPath = CONTENT_URL_PREFIX + 'events.json';\n\n@Injectable()\nexport class EventService {\n    currentDate: Date;\n    private events$: Observable<Event[]>;\n    upcomingEvents$: Observable<Event[]>;\n    pastEvents$: Observable<Event[]>;\n\n    constructor(private http: HttpClient) {\n        const now = new Date();\n        // Compare soley on UTC date, without factoring in time.\n        this.currentDate = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));\n        this.events$ = this.getEvents();\n        this.upcomingEvents$ = this.events$.pipe(\n            map(events =>\n                events.filter(event => event.endDate >= this.currentDate)\n            )\n        );\n        this.pastEvents$ = this.events$.pipe(\n            map(events =>\n                events.filter(event => event.endDate < this.currentDate)\n            )\n        );\n    }\n\n    /**\n   * Fetch Event JSON from file and return an Observable that emits an Event array.\n   */\n    private getEvents(): Observable<Event[]> {\n        const events = this.http.get<EventResponse[]>(eventsPath).pipe(\n            map(eventResponses =>\n                eventResponses.map(eventResponse => {\n                    const event: Event = {\n                        ...eventResponse,\n                        startDate: eventResponse.startDate ? new Date(eventResponse.startDate) : undefined,\n                        endDate: new Date(eventResponse.endDate)\n                    };\n                    return event;\n                })\n            ),\n            publishLast(),\n        );\n\n        (events as ConnectableObservable<Event[]>).connect();\n        return events;\n    };\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Event } from './event.model';\n\ntype EventOrderBy = 'ascending' | 'descending';\n\n/**\n * Transforms the events to sorted ascending or descending order by date.\n * If an event has a startDate, order based on it.  If not, use it's endDate.\n */\n@Pipe({name: 'eventOrderBy'})\nexport class EventOrderByPipe implements PipeTransform {\n    transform(events: Event[] | null, orderBy: EventOrderBy): Event[] {\n        if (events === null) {\n            return [];\n        }\n        switch (orderBy) {\n            case 'ascending': {\n                return events.sort((eventOne, eventTwo) => +(eventOne.startDate || eventOne.endDate) - +(eventTwo.startDate || eventTwo.endDate));\n            }\n            case 'descending': {\n                return events.sort((eventOne, eventTwo) => +(eventTwo.startDate || eventTwo.endDate) - +(eventOne.startDate || eventOne.endDate));\n            }\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Event } from './event.model';\n\n/**\n * Transforms the startDate and endDate for a given event into a dange range string.\n * undefined until '01-01-2019' -> 'January 1, 2019'\n * '01-01-2019' until '01-01-2019' -> 'January 1, 2019'\n * '01-01-2019' until '01-02-2019' -> 'January 1 - 2, 2019'\n * '01-28-2019' until '02-01-2019' -> 'January 28 - February 1, 2019'\n * '12-31-2018' until '01-01-2019' -> 'December 31, 2018 - January 1, 2019'\n */\n@Pipe({name: 'eventDateRange'})\nexport class EventDateRangePipe implements PipeTransform {\n    transform(event: Event): string {\n        const startDate = event.startDate;\n        const endDate = event.endDate;\n        if (!startDate || startDate.getTime() === endDate.getTime()) {\n            return getDateString(endDate);\n        } else {\n            if (getMonth(startDate) === getMonth(endDate) && getYear(startDate) === getYear(endDate)) {\n                return getMonth(startDate)\n          + ' ' + getDay(startDate) + ' - ' + getDay(endDate)\n          + ', ' + getYear(startDate);\n            } else if (getYear(startDate) === getYear(endDate)) {\n                return getMonth(startDate)\n          + ' ' + getDay(startDate)\n          + ' - ' + getMonth(endDate)\n          + ' ' + getDay(endDate)\n          + ', ' + getYear(startDate);\n            } else {\n                return getDateString(startDate)\n          + ' - ' + getDateString(endDate);\n            }\n        }\n    }\n}\n\nconst getDay = (date: Date) => date.getUTCDate();\nconst getMonth = (date: Date) => months[date.getUTCMonth()];\nconst getYear = (date: Date) => date.getUTCFullYear();\nconst getDateString = (date: Date) => getMonth(date) + ' ' + getDay(date) + ', ' + getYear(date);\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\n","import { Component } from '@angular/core';\nimport { Event } from './event.model';\nimport { EventService } from './event.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'aio-event-list',\n    template: `\n    <p>Upcoming Events presenting about NgRx:</p>\n    <table class=\"is-full-width\">\n      <thead>\n        <tr>\n          <th>Event</th>\n          <th>Location</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let upcomingEvent of upcomingEvents$ | async | eventOrderBy:'ascending'\">\n          <th><a [href]=\"upcomingEvent.url\" [title]=\"upcomingEvent.name\">{{upcomingEvent.name}}</a></th>\n          <td>{{upcomingEvent.location}}</td>\n          <td>{{upcomingEvent | eventDateRange}}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>Past Events:</p>\n    <table class=\"is-full-width\">\n      <thead>\n        <tr>\n          <th>Event</th>\n          <th>Location</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let pastEvent of pastEvents$ | async | eventOrderBy:'descending'\">\n          <th><a [href]=\"pastEvent.url\" [title]=\"pastEvent.name\">{{pastEvent.name}}</a></th>\n          <td>{{pastEvent.location}}</td>\n          <td>{{pastEvent | eventDateRange}}</td>\n        </tr>\n      </tbody>\n    </table>\n`\n})\nexport class EventListComponent {\n    upcomingEvents$: Observable<Event[]> = this.eventService.upcomingEvents$;\n    pastEvents$: Observable<Event[]> = this.eventService.pastEvents$;\n\n    constructor(private eventService: EventService) { }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { EventListComponent } from './event-list.component';\nimport { EventService } from './event.service';\nimport { EventDateRangePipe } from './event-date-range.pipe';\nimport { EventOrderByPipe } from './event-order-by.pipe';\n\n@NgModule({\n    imports: [ CommonModule ],\n    declarations: [ EventListComponent, EventDateRangePipe, EventOrderByPipe ],\n    entryComponents: [ EventListComponent ],\n    providers: [ EventService ]\n})\nexport class EventListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = EventListComponent;\n}\n"],"sourceRoot":"webpack:///"}