{
  "id": "guide/entity",
  "title": "@ngrx/entity",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/entity/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrxentity\">@ngrx/entity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity#ngrxentity\"><i class=\"material-icons\">link</i></a></h1>\n<p>Entity State adapter for managing record collections.</p>\n<p>Entity provides an API to manipulate and query entity collections.</p>\n<ul>\n<li>Reduces boilerplate for creating reducers that manage a collection of models.</li>\n<li>Provides performant CRUD operations for managing entity collections.</li>\n<li>Extensible type-safe adapters for selecting entity information.</li>\n</ul>\n<h2 id=\"installation\">Installation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity#installation\"><i class=\"material-icons\">link</i></a></h2>\n<p>Detailed installation instructions can be found on the <a href=\"guide/entity/install\">Installation</a> page.</p>\n<h2 id=\"entity-and-class-instances\">Entity and class instances<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity#entity-and-class-instances\"><i class=\"material-icons\">link</i></a></h2>\n<p>Entity promotes the use of plain JavaScript objects when managing collections. <em>ES6 class instances will be transformed into plain JavaScript objects when entities are managed in a collection</em>. This provides you with some assurances when managing these entities:</p>\n<ol>\n<li>Guarantee that the data structures contained in state don't themselves contain logic, reducing the chance that they'll mutate themselves.</li>\n<li>State will always be serializable allowing you to store and rehydrate from browser storage mechanisms like local storage.</li>\n<li>State can be inspected via the Redux Devtools.</li>\n</ol>\n<p>This is one of the <a href=\"docs\">core principles</a> of NgRx. The <a href=\"https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state\">Redux docs</a> also offers some more insight into this constraint.</p>\n\n</div>\n\n<!-- links to this doc:\n - docs\n - guide/data\n - guide/data/entity-actions\n - guide/data/faq\n - guide/data/limitations\n-->\n<!-- links from this doc:\n - docs\n - guide/entity#entity-and-class-instances\n - guide/entity#installation\n - guide/entity#ngrxentity\n - guide/entity/install\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/entity/index.md?message=docs%3A%20describe%20your%20change...\n - https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state\n-->"
}