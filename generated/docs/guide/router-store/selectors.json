{
  "id": "guide/router-store/selectors",
  "title": "Router selectors",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/router-store/selectors.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"router-selectors\">Router selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/selectors#router-selectors\"><i class=\"material-icons\">link</i></a></h1>\n<p>The <code><a href=\"api/router-store/getSelectors\" class=\"code-anchor\">getSelectors</a></code> method supplied within <code>@ngrx/router-store</code> provides functions for selecting common information from the router state.</p>\n<p>The default behavior of <code><a href=\"api/router-store/getSelectors\" class=\"code-anchor\">getSelectors</a></code> selects the router state for the <code>router</code> state key.\nIf the default router state config is overwritten with a different router state key, the <code><a href=\"api/router-store/getSelectors\" class=\"code-anchor\">getSelectors</a></code> method takes a selector function to select the piece of state where the router state is being stored.\nThe example below shows how to provide a selector for the top level <code>router</code> key in your state object.</p>\n<p><strong>Note:</strong> The <code><a href=\"api/router-store/getSelectors\" class=\"code-anchor\">getSelectors</a></code> method works with the <code><a href=\"api/router-store/routerReducer\" class=\"code-anchor\">routerReducer</a></code> provided by <code>@ngrx/router-store</code>. If you use a <a href=\"guide/router-store/configuration#custom-router-state-serializer\">custom serializer</a>, you'll need to provide your own selectors.</p>\n<p>Usage:</p>\n<h2 id=\"creating-a-selector-for-a-single-entity-with-id-as-route-param\">Creating a Selector for A Single Entity With Id As Route Param<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/selectors#creating-a-selector-for-a-single-entity-with-id-as-route-param\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"https://stackblitz.com/edit/ngrx-router-store-selectors?file=src/app/car.state.ts\">Full App Used In This Example</a></p>\n<code-example header=\"router.selectors.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/router-store/getSelectors\" class=\"code-anchor\">getSelectors</a> } from '@ngrx/router-store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const {\n  selectCurrentRoute, // <a href=\"api/store/select\" class=\"code-anchor\">select</a> the current route\n  selectFragment, // <a href=\"api/store/select\" class=\"code-anchor\">select</a> the current route <a href=\"api/router-store/MinimalActivatedRouteSnapshot#fragment\" class=\"code-anchor\">fragment</a>\n  selectQueryParams, // <a href=\"api/store/select\" class=\"code-anchor\">select</a> the current route query <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>\n  selectQueryParam, // factory function to <a href=\"api/store/select\" class=\"code-anchor\">select</a> a query param\n  selectRouteParams, // <a href=\"api/store/select\" class=\"code-anchor\">select</a> the current route <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>\n  selectRouteParam, // factory function to <a href=\"api/store/select\" class=\"code-anchor\">select</a> a route param\n  selectRouteData, // <a href=\"api/store/select\" class=\"code-anchor\">select</a> the current route data\n  selectUrl, // <a href=\"api/store/select\" class=\"code-anchor\">select</a> the current url\n} = <a href=\"api/router-store/getSelectors\" class=\"code-anchor\">getSelectors</a>();\n</code-example>\n<code-example header=\"car.reducer.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>, <a href=\"api/store/on\" class=\"code-anchor\">on</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>, <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a> } from '@ngrx/entity';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { appInit } from './car.actions';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface Car {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: string;\n  year: string;\n  make: string;\n  model: string;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> type CarState = <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>&#x3C;Car>;\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const carAdapter = <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a>&#x3C;Car>({\n  selectId: car => car.id,\n});\n\nconst initialState = carAdapter.getInitialState();\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const reducer = <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>&#x3C;CarState>(\n  initialState,\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(appInit, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, { cars }) => carAdapter.addMany(cars, <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>))\n);\n</code-example>\n<code-example header=\"car.selectors.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>, <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { selectRouteParams } from '../router.selectors';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { carAdapter, CarState } from './car.reducer';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const carsFeatureSelector = <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>&#x3C;CarState>('cars');\n\nconst { selectEntities, selectAll } = carAdapter.getSelectors();\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCarEntities = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  carsFeatureSelector,\n  selectEntities\n);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCars = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  carsFeatureSelector,\n  selectAll\n);\n\n// you can combine the `selectRouteParams` with `selectCarEntities`\n// to get a <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a> for the active car for this component based\n// <a href=\"api/store/on\" class=\"code-anchor\">on</a> the route\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCar = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectCarEntities,\n  selectRouteParams,\n  (cars, { carId }) => cars[carId]\n);\n</code-example>\n<code-example header=\"car.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/select\" class=\"code-anchor\">select</a>, <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { selectCar } from './car.selectors';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-car',\n  templateUrl: './car.component.html',\n  styleUrls: ['./car.component.css'],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class CarComponent {\n  car$ = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(selectCar));\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>) {}\n}\n</code-example>\n<h2 id=\"extracting-all-params-in-the-current-route\">Extracting all params in the current route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-store/selectors#extracting-all-params-in-the-current-route\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>selectRouteParam{s}</code> selector extracts params from the <strong>leaf child</strong> route segment only.</p>\n<p>It means that when using nested routes with the Angular router (use of the <code><a href=\"api/router-store/MinimalActivatedRouteSnapshot#children\" class=\"code-anchor\">children</a></code> property), only params from the leaf of the matching URL Tree will be extracted.</p>\n<p>If the routes are defined as:</p>\n<code-example language=\"typescript\">\n[\n  {\n    path: 'my/:urlPath',\n    component: /* ... */,\n    <a href=\"api/router-store/MinimalActivatedRouteSnapshot#children\" class=\"code-anchor\">children</a>: [\n      {\n        path: 'is/:matched',\n        component: /* ... */,\n      },\n    ],\n  },\n]\n</code-example>\n<p>Using <code>selectRouteParam{s}</code> will get the <code>matched</code> param but not the <code>urlPath</code> param, because it is not located in a leaf of the URL Tree.</p>\n<p>If all params in the URL Tree need to be extracted (both <code>urlPath</code> and <code>matched</code>), the following custom selector can be used. It accumulates params of all the segments in the matched route:</p>\n<code-example>\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Params } from '@angular/router';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectRouteNestedParams = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(selectRouter, (router) => {\n  let currentRoute = router?.state?.root;\n  let <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>: Params = {};\n  while (currentRoute?.firstChild) {\n    currentRoute = currentRoute.firstChild;\n    <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a> = {\n      ...params,\n      ...currentRoute.params,\n    };\n  }\n  return <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>;\n});\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectRouteNestedParam = (param: string) =>\n  <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(selectRouteNestedParams, (<a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>) => <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a> &#x26;&#x26; <a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>[param]);\n</code-example>\n<div class=\"alert is-important\">\n<p>Beware of using this accumulation technique when two params with the same name exist in the route (e.g. <code>my/:route/:<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>/with/another/:<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code>). Only the rightmost value is accessible because leftmost values are overwritten by the rightmost one in the traversal.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/UpdateResponseData#id\n - api/entity/EntityState\n - api/entity/createEntityAdapter\n - api/router-store/MinimalActivatedRouteSnapshot#children\n - api/router-store/MinimalActivatedRouteSnapshot#fragment\n - api/router-store/MinimalActivatedRouteSnapshot#params\n - api/router-store/getSelectors\n - api/router-store/routerReducer\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/Store\n - api/store/createFeatureSelector\n - api/store/createReducer\n - api/store/createSelector\n - api/store/on\n - api/store/select\n - api/store/testing/MockSelector#selector\n - guide/router-store/configuration#custom-router-state-serializer\n - guide/router-store/selectors#creating-a-selector-for-a-single-entity-with-id-as-route-param\n - guide/router-store/selectors#extracting-all-params-in-the-current-route\n - guide/router-store/selectors#router-selectors\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/router-store/selectors.md?message=docs%3A%20describe%20your%20change...\n - https://stackblitz.com/edit/ngrx-router-store-selectors?file=src/app/car.state.ts\n-->"
}