{
  "id": "guide/component/let",
  "title": "ngrxLet Structural Directive",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/let.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrxlet-structural-directive\">ngrxLet Structural Directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/let#ngrxlet-structural-directive\"><i class=\"material-icons\">link</i></a></h1>\n<p>The <code>*<a href=\"api/component/LetDirective\" class=\"code-anchor\">ngrxLet</a></code> directive serves a convenient way of binding observables to a view context (a dom element scope).\nIt also helps with several internal processing under the hood.</p>\n<p>Same as <a href=\"guide/component/push\">PushPipe</a>, it also respects ViewEngine as well as Ivy's new rendering API.</p>\n<h2 id=\"usage\">Usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/let#usage\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>*<a href=\"api/component/LetDirective\" class=\"code-anchor\">ngrxLet</a></code> directive is provided through the <code><a href=\"api/component/ReactiveComponentModule\" class=\"code-anchor\">ReactiveComponentModule</a></code>. To use it, add the <code><a href=\"api/component/ReactiveComponentModule\" class=\"code-anchor\">ReactiveComponentModule</a></code> to the <code>imports</code> of your NgModule.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { NgModule } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/component/ReactiveComponentModule\" class=\"code-anchor\">ReactiveComponentModule</a> } from '@ngrx/component';\n\n@NgModule({\n  imports: [\n    // other imports\n    <a href=\"api/component/ReactiveComponentModule\" class=\"code-anchor\">ReactiveComponentModule</a>\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyFeatureModule {}\n</code-example>\n<h2 id=\"comparison-with-async-pipe\">Comparison with Async Pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/let#comparison-with-async-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>The current way of binding an observable to the view looks like that:</p>\n<code-example language=\"html\">\n&#x3C;ng-container *ngIf=\"observableNumber$ | async as n\">\n  &#x3C;app-number [number]=\"n\">\n  &#x3C;/app-number>\n  &#x3C;app-number-special [number]=\"n\">\n  &#x3C;/app-number-special>\n&#x3C;/ng-container>\n</code-example>\n<p>The problem is <code>*ngIf</code> is also interfering with rendering and in case of a falsy value the component would be hidden.</p>\n<p>The <code>*<a href=\"api/component/LetDirective\" class=\"code-anchor\">ngrxLet</a></code> directive takes over several things while making it more convenient and safe to work with streams in the template.</p>\n<code-example language=\"html\">\n&#x3C;ng-container *<a href=\"api/component/LetDirective\" class=\"code-anchor\">ngrxLet</a>=\"observableNumber$ as n\">\n  &#x3C;app-number [number]=\"n\">\n  &#x3C;/app-number>\n&#x3C;/ng-container>\n\n&#x3C;ng-container *<a href=\"api/component/LetDirective\" class=\"code-anchor\">ngrxLet</a>=\"observableNumber$; let n\">\n  &#x3C;app-number [number]=\"n\">\n  &#x3C;/app-number>\n&#x3C;/ng-container>\n</code-example>\n<p>In addition to that it provides us information from the whole observable context.\nWe can track the observable notifications:</p>\n<ul>\n<li>next value</li>\n<li>error value</li>\n<li>completion state</li>\n</ul>\n<code-example language=\"html\">\n&#x3C;ng-container *<a href=\"api/component/LetDirective\" class=\"code-anchor\">ngrxLet</a>=\"observableNumber$; let n; let e = $error, let c = $complete\">\n  &#x3C;app-number [number]=\"n\"  *ngIf=\"!e &#x26;&#x26; !c\">\n  &#x3C;/app-number>\n  &#x3C;ng-container *ngIf=\"e\">\n  There is an error: {{e}}\n  &#x3C;/ng-container>\n  &#x3C;ng-container *ngIf=\"c\">\n  Observable completed: {{c}}\n  &#x3C;/ng-container>\n&#x3C;/ng-container>\n</code-example>\n<h2 id=\"included-features\">Included Features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component/let#included-features\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Binding is always present. (<code>*ngIf=\"truthy$\"</code>)</li>\n<li>Takes away the multiple usages of the <code>async</code> or <code><a href=\"api/component/PushPipe\" class=\"code-anchor\">ngrxPush</a></code> pipe</li>\n<li>Provides a unified/structured way of handling <code>null</code> and <code>undefined</code></li>\n<li>Triggers change-detection differently if <code>zone.js</code> is present or not (<code>ChangeDetectorRef.detectChanges</code> or <code>ChangeDetectorRef.markForCheck</code>)</li>\n<li>Triggers change-detection differently if ViewEngine or Ivy is present (<code>ChangeDetectorRef.detectChanges</code> or <code>ÉµdetectChanges</code>)</li>\n<li>Distinct same values in a row (distinctUntilChanged operator),\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/component\n - guide/component/push\n-->\n<!-- links from this doc:\n - api/component/LetDirective\n - api/component/PushPipe\n - api/component/ReactiveComponentModule\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - guide/component/let#comparison-with-async-pipe\n - guide/component/let#included-features\n - guide/component/let#ngrxlet-structural-directive\n - guide/component/let#usage\n - guide/component/push\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component/let.md?message=docs%3A%20describe%20your%20change...\n-->"
}