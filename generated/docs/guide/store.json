{
  "id": "guide/store",
  "title": "@ngrx/store",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrxstore\">@ngrx/store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#ngrxstore\"><i class=\"material-icons\">link</i></a></h1>\n<p>Store is RxJS powered global state management for Angular applications, inspired by Redux. Store is a controlled state container designed to help write performant, consistent applications on top of Angular.</p>\n<h2 id=\"key-concepts\">Key concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#key-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><a href=\"guide/store/actions\">Actions</a> describe unique events that are dispatched from components and services.</li>\n<li>State changes are handled by pure functions called <a href=\"guide/store/reducers\">reducers</a> that take the current state and the latest action to compute a new state.</li>\n<li><a href=\"guide/store/selectors\">Selectors</a> are pure functions used to select, derive and compose pieces of state.</li>\n<li>State is accessed with the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>, an observable of state and an observer of actions.</li>\n</ul>\n<h2 id=\"local-state-management\">Local state management<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#local-state-management\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx Store is mainly for managing global state across an entire application. In cases where you need to manage temporary or local component state, consider using <a href=\"guide/component-store\">NgRx ComponentStore</a>.</p>\n<h2 id=\"installation\">Installation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#installation\"><i class=\"material-icons\">link</i></a></h2>\n<p>Detailed installation instructions can be found on the <a href=\"guide/store/install\">Installation</a> page.</p>\n<h2 id=\"diagram\">Diagram<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#diagram\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following diagram represents the overall general flow of application state in NgRx.</p>\n<figure>\n  <img src=\"generated/images/guide/store/state-management-lifecycle.png\" alt=\"NgRx State Management Lifecycle Diagram\" width=\"100%\" height=\"100%\">\n</figure>\n<h2 id=\"tutorial\">Tutorial<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#tutorial\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following tutorial shows you how to manage the state of a counter, and how to select and display it within an Angular component. Try the <live-example name=\"store\" nodownload=\"\"></live-example>.</p>\n<ol>\n<li>\n<p>Generate a new project using StackBlitz <live-example name=\"ngrx-start\" nodownload=\"\"></live-example>.</p>\n</li>\n<li>\n<p>Right click on the <code>app</code> folder in StackBlitz and create a new file named <code>counter.actions.ts</code> to describe the counter actions to increment, decrement, and reset its value.</p>\n</li>\n</ol>\n<code-example header=\"src/app/counter.actions.ts\" path=\"store/src/app/counter.actions.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const increment = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[Counter Component] Increment');\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const decrement = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[Counter Component] Decrement');\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const reset = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>('[Counter Component] Reset');\n\n\n</code-example>\n<ol start=\"3\">\n<li>Define a reducer function to handle changes in the counter value based on the provided actions.</li>\n</ol>\n<code-example header=\"src/app/counter.reducer.ts\" path=\"store/src/app/counter.reducer.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>, <a href=\"api/store/on\" class=\"code-anchor\">on</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { increment, decrement, reset } from './counter.actions';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState = 0;\n\nconst _counterReducer = <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>(\n  initialState,\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(increment, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>) => <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> + 1),\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(decrement, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>) => <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> - 1),\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(reset, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>) => 0)\n);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> function counterReducer(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, action) {\n  return _counterReducer(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, action);\n}\n\n\n</code-example>\n<ol start=\"4\">\n<li>Import the <code><a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a></code> from <code>@ngrx/store</code> and the <code>counter.reducer</code> file.</li>\n</ol>\n<code-example header=\"src/app/app.module.ts (imports)\" path=\"store/src/app/app.module.ts\" region=\"imports\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { counterReducer } from './counter.reducer';\n\n</code-example>\n<ol start=\"5\">\n<li>Add the <code>StoreModule.forRoot</code> function in the <code>imports</code> array of your <code>AppModule</code> with an object containing the <code>count</code> and the <code>counterReducer</code> that manages the state of the counter. The <code><a href=\"api/store/StoreModule#forRoot\" class=\"code-anchor\">StoreModule.forRoot()</a></code> method registers the global providers needed to access the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> throughout your application.</li>\n</ol>\n<code-example header=\"src/app/app.module.ts (StoreModule)\" path=\"store/src/app/app.module.1.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BrowserModule } from '@angular/platform-browser';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { NgModule } from '@angular/core';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AppComponent } from './app.component';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { counterReducer } from './counter.reducer';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, StoreModule.forRoot({ count: counterReducer })],\n  providers: [],\n  bootstrap: [AppComponent],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n\n\n</code-example>\n<ol start=\"6\">\n<li>Create a new file called <code>my-counter.component.ts</code> in a folder named <code>my-counter</code> within the <code>app</code> folder that will define a new component called <code>MyCounterComponent</code>. This component will render buttons that allow the user to change the count state. Also, create the <code>my-counter.component.html</code> file within this same folder.</li>\n</ol>\n<code-example header=\"src/app/my-counter/my-counter.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Observable } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { increment, decrement, reset } from '../counter.actions';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-my-counter',\n  templateUrl: './my-counter.component.html',\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyCounterComponent {\n  count$: Observable&#x3C;number>\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;{ count: number }>) {\n    // TODO: This stream will connect to the current store `count` <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>\n    this.count$ = store.select('count');\n  }\n\n  increment() {\n    // TODO: Dispatch an increment action\n  }\n\n  decrement() {\n    // TODO: Dispatch a decrement action\n  }\n\n  reset() {\n    // TODO: Dispatch a reset action\n  }\n}\n</code-example>\n<code-example header=\"src/app/my-counter/my-counter.component.html\">\n    &#x3C;button (click)=\"increment()\">Increment&#x3C;/button>\n\n    &#x3C;div>Current Count: {{ count$ | async }}&#x3C;/div>\n\n    &#x3C;button (click)=\"decrement()\">Decrement&#x3C;/button>\n\n    &#x3C;button (click)=\"reset()\">Reset Counter&#x3C;/button>\n</code-example>\n<ol start=\"7\">\n<li>Add the new component to your AppModule's declarations and declare it in the template:</li>\n</ol>\n<code-example header=\"src/app/app.component.html\" path=\"store/src/app/app.component.html\" region=\"counter\">\n&#x3C;app-my-counter>&#x3C;/app-my-counter>\n\n</code-example>\n<code-example header=\"src/app/app.module.ts\" path=\"store/src/app/app.module.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BrowserModule } from '@angular/platform-browser';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { NgModule } from '@angular/core';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AppComponent } from './app.component';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { counterReducer } from './counter.reducer';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { MyCounterComponent } from './my-counter/my-counter.component';\n\n@NgModule({\n  declarations: [AppComponent, MyCounterComponent],\n  imports: [BrowserModule, StoreModule.forRoot({ count: counterReducer })],\n  providers: [],\n  bootstrap: [AppComponent],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n\n\n</code-example>\n<ol start=\"8\">\n<li>Inject the store into <code>MyCounterComponent</code> and connect the <code>count$</code> stream to the store's <code>count</code> state. Implement the <code>increment</code>, <code>decrement</code>, and <code>reset</code> methods by dispatching actions to the store.</li>\n</ol>\n<code-example header=\"src/app/my-counter/my-counter.component.ts\" path=\"store/src/app/my-counter/my-counter.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Observable } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { increment, decrement, reset } from '../counter.actions';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-my-counter',\n  templateUrl: './my-counter.component.html',\n  styleUrls: ['./my-counter.component.css'],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyCounterComponent {\n  count$: Observable&#x3C;number>;\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;{ count: number }>) {\n    this.count$ = store.select('count');\n  }\n\n  increment() {\n    this.store.dispatch(increment());\n  }\n\n  decrement() {\n    this.store.dispatch(decrement());\n  }\n\n  reset() {\n    this.store.dispatch(reset());\n  }\n}\n\n\n</code-example>\n<p>And that's it! Click the increment, decrement, and reset buttons to change the state of the counter.</p>\n<p>Let's cover what you did:</p>\n<ul>\n<li>Defined actions to express events.</li>\n<li>Defined a reducer function to manage the state of the counter.</li>\n<li>Registered the global state container that is available throughout your application.</li>\n<li>Injected the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> service to dispatch actions and select the current state of the counter.</li>\n</ul>\n<h2 id=\"next-steps\">Next Steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>Learn about the architecture of an NgRx application through <a href=\"guide/store/actions\">actions</a>, <a href=\"guide/store/reducers\">reducers</a>, and <a href=\"guide/store/selectors\">selectors</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n - docs\n - guide/data\n - guide/data/faq\n - guide/effects\n - guide/router-store\n - guide/store-devtools\n - guide/store/testing\n - guide/store/why\n - index\n-->\n<!-- links from this doc:\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/Store\n - api/store/StoreModule\n - api/store/StoreModule#forRoot\n - api/store/createAction\n - api/store/createReducer\n - api/store/on\n - api/store/testing/MockSelector#selector\n - guide/component-store\n - guide/store#diagram\n - guide/store#installation\n - guide/store#key-concepts\n - guide/store#local-state-management\n - guide/store#next-steps\n - guide/store#ngrxstore\n - guide/store#tutorial\n - guide/store/actions\n - guide/store/install\n - guide/store/reducers\n - guide/store/selectors\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/index.md?message=docs%3A%20describe%20your%20change...\n-->"
}