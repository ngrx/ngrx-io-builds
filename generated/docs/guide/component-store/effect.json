{
  "id": "guide/component-store/effect",
  "title": "Effects",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/effect.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"effects\">Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/effect#effects\"><i class=\"material-icons\">link</i></a></h1>\n<p>Effects are designed to extract any side-effects (such as Network calls) from components and\nhandle potential race conditions.</p>\n<h2 id=\"key-concepts\">Key Concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/effect#key-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Effects isolate side effects from components, allowing for more pure components that select state and trigger updates and/or effects in ComponentStore(s).</li>\n<li>Effects are Observables listening for the inputs and piping them through the \"prescription\".</li>\n<li>Those inputs can either be values or Observables of values.</li>\n<li>Effects perform tasks, which are synchronous or asynchronous.</li>\n</ul>\n<h2 id=\"effect-method\"><code><a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a></code> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/effect#effect-method\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a></code> method takes a callback with an Observable of values, that describes HOW new\nincoming values should be handled. Each new call of the effect would push the value into that\nObservable.</p>\n<code-example header=\"movies.store.ts\">\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesStore extends <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;MoviesState> {\n  \n  constructor(private readonly moviesService: MoviesService) {\n    super({movies: []});\n  }\n\n  // Each new call of getMovie(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) pushed that <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a> into movieId$ stream.\n  readonly getMovie = this.effect((movieId$: Observable&#x3C;string>) => {\n    return movieId$.pipe(\n      // üëá Handle race condition with the proper choice of the flattening operator.\n      switchMap((<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) => this.moviesService.fetchMovie(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>).pipe(\n        //üëá Act <a href=\"api/store/on\" class=\"code-anchor\">on</a> the result within inner pipe.\n        tap({\n          next: (movie) => this.addMovie(movie),\n          error: (e) => this.logError(e),\n        }),\n        // üëá Handle potential error within inner pipe.\n        catchError(() => EMPTY),\n      )),\n    );\n  });\n\n  readonly addMovie = this.updater((<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, movie: Movie) => ({\n    movies: [...state.movies, movie],\n  }));\n\n  selectMovie(movieId: string) {\n    return this.select((<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>) => state.movies.find(m => m.id === movieId));\n  }\n}\n</code-example>\n<p>The <code>getMovie</code> effect could then be used within a component.</p>\n<code-example header=\"movie.component.ts\">\n@Component({\n  template: `...`,\n  // ‚ùóÔ∏èMoviesStore is provided higher up the component tree\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MovieComponent {\n  movie$: Observable&#x3C;Movie>;\n\n  @Input()\n  set movieId(<a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a>: string) {\n    // calls <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a> with value. üëá Notice it's a single string value.\n    this.moviesStore.getMovie(<a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a>);\n    this.movie$ = this.moviesStore.selectMovie(<a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a>);\n  }\n\n  constructor(private readonly moviesStore: MoviesStore) {}\n\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/component-store\n-->\n<!-- links from this doc:\n - api/component-store/ComponentStore\n - api/data/UpdateResponseData#id\n - api/effects/EffectNotification#effect\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/StoreDevtools#state\n - api/store/on\n - api/store/testing/MockSelector#value\n - guide/component-store/effect#effect-method\n - guide/component-store/effect#effects\n - guide/component-store/effect#key-concepts\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/effect.md?message=docs%3A%20describe%20your%20change...\n-->"
}