{
  "id": "guide/component-store/write",
  "title": "",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/write.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h2 id=\"updating-state\">Updating state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/write#updating-state\"><i class=\"material-icons\">link</i></a></h2>\n<p>ComponentStore can be updated in 2 ways:</p>\n<ul>\n<li>by calling <code>setState</code>.</li>\n<li>by calling creating an <code>updater</code> and passing inputs through it.</li>\n</ul>\n<p>Updater describes HOW the state changes. It takes a pure function with the current state and the value as arguments,\nand should return the new new state, updated immutably.</p>\n<p>There could be many updaters within ComponentStore. They are analogous to \"CASE\" statements or \"on()\" functions in <code>@ngrx/store</code> reducer.</p>\n<code-example header=\"movies.store.ts\">\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesStore extends ComponentStore&#x3C;MoviesState> {\n  \n  constructor() {\n    super({movies:[]});\n  }\n\n  readonly addMovie = this.updater((<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, movie: Movie) => ({\n    movies: [...state.movies, movie],\n  }));\n}\n</code-example>\n<p>Updater then can be called with the values imperatively or could take an Observable.</p>\n<code-example header=\"movies-page.component.ts\">\n@Component({\n  template: `\n    <div (click)=\"add(&#x27;New Movie&#x27;)\">Add a Movie</div>\n  `,\n  providers: [ComponentStore],\n})\nexport class MoviesPageComponent {\n\n  constructor(private readonly moviesStore: MoviesStore) {}\n\n  add(movie: string) {\n    moviesStore.addMovie(movie);\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/component-store\n-->\n<!-- links from this doc:\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/StoreDevtools#state\n - guide/component-store/write#updating-state\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/write.md?message=docs%3A%20describe%20your%20change...\n-->"
}