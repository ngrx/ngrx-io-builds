{
  "id": "guide/component-store/write",
  "title": "Updating state",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/write.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"updating-state\">Updating state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/write#updating-state\"><i class=\"material-icons\">link</i></a></h1>\n<p>ComponentStore can be updated in 2 ways:</p>\n<ul>\n<li>by calling <code>setState</code>.</li>\n<li>by creating an <code>updater</code> and passing inputs through it.</li>\n</ul>\n<h2 id=\"updater-method\"><code>updater</code> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/write#updater-method\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>updater</code> method describes HOW the state changes. It takes a pure function with the current state and the value as arguments,\nand should return the new state, updated immutably.</p>\n<p>There could be many updaters within a ComponentStore. They are analogous to \"CASE\" statements or <code><a href=\"api/store/on\" class=\"code-anchor\">on</a>()</code> functions in <code>@ngrx/store</code> reducer.</p>\n<div class=\"alert is-helpful\">\n<p>Using the <code>updater</code> method allows developers to extract business logic out of components into services,\nwhich makes components easier to read and test.</p>\n</div>\n<code-example header=\"movies.store.ts\">\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesStore extends <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;MoviesState> {\n  \n  constructor() {\n    super({movies: []});\n  }\n\n  readonly addMovie = this.updater((<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, movie: Movie) => ({\n    movies: [...state.movies, movie],\n  }));\n}\n</code-example>\n<p>Updater then can be called with the values imperatively or could take an Observable.</p>\n<code-example header=\"movies-page.component.ts\">\n@Component({\n  template: `\n    <div (click)=\"add(&#x27;New Movie&#x27;)\">Add a Movie</div>\n  `,\n  providers: [MoviesStore],\n})\nexport class MoviesPageComponent {\n\n  constructor(private readonly moviesStore: MoviesStore) {}\n\n  add(movie: string) {\n    moviesStore.addMovie(movie);\n  }\n}\n</code-example>\n<h2 id=\"setstate-method\"><code>setState</code> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/write#setstate-method\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>setState</code> method can be called by either providing the object of state type or as a callback.</p>\n<p>When the object is provided it resets the entire state to the provided value. This is also how lazy\ninitialization is performed.</p>\n<p>The callback approach allows developers to change the state partially.</p>\n<code-example header=\"movies-page.component.ts\">\n@Component({\n  template: `...`,\n  providers: [<a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesPageComponent {\n  constructor(\n    private readonly componentStore: <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;MoviesState>\n  ) {}\n\n  ngOnInit() {\n    this.componentStore.setState({movies: []});\n  }\n\n  resetMovies() {\n    //    resets the <a href=\"api/store/State\" class=\"code-anchor\">State</a> to empty array ðŸ‘‡\n    this.componentStore.setState({movies: []});\n  }\n\n  addMovie(movie: Movie) {\n    this.componentStore.setState((<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>) => {\n      const newMoviesList = [...state, movies];\n      newMoviesList.concat(movie); \n      return {\n        ...state,\n        movies: newMoviesList,\n      };\n    })\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/component-store\n - guide/component-store/initialization\n-->\n<!-- links from this doc:\n - api/component-store/ComponentStore\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/StoreDevtools#state\n - api/store/State\n - api/store/on\n - guide/component-store/write#setstate-method\n - guide/component-store/write#updater-method\n - guide/component-store/write#updating-state\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/write.md?message=docs%3A%20describe%20your%20change...\n-->"
}