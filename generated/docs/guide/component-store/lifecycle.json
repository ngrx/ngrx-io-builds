{
  "id": "guide/component-store/lifecycle",
  "title": "Lifecycle",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/component-store/lifecycle.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lifecycle\">Lifecycle<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#lifecycle\"><i class=\"material-icons\">link</i></a></h1>\n<p>NgRx ComponentStore comes with lifecycle hooks and observables for performing tasks after the ComponentStore is initially instantiated, after the initial state is first set, and when the ComponentStore is destroyed. You can use these lifecycle hooks to set up long-running effects, wire up additional logic, and other tasks outside the constructor of the ComponentStore.</p>\n<h2 id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#setup\"><i class=\"material-icons\">link</i></a></h2>\n<p>Both lifecycle hooks are enabled by providing the ComponentStore through the <code><a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>()</code> function. This function registers the ComponentStore as a provider, sets up a factory provider to instantiate the ComponentStore instance, and calls the implemented lifecycle hooks.</p>\n<p>Currently, Angular provides initializer tokens in a few areas. The <code>APP_INITIALIZER</code> and <code>BOOTSTRAP_INITIALIZER</code> for application/bootstrap init logic, and the <code>ENVIRONMENT_INITIALIZER</code> for environment injector init logic. The <code><a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>()</code> mimics this behavior to run the lifecycle hooks. The function is required because there aren't any provided tokens at the component level injector to allow initialization tasks.</p>\n<div class=\"alert is-important\">\n<p><strong>Note:</strong> If you implement the lifecycle hooks in the ComponentStore, and register it with <code>providers</code> without using <code><a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>()</code>, in development mode, a warning is logged to the browser console.</p>\n</div>\n<h2 id=\"onstoreinit\">OnStoreInit<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#onstoreinit\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/component-store/OnStoreInit\" class=\"code-anchor\">OnStoreInit</a></code> interface is used to implement the <code><a href=\"api/component-store/OnStoreInit#ngrxOnStoreInit\" class=\"code-anchor\">ngrxOnStoreInit</a></code> method in the ComponentStore class. This lifecycle method is called immediately after the ComponentStore class is instantiated.</p>\n<code-example header=\"books.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface BooksState {\n  collection: Book[];\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState: BooksState = {\n  collection: []\n};\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksStore extends <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;BooksState> implements <a href=\"api/component-store/OnStoreInit\" class=\"code-anchor\">OnStoreInit</a> {\n\n  constructor() {\n    super(initialState);\n  }\n\n  <a href=\"api/component-store/OnStoreInit#ngrxOnStoreInit\" class=\"code-anchor\">ngrxOnStoreInit</a>() {\n    // called after store has been instantiated\n  }\n}\n</code-example>\n<code-example header=\"books-page.component.ts\">\n@Component({\n  // ... other <a href=\"api/data/EntityDefinition#metadata\" class=\"code-anchor\">metadata</a>\n  providers: [\n    <a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>(BooksStore)\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksPageComponent {\n  constructor(private booksStore: BooksStore) {}\n}\n</code-example>\n<h2 id=\"onstateinit\">OnStateInit<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#onstateinit\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/component-store/OnStateInit\" class=\"code-anchor\">OnStateInit</a></code> interface is used to implement the <code><a href=\"api/component-store/OnStateInit#ngrxOnStateInit\" class=\"code-anchor\">ngrxOnStateInit</a></code> method in the ComponentStore class. This lifecycle method is called <strong>only once</strong> after the ComponentStore state is initially set. ComponentStore supports eager and lazy initialization of state, and the lifecycle hook is called appropriately in either scenario.</p>\n<h3 id=\"eager-state-init\">Eager State Init<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#eager-state-init\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"books.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface BooksState {\n  collection: Book[];\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState: BooksState = {\n  collection: []\n};\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksStore extends <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;BooksState> implements <a href=\"api/component-store/OnStateInit\" class=\"code-anchor\">OnStateInit</a> {\n  constructor() {\n    // eager state initialization\n    super(initialState);\n  }\n\n  <a href=\"api/component-store/OnStateInit#ngrxOnStateInit\" class=\"code-anchor\">ngrxOnStateInit</a>() {\n    // called once after state has been first initialized\n  }\n}\n</code-example>\n<code-example header=\"books-page.component.ts\">\n@Component({\n  // ... other <a href=\"api/data/EntityDefinition#metadata\" class=\"code-anchor\">metadata</a>\n  providers: [\n    <a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>(BooksStore)\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksPageComponent {\n  constructor(private booksStore: BooksStore) {}\n}\n</code-example>\n<h3 id=\"lazy-state-init\">Lazy State Init<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#lazy-state-init\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"books.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface BooksState {\n  collection: Book[];\n}\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksStore extends <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;BooksState> implements <a href=\"api/component-store/OnStateInit\" class=\"code-anchor\">OnStateInit</a> {\n  constructor() {\n    super();\n  }\n\n  <a href=\"api/component-store/OnStateInit#ngrxOnStateInit\" class=\"code-anchor\">ngrxOnStateInit</a>() {\n    // called once after state has been first initialized\n  }\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState: BooksState = {\n  collection: []\n};\n</code-example>\n<code-example header=\"books-page.component.ts\">\n@Component({\n  // ... other <a href=\"api/data/EntityDefinition#metadata\" class=\"code-anchor\">metadata</a>\n  providers: [\n    <a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>(BooksStore)\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksPageComponent implements OnInit {\n  constructor(private booksStore: BooksStore) {}\n\n  ngOnInit() {\n    // lazy state initialization\n    this.booksStore.setState(initialState);\n  }\n}\n</code-example>\n<h2 id=\"ondestroy\">OnDestroy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/lifecycle#ondestroy\"><i class=\"material-icons\">link</i></a></h2>\n<p>ComponentStore also implements the <code>OnDestroy</code> interface from <code>@angulare/core</code> to complete any internally created observables.</p>\n<p>It also exposes a <code><a href=\"api/component-store/ComponentStore#destroy$\" class=\"code-anchor\">destroy$</a></code> property on the ComponentStore class that can be used instead of manually creating a <code>Subject</code> to unsubscribe from any observables created in the component.</p>\n<div class=\"alert is-important\">\n<p><strong>Note:</strong> If you override the <code>ngOnDestroy</code> method in your component store, you need to call <code>super.ngOnDestroy()</code>. Otherwise a memory leak may occur.</p>\n</div>\n<code-example header=\"movies.store.ts\">\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesStore extends <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>&#x3C;MoviesState> implements OnDestroy {\n  \n  constructor() {\n    super({movies: []});\n  }\n\n  override ngOnDestroy(): void {\n    // 👇 add this line\n    super.ngOnDestroy();\n  }\n}\n</code-example>\n<code-example header=\"books-page.component.ts\">\n@Component({\n  // ... other <a href=\"api/data/EntityDefinition#metadata\" class=\"code-anchor\">metadata</a>\n  providers: [<a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksPageComponent implements OnInit {\n  constructor(private cs: <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a>) {}\n\n  ngOnInit() {\n    const timer = interval(1000)\n      .pipe(takeUntil(this.cs.destroy$))\n      .subscribe(() => {\n        // listen until <a href=\"api/component-store/ComponentStore\" class=\"code-anchor\">ComponentStore</a> is destroyed\n      });\n  }\n}\n</code-example>\n<p>The <code><a href=\"api/component-store/provideComponentStore\" class=\"code-anchor\">provideComponentStore</a>()</code> function is not required to listen to the <code><a href=\"api/component-store/ComponentStore#destroy$\" class=\"code-anchor\">destroy$</a></code> property on the ComoponentStore.</p>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/component-store/ComponentStore\n - api/component-store/ComponentStore#destroy$\n - api/component-store/OnStateInit\n - api/component-store/OnStateInit#ngrxOnStateInit\n - api/component-store/OnStoreInit\n - api/component-store/OnStoreInit#ngrxOnStoreInit\n - api/component-store/provideComponentStore\n - api/data/EntityDefinition#metadata\n - api/store-devtools/DevToolsFeatureOptions#export\n - guide/component-store/lifecycle#eager-state-init\n - guide/component-store/lifecycle#lazy-state-init\n - guide/component-store/lifecycle#lifecycle\n - guide/component-store/lifecycle#ondestroy\n - guide/component-store/lifecycle#onstateinit\n - guide/component-store/lifecycle#onstoreinit\n - guide/component-store/lifecycle#setup\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/component-store/lifecycle.md?message=docs%3A%20describe%20your%20change...\n-->"
}