{
  "id": "guide/component-store/initialization",
  "title": "Initialization",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/initialization.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"initialization\">Initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/initialization#initialization\"><i class=\"material-icons\">link</i></a></h1>\n<p>ComponentStore can be initialized in 2 ways:</p>\n<ul>\n<li>through the constructor - it would have the initial state</li>\n<li>by calling <code>setState</code> and passing an object that matches the state interface.</li>\n</ul>\n<h2 id=\"initialization-through-the-constructor\">Initialization through the constructor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/initialization#initialization-through-the-constructor\"><i class=\"material-icons\">link</i></a></h2>\n<p>Initializing through the constructor makes the state immediately available to the ComponentStore consumers.</p>\n<code-example header=\"movies.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface MoviesState {\n  movies: Movie[];\n}\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesStore extends ComponentStore&#x3C;MoviesState> {\n  \n  constructor() {\n    super({movies: []});\n  }\n}\n</code-example>\n<h2 id=\"lazy-initialization\">Lazy initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store/initialization#lazy-initialization\"><i class=\"material-icons\">link</i></a></h2>\n<p>In some cases, developers do not want selectors to return any state until there's meaningful data in the ComponentStore. The solution\nwould be to initialize the state lazily by calling <a href=\"guide/component-store/write#setstate-method\"><code>setState</code></a> and passing the full state to it. The same approach can be taken to reset the state.</p>\n<div class=\"alert is-important\">\n<p><strong>Note:</strong> Initialization has to be done before updating the state, otherwise an error would be thrown.</p>\n</div>\n<code-example header=\"movies-page.component.ts\">\n@Component({\n  template: `\n    &#x3C;li *ngFor=\"let movie of (movies$ | async)\">\n      {{ movie.name }}\n    &#x3C;/li>\n  `,\n  providers: [ComponentStore],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesPageComponent {\n  readonly movies$ = this.componentStore.state$.pipe(\n    map(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> => state.movies),\n  );\n\n  constructor(\n    private readonly componentStore: ComponentStore&#x3C;{movies: Movie[]}>\n  ) {}\n\n  ngOnInit() {\n    this.componentStore.setState({movies: []});\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/component-store\n-->\n<!-- links from this doc:\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/StoreDevtools#state\n - guide/component-store/initialization#initialization\n - guide/component-store/initialization#initialization-through-the-constructor\n - guide/component-store/initialization#lazy-initialization\n - guide/component-store/write#setstate-method\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/initialization.md?message=docs%3A%20describe%20your%20change...\n-->"
}