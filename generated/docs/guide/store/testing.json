{
  "id": "guide/store/testing",
  "title": "Testing",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n<h3 id=\"using-a-mock-store\">Using a Mock Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-a-mock-store\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>()</code> function registers providers that allow you to mock out the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> for testing functionality that has a dependency on <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> without setting up reducers.\nYou can write tests validating behaviors corresponding to the specific state snapshot easily.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> All dispatched actions don't affect the state, but you can see them in the <code><a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a></code> stream.</p>\n</div>\n<p>Usage:</p>\n<code-example header=\"auth.guard.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { TestBed } from '@angular/core/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>, <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a> } from '@ngrx/store/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { cold } from 'jasmine-marbles';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AuthGuard } from '../guards/auth.guard';\n\ndescribe('Auth Guard', () => {\n  let guard: AuthGuard;\n  let store: <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>;\n  const initialState = { loggedIn: false };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // any modules needed\n      ],\n      providers: [\n        AuthGuard,\n        <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>({ initialState }),\n        // other providers\n      ],\n    });\n\n    store = TestBed.inject(<a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>);\n    guard = TestBed.inject(AuthGuard);\n  });\n\n  it('should return false if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is not logged in', () => {\n    const expected = cold('(a|)', { a: false });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n\n  it('should return true if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is logged in', () => {\n    store.setState({ loggedIn: true });\n\n    const expected = cold('(a|)', { a: true });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n});\n</code-example>\n<h3 id=\"using-mock-selectors\">Using Mock Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-mock-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a></code> also provides the ability to mock individual selectors to return a passed value using the <code><a href=\"api/store/testing/MockStore#overrideSelector\" class=\"code-anchor\">overrideSelector()</a></code> method. When the selector is invoked by the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> method, the returned value is overridden by the passed value, regardless of the current state in the store.</p>\n<p><code><a href=\"api/store/testing/MockStore#overrideSelector\" class=\"code-anchor\">overrideSelector()</a></code> returns a <code><a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a></code>. To update the mock selector to return a different value, use the <code><a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a></code>'s <code>setResult()</code> method. Updating a selector's mock value will not cause it to emit automatically. To trigger an emission from all selectors, use the <code><a href=\"api/store/testing/MockStore#refreshState\" class=\"code-anchor\">MockStore.refreshState()</a></code> method after updating the desired selectors.</p>\n<p><code><a href=\"api/store/testing/MockStore#overrideSelector\" class=\"code-anchor\">overrideSelector()</a></code> supports mocking the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> method (used in RxJS pipe) and the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> instance method using a string or selector.</p>\n<p>Usage:</p>\n<code-example header=\"src/app/state/books.selectors.ts\" path=\"testing-store/src/app/state/books.selectors.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>, <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a> } from \"@ngrx/store\";\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AppState } from \"./app.state\";\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from \"../book-list/books.model\";\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectBooks = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: AppState) => state.books,\n  (books: Array&#x3C;Book>) => books\n);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCollectionState = <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>&#x3C;\n  AppState,\n  ReadonlyArray&#x3C;string>\n>(\"collection\");\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectBookCollection = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectBooks,\n  selectCollectionState,\n  (books: Array&#x3C;Book>, collection: Array&#x3C;string>) => {\n    return collection.map((<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) => books.find((book) => book.id === <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>));\n  }\n);\n\n\n</code-example>\n<code-example header=\"src/app/app.component.spec.ts (Using Mock Selectors) \" path=\"store-walkthrough/src/app/tests/app.component.1.spec.ts\" region=\"mockSelector\">\nmockBooksSelector.setResult([\n  {\n    <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'firstId',\n    volumeInfo: {\n      title: 'First Title',\n      authors: ['First Author'],\n    },\n  },\n  {\n    <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'secondId',\n    volumeInfo: {\n      title: 'Second Title',\n      authors: ['Second Author'],\n    },\n  },\n]);\n\nmockBookCollectionSelector.setResult([\n  {\n    <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'firstId',\n    volumeInfo: {\n      title: 'First Title',\n      authors: ['First Author'],\n    },\n  },\n]);\n\nstore.refreshState();\nfixture.detectChanges();\n\nexpect(\n  fixture.debugElement.queryAll(By.css('.book-list .book-item')).length\n).toBe(2);\n\nexpect(\n  fixture.debugElement.queryAll(By.css('.book-collection .book-item'))\n    .length\n).toBe(1);\n\n</code-example>\n<p>In this example based on the <a href=\"guide/store/walkthrough\">walkthrough</a>, we mock the <code>selectBooks</code> selector by using <code>overrideSelector</code>, passing in the <code>selectBooks</code> selector with a default mocked return value of an array of books. Similarly, we mock the <code>selectBookCollection</code> selector and pass the selector together with another array. In the test, we use <code>setResult()</code> to update the mock selectors to return new array values, then we use <code><a href=\"api/store/testing/MockStore#refreshState\" class=\"code-anchor\">MockStore.refreshState()</a></code> to trigger an emission from the <code>selectBooks</code> and <code>selectBookCollection</code> selectors.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> <code><a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a></code> will reset all of the mocked selectors after each test (in the <code>afterEach()</code> hook) by calling the <code><a href=\"api/store/testing/MockStore#resetSelectors\" class=\"code-anchor\">MockStore.resetSelectors()</a></code> method.</p>\n</div>\n<p>Try the <live-example name=\"testing-store\"></live-example>.</p>\n<h3 id=\"integration-testing\">Integration Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#integration-testing\"><i class=\"material-icons\">link</i></a></h3>\n<p>An integration test should verify that the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> coherently works together with our components and services that inject <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>. An integration test will not mock the store or individual selectors, as unit tests do, but will instead integrate a <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> by using <code>StoreModule.forRoot</code> in your <code>TestBed</code> configuration. Here is part of an integration test for the <code>AppComponent</code> introduced in the <a href=\"guide/store/walkthrough\">walkthrough</a>.</p>\n<code-example header=\"src/app/tests/integration.spec.ts (Integrate Store)\" path=\"store-walkthrough/src/app/tests/integration.spec.ts\" region=\"integrate\">\nTestBed.configureTestingModule({\n  declarations: [AppComponent, BookListComponent, BookCollectionComponent],\n  imports: [\n    HttpClientTestingModule,\n    StoreModule.forRoot({\n      books: booksReducer,\n      collection: collectionReducer,\n    }),\n  ],\n  providers: [GoogleBooksService],\n}).compileComponents();\n\nfixture = TestBed.createComponent(AppComponent);\ncomponent = fixture.debugElement.componentInstance;\n\nfixture.detectChanges();\n\n</code-example>\n<p>The integration test sets up the dependent <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> by importing the <code><a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a></code>. In this part of the example, we assert that clicking the <code>add</code> button dispatches the corresponding action and is correctly emitted by the <code>collection</code> selector.</p>\n<code-example header=\"src/app/tests/integration.spec.ts (addButton Test)\" path=\"store-walkthrough/src/app/tests/integration.spec.ts\" region=\"addTest\">\ndescribe('buttons should work as expected', () => {\n  it('should add to collection when add button is clicked and remove from collection when remove button is clicked', () => {\n    const addButton = getBookList()[1].query(\n      By.css('[data-test=add-button]')\n    );\n\n    click(addButton);\n    expect(getBookTitle(getCollection()[0])).toBe('Second Title');\n\n    const removeButton = getCollection()[0].query(\n      By.css('[data-test=remove-button]')\n    );\n    click(removeButton);\n\n    expect(getCollection().length).toBe(0);\n  });\n});\n\n//functions used in the above test\nfunction getCollection() {\n  return fixture.debugElement.queryAll(By.css('.book-collection .book-item'));\n}\n\nfunction getBookList() {\n  return fixture.debugElement.queryAll(By.css('.book-list .book-item'));\n}\n\nfunction getBookTitle(element) {\n  return element.query(By.css('p')).nativeElement.textContent;\n}\n\nfunction click(element) {\n  const el: HTMLElement = element.nativeElement;\n  el.click();\n  fixture.detectChanges();\n}\n\n</code-example>\n<h3 id=\"testing-selectors\">Testing selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can use the projector function used by the selector by accessing the <code>.projector</code> property. The following example tests the <code>books</code> selector from the <a href=\"guide/store/walkthrough\">walkthrough</a>.</p>\n<code-example header=\"src/app/state/books.selectors.spec.ts\" path=\"testing-store/src/app/state/books.selectors.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { selectBooks, selectBookCollection } from \"./books.selectors\";\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AppState } from \"./app.state\";\n\ndescribe(\"Selectors\", () => {\n  const initialState: AppState = {\n    books: [\n      {\n        <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: \"firstId\",\n        volumeInfo: {\n          title: \"First Title\",\n          authors: [\"First Author\"],\n        },\n      },\n      {\n        <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: \"secondId\",\n        volumeInfo: {\n          title: \"Second Title\",\n          authors: [\"Second Author\"],\n        },\n      },\n    ],\n    collection: [\"firstId\"],\n  };\n\n  it(\"should <a href=\"api/store/select\" class=\"code-anchor\">select</a> the book list\", () => {\n    const result = selectBooks.projector(initialState.books);\n    expect(result.length).toEqual(2);\n    expect(result[1].id).toEqual(\"secondId\");\n  });\n\n  it(\"should <a href=\"api/store/select\" class=\"code-anchor\">select</a> the book collection\", () => {\n    const result = selectBookCollection.projector(\n      initialState.books,\n      initialState.collection\n    );\n    expect(result.length).toEqual(1);\n    expect(result[0].id).toEqual(\"firstId\");\n  });\n});\n\n\n</code-example>\n<h3 id=\"testing-reducers\">Testing reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing-reducers\"><i class=\"material-icons\">link</i></a></h3>\n<p>The following example tests the <code>booksReducer</code> from the <a href=\"guide/store/walkthrough\">walkthrough</a>. In the first test we check that the state returns the same reference when the reducer is not supposed to handle the action (unknown action). The second test checks that <code>retrievedBookList</code> action updates the state and returns the new instance of it.</p>\n<code-example header=\"src/app/state/books.reducer.spec.ts\" path=\"testing-store/src/app/state/books.reducer.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromReducer from './books.reducer';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { retrievedBookList } from './books.actions';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from '../book-list/books.model';\n\ndescribe('BooksReducer', () => {\n  describe('unknown action', () => {\n    it('should return the default <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>', () => {\n      const { initialState } = fromReducer;\n      const action = {\n        type: 'Unknown',\n      };\n      const <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> = fromReducer.booksReducer(initialState, action);\n\n      expect(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>).toBe(initialState);\n    });\n  });\n\n  describe('retrievedBookList action', () => {\n    it('should retrieve all books and update the <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> in an immutable way', () => {\n      const { initialState } = fromReducer;\n      const newState: Array&#x3C;Book> = [\n        {\n          <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'firstId',\n          volumeInfo: {\n            title: 'First Title',\n            authors: ['First Author'],\n          },\n        },\n      ];\n      const action = retrievedBookList({ Book: newState });\n      const <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> = fromReducer.booksReducer(initialState, action);\n\n      expect(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>).toEqual(newState);\n      expect(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>).not.toBe(newState);\n    });\n  });\n});\n\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/UpdateResponseData#id\n - api/effects/Actions\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/MemoizedSelector\n - api/store/Store\n - api/store/StoreModule\n - api/store/createFeatureSelector\n - api/store/createSelector\n - api/store/select\n - api/store/testing/MockStore\n - api/store/testing/MockStore#overrideSelector\n - api/store/testing/MockStore#refreshState\n - api/store/testing/MockStore#resetSelectors\n - api/store/testing/provideMockStore\n - guide/store/testing#integration-testing\n - guide/store/testing#testing\n - guide/store/testing#testing-reducers\n - guide/store/testing#testing-selectors\n - guide/store/testing#using-a-mock-store\n - guide/store/testing#using-mock-selectors\n - guide/store/walkthrough\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\n-->"
}