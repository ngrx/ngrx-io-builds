{
  "id": "guide/store/testing",
  "title": "Testing",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n<h3 id=\"using-a-mock-store\">Using a Mock Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-a-mock-store\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>()</code> function registers providers that allow you to mock out the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> for testing functionality that has a dependency on <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> without setting up reducers.\nYou can write tests validating behaviors corresponding to the specific state snapshot easily.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> All dispatched actions don't affect the state, but you can see them in the <code><a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a></code> stream.</p>\n</div>\n<p>Usage:</p>\n<code-example header=\"auth.guard.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { TestBed } from '@angular/core/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>, <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a> } from '@ngrx/store/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { cold } from 'jasmine-marbles';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AuthGuard } from '../guards/auth.guard';\n\ndescribe('Auth Guard', () => {\n  let guard: AuthGuard;\n  let store: <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>;\n  const initialState = { loggedIn: false };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // any modules needed\n      ],\n      providers: [\n        AuthGuard,\n        <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>({ initialState }),\n        // other providers\n      ],\n    });\n\n    store = TestBed.inject(<a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>);\n    guard = TestBed.inject(AuthGuard);\n  });\n\n  it('should return false if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is not logged in', () => {\n    const expected = cold('(a|)', { a: false });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n\n  it('should return true if the user <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> is logged in', () => {\n    store.setState({ loggedIn: true });\n\n    const expected = cold('(a|)', { a: true });\n\n    expect(guard.canActivate()).toBeObservable(expected);\n  });\n});\n</code-example>\n<h3 id=\"using-mock-selectors\">Using Mock Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#using-mock-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p><code><a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a></code> also provides the ability to mock individual selectors to return a passed value using the <code><a href=\"api/store/testing/MockStore#overrideSelector\" class=\"code-anchor\">overrideSelector()</a></code> method. When the selector is invoked by the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> method, the returned value is overridden by the passed value, regardless of the current state in the store.</p>\n<p><code><a href=\"api/store/testing/MockStore#overrideSelector\" class=\"code-anchor\">overrideSelector()</a></code> returns a <code><a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a></code>. To update the mock selector to return a different value, use the <code><a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a></code>'s <code>setResult()</code> method. Updating a selector's mock value will not cause it to emit automatically. To trigger an emission from all selectors, use the <code><a href=\"api/store/testing/MockStore#refreshState\" class=\"code-anchor\">MockStore.refreshState()</a></code> method after updating the desired selectors.</p>\n<p><code><a href=\"api/store/testing/MockStore#overrideSelector\" class=\"code-anchor\">overrideSelector()</a></code> supports mocking the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> method (used in RxJS pipe) and the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> instance method using a string or selector.</p>\n<p>Usage:</p>\n<code-example header=\"user-greeting.component.ts\" path=\"testing-store/src/app/user-greeting.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/select\" class=\"code-anchor\">select</a>, <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromAuth from './reducers';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'user-greeting',\n  template: ` &#x3C;div>Greetings, {{ username$ | async }}!&#x3C;/div> `,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class UserGreetingComponent {\n  username$ = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromAuth.getUsername));\n\n  constructor(private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>&#x3C;fromAuth.State>) {}\n}\n\n\n</code-example>\n<code-example header=\"user-greeting.component.spec.ts\" path=\"testing-store/src/app/user-greeting.component.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ComponentFixture, TestBed } from '@angular/core/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { By } from '@angular/platform-browser';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>, <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a> } from '@ngrx/store/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { UserGreetingComponent } from './user-greeting.component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromAuth from './reducers';\n\ndescribe('User Greeting Component', () => {\n  let fixture: ComponentFixture&#x3C;UserGreetingComponent>;\n  let mockStore: <a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>;\n  let mockUsernameSelector: <a href=\"api/store/MemoizedSelector\" class=\"code-anchor\">MemoizedSelector</a>&#x3C;fromAuth.State, string>;\n  const queryDivText = () =>\n    fixture.debugElement.queryAll(By.css('div'))[0].nativeElement.textContent;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [<a href=\"api/store/testing/provideMockStore\" class=\"code-anchor\">provideMockStore</a>()],\n      declarations: [UserGreetingComponent],\n    });\n\n    fixture = TestBed.createComponent(UserGreetingComponent);\n    mockStore = TestBed.inject(<a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a>);\n    mockUsernameSelector = mockStore.overrideSelector(\n      fromAuth.getUsername,\n      'John'\n    );\n    fixture.detectChanges();\n  });\n\n  it('should greet John when the username is John', () => {\n    expect(queryDivText()).toBe('Greetings, John!');\n  });\n\n  it('should greet Brandon when the username is Brandon', () => {\n    mockUsernameSelector.setResult('Brandon');\n    mockStore.refreshState();\n    fixture.detectChanges();\n    expect(queryDivText()).toBe('Greetings, Brandon!');\n  });\n});\n\n\n</code-example>\n<p>In this example, we mock the <code>getUsername</code> selector by using <code>overrideSelector</code>, passing in the <code>getUsername</code> selector with a default mocked return value of <code>'John'</code>. In the second test, we use <code>setResult()</code> to update the mock selector to return <code>'Brandon'</code>, then we use <code><a href=\"api/store/testing/MockStore#refreshState\" class=\"code-anchor\">MockStore.refreshState()</a></code> to trigger an emission from the <code>getUsername</code> selector.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> <code><a href=\"api/store/testing/MockStore\" class=\"code-anchor\">MockStore</a></code> will reset all of the mocked selectors after each test (in the <code>afterEach()</code> hook) by calling the <code><a href=\"api/store/testing/MockStore#resetSelectors\" class=\"code-anchor\">MockStore.resetSelectors()</a></code> method.</p>\n</div>\n<p>Try the <live-example name=\"testing-store\"></live-example>.</p>\n<h3 id=\"integration-testing\">Integration Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#integration-testing\"><i class=\"material-icons\">link</i></a></h3>\n<p>An integration test should verify that the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> coherently works together with our components and services that inject <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code>. An integration test will not mock the store or individual selectors, as unit tests do, but will instead integrate a <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> by using <code>StoreModule.forRoot</code> in your <code>TestBed</code> configuration. Here is an example of an integration test for the <code>MyCounterComponent</code> introduced in the <a href=\"guide/store#tutorial\">getting started tutorial</a>.</p>\n<code-example header=\"src/app/tests/integration.spec.ts\" path=\"store/src/app/tests/integration.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { TestBed, async, ComponentFixture } from '@angular/core/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { By } from '@angular/platform-browser';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { MyCounterComponent } from '../my-counter/my-counter.component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { counterReducer } from '../counter.reducer';\n\ndescribe('MyCounterComponent', () => {\n  let component: MyCounterComponent;\n  let fixture: ComponentFixture&#x3C;MyCounterComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [MyCounterComponent],\n      imports: [StoreModule.forRoot({ count: counterReducer })],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(MyCounterComponent);\n    component = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should increment the counter <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> when increment is clicked', () => {\n    clickByCSS('#increment');\n\n    expect(getCounterText()).toBe('Current Count: 1');\n  });\n\n  it('should decrement the counter <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> when decrement is clicked', () => {\n    clickByCSS('#decrement');\n\n    expect(getCounterText()).toBe('Current Count: -1');\n  });\n\n  it('should reset the counter <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> when reset is clicked', () => {\n    clickByCSS('#increment');\n    clickByCSS('#reset');\n\n    expect(getCounterText()).toBe('Current Count: 0');\n  });\n\n  function clickByCSS(<a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: string) {\n    const debugElement = fixture.debugElement.query(By.css(<a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>));\n    const el: HTMLElement = debugElement.nativeElement;\n    el.click();\n    fixture.detectChanges();\n  }\n\n  function getCounterText() {\n    const compiled = fixture.debugElement.nativeElement;\n    return compiled.querySelector('div').textContent;\n  }\n});\n\n\n</code-example>\n<p>The integration test sets up the dependent <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> by importing the <code><a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a></code>. In this example, we assert that clicking a button dispatches an action that causes the state to be updated with an incremented, decremented, or reset counter value, which is correctly emitted by the selector.</p>\n<h3 id=\"testing-selectors\">Testing selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/testing#testing-selectors\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can use the projector function used by the selector by accessing the <code>.projector</code> property.</p>\n<code-example header=\"my.selectors.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  evenNums: number[];\n  oddNums: number[];\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectSumEvenNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.evenNums,\n  evenNums => evenNums.reduce((prev, curr) => prev + curr)\n);\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectSumOddNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.oddNums,\n  oddNums => oddNums.reduce((prev, curr) => prev + curr)\n);\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectTotal = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectSumEvenNums,\n  selectSumOddNums,\n  (evenSum, oddSum) => evenSum + oddSum\n);\n</code-example>\n<code-example header=\"my.selectors.spec.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromMyReducers from './my-reducers';\n\ndescribe('My Selectors', () => {\n  it('should calc selectTotal', () => {\n    expect(fromMyReducers.selectTotal.projector(2, 3)).toBe(5);\n  });\n});\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/effects/Actions\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/MemoizedSelector\n - api/store/State\n - api/store/Store\n - api/store/StoreModule\n - api/store/createSelector\n - api/store/select\n - api/store/testing/MockSelector#selector\n - api/store/testing/MockSelector#value\n - api/store/testing/MockStore\n - api/store/testing/MockStore#overrideSelector\n - api/store/testing/MockStore#refreshState\n - api/store/testing/MockStore#resetSelectors\n - api/store/testing/provideMockStore\n - guide/store#tutorial\n - guide/store/testing#integration-testing\n - guide/store/testing#testing\n - guide/store/testing#testing-selectors\n - guide/store/testing#using-a-mock-store\n - guide/store/testing#using-mock-selectors\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/testing.md?message=docs%3A%20describe%20your%20change...\n-->"
}