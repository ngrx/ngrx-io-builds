{
  "id": "guide/store/selectors",
  "title": "Selectors",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/selectors.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"selectors\">Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#selectors\"><i class=\"material-icons\">link</i></a></h1>\n<p>Selectors are pure functions used for obtaining slices of store state. @ngrx/store provides a few helper functions for optimizing this selection. Selectors provide many features when selecting slices of state:</p>\n<ul>\n<li>Portability</li>\n<li>Memoization</li>\n<li>Composition</li>\n<li>Testability</li>\n<li>Type Safety</li>\n</ul>\n<p>When using the <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code> and <code><a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a></code> functions @ngrx/store keeps track of the latest arguments in which your selector function was invoked. Because selectors are <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure functions</a>, the last result can be returned when the arguments match without reinvoking your selector function. This can provide performance benefits, particularly with selectors that perform expensive computation. This practice is known as <a href=\"https://en.wikipedia.org/wiki/Memoization\">memoization</a>.</p>\n<h3 id=\"using-a-selector-for-one-piece-of-state\">Using a selector for one piece of state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#using-a-selector-for-one-piece-of-state\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface FeatureState {\n  counter: number;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface AppState {\n  feature: FeatureState;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectFeature = (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: AppState) => state.feature;\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectFeatureCount = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectFeature,\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: FeatureState) => state.counter\n);\n</code-example>\n<h3 id=\"using-selectors-for-multiple-pieces-of-state\">Using selectors for multiple pieces of state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#using-selectors-for-multiple-pieces-of-state\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code> can be used to select some data from the state based on several slices of the same state.</p>\n<p>The <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code> function can take up to 8 selector functions for more complete state selections.</p>\n<p>For example, imagine you have a <code>selectedUser</code> object in the state. You also have an <code>allBooks</code> array of book objects.</p>\n<p>And you want to show all books for the current user.</p>\n<p>You can use <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code> to achieve just that. Your visible books will always be up to date even if you update them in <code>allBooks</code>. They will always show the books that belong to your user if there is one selected and will show all the books when there is no user selected.</p>\n<p>The result will be just some of your state filtered by another section of the state. And it will be always up to date.</p>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface User {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number;\n  name: string;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface Book {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number;\n  userId: number;\n  name: string;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface AppState {\n  selectedUser: User;\n  allBooks: Book[];\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectUser = (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: AppState) => state.selectedUser;\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectAllBooks = (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: AppState) => state.allBooks;\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectVisibleBooks = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectUser,\n  selectAllBooks,\n  (selectedUser: User, allBooks: Book[]) => {\n    if (selectedUser &#x26;&#x26; allBooks) {\n      return allBooks.filter((book: Book) => book.userId === selectedUser.id);\n    } else {\n      return allBooks;\n    }\n  }\n);\n</code-example>\n<h3 id=\"using-selectors-with-props\">Using selectors with props<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#using-selectors-with-props\"><i class=\"material-icons\">link</i></a></h3>\n<p>To select a piece of state based on data that isn't available in the store you can pass <code><a href=\"api/store/props\" class=\"code-anchor\">props</a></code> to the selector function. These <code><a href=\"api/store/props\" class=\"code-anchor\">props</a></code> gets passed through every selector and the projector function.\nTo do so we must specify these <code><a href=\"api/store/props\" class=\"code-anchor\">props</a></code> when we use the selector inside our component.</p>\n<p>For example if we have a counter and we want to multiply its value, we can add the multiply factor as a <code>prop</code>:</p>\n<p>The last argument of a selector or a projector is the <code><a href=\"api/store/props\" class=\"code-anchor\">props</a></code> argument, for our example it looks as follows:</p>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const getCount = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  getCounterValue,\n  (counter, <a href=\"api/store/props\" class=\"code-anchor\">props</a>) => counter * props.multiply\n);\n</code-example>\n<p>Inside the component we can define the <code><a href=\"api/store/props\" class=\"code-anchor\">props</a></code>:</p>\n<code-example header=\"app.component.ts\">\nngOnInit() {\n  this.counter = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromRoot.getCount, { multiply: 2 }))\n}\n</code-example>\n<p>Keep in mind that a selector only keeps the previous input arguments in its cache. If you reuse this selector with another multiply factor, the selector would always have to re-evaluate its value. This is because it's receiving both of the multiply factors (e.g. one time <code>2</code>, the other time <code>4</code>). In order to correctly memoize the selector, wrap the selector inside a factory function to create different instances of the selector.</p>\n<p>The following is an example of using multiple counters differentiated by <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code>.</p>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const getCount = () =>\n  <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n    (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, <a href=\"api/store/props\" class=\"code-anchor\">props</a>) => state.counter[props.id],\n    (counter, <a href=\"api/store/props\" class=\"code-anchor\">props</a>) => counter * props.multiply\n  );\n</code-example>\n<p>The component's selectors are now calling the factory function to create different selector instances:</p>\n<code-example header=\"app.component.ts\">\nngOnInit() {\n  this.counter2 = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromRoot.getCount(), { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'counter2', multiply: 2 }));\n  this.counter4 = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromRoot.getCount(), { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'counter4', multiply: 4 }));\n  this.counter6 = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(fromRoot.getCount(), { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 'counter6', multiply: 6 }));\n}\n</code-example>\n<h2 id=\"selecting-feature-states\">Selecting Feature States<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#selecting-feature-states\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a></code> is a convenience method for returning a top level feature state. It returns a typed selector function for a feature slice of state.</p>\n<h3 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#example\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>, <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const featureKey = 'feature';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface FeatureState {\n  counter: number;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface AppState {\n  feature: FeatureState;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectFeature = <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>&#x3C;AppState, FeatureState>(featureKey);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectFeatureCount = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectFeature,\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: FeatureState) => state.counter\n);\n</code-example>\n<p>The following selector below would not compile because <code>fooFeatureKey</code> (<code>'foo'</code>) is not a feature slice of <code>AppState</code>.</p>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectFeature = <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>&#x3C;AppState, FeatureState>(fooFeatureKey);\n</code-example>\n<h2 id=\"resetting-memoized-selectors\">Resetting Memoized Selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#resetting-memoized-selectors\"><i class=\"material-icons\">link</i></a></h2>\n<p>The selector function returned by calling <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code> or <code><a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a></code> initially has a memoized value of <code>null</code>. After a selector is invoked the first time its memoized value is stored in memory. If the selector is subsequently invoked with the same arguments it will return the memoized value. If the selector is then invoked with different arguments it will recompute and update its memoized value. Consider the following:</p>\n<code-example header=\"example.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  counter1: number;\n  counter2: number;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCounter1 = (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.counter1;\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCounter2 = (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.counter2;\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectTotal = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectCounter1,\n  selectCounter2,\n  (counter1, counter2) => counter1 + counter2\n); // selectTotal has a memoized <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of null, because it has not yet been invoked.\n\nlet <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> = { counter1: 3, counter2: 4 };\n\nselectTotal(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>); // computes the sum of 3 &#x26; 4, returning 7. selectTotal now has a memoized <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of 7\nselectTotal(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>); // does not compute the sum of 3 &#x26; 4. selectTotal instead returns the memoized <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of 7\n\n<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> = { ...state, counter2: 5 };\n\nselectTotal(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>); // computes the sum of 3 &#x26; 5, returning 8. selectTotal now has a memoized <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of 8\n</code-example>\n<p>A selector's memoized value stays in memory indefinitely. If the memoized value is, for example, a large dataset that is no longer needed it's possible to reset the memoized value to null so that the large dataset can be removed from memory. This can be accomplished by invoking the <code>release</code> method on the selector.</p>\n<code-example header=\"example.ts\">\nselectTotal(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>); // returns the memoized <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of 8\nselectTotal.release(); // memoized <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of selectTotal is now null\n</code-example>\n<p>Releasing a selector also recursively releases any ancestor selectors. Consider the following:</p>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  evenNums: number[];\n  oddNums: number[];\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectSumEvenNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.evenNums,\n  evenNums => evenNums.reduce((prev, curr) => prev + curr)\n);\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectSumOddNums = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.oddNums,\n  oddNums => oddNums.reduce((prev, curr) => prev + curr)\n);\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectTotal = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectSumEvenNums,\n  selectSumOddNums,\n  (evenSum, oddSum) => evenSum + oddSum\n);\n\nselectTotal({\n  evenNums: [2, 4],\n  oddNums: [1, 3],\n});\n\n/**\n * Memoized Values before calling selectTotal.release()\n *   selectSumEvenNums  6\n *   selectSumOddNums   4\n *   selectTotal        10\n */\n\nselectTotal.release();\n\n/**\n * Memoized Values after calling selectTotal.release()\n *   selectSumEvenNums  null\n *   selectSumOddNums   null\n *   selectTotal        null\n */\n</code-example>\n<h2 id=\"using-store-without-type-generic\">Using Store Without Type Generic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#using-store-without-type-generic\"><i class=\"material-icons\">link</i></a></h2>\n<p>When injecting <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> into components and other injectables, it is possible to omit the generic type. If injected without the generic, the default generic is applied as follows <code><a href=\"api/store/Store\" class=\"code-anchor\">Store&#x3C;T = object></a></code>.</p>\n<p>The most common way to select information from the store is to use a selector function defined with <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code>. When doing so, TypeScript is able to automatically infer types from the selector function, therefore reducing the need to define the type in the store generic.</p>\n<div class=\"alert is-important\">\nIt is important to continue to provide a Store type generic if you are using the string version of selectors as types cannot be inferred automatically in those instances.\n</div>\n<p>The follow example demonstrates the use of Store without providing a generic:</p>\n<code-example header=\"app.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppComponent {\n  counter$ = this.store.select(fromCounter.selectCounter);\n\n  constructor(private readonly store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>) {}\n}\n</code-example>\n<h2 id=\"advanced-usage\">Advanced Usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#advanced-usage\"><i class=\"material-icons\">link</i></a></h2>\n<p>Selectors empower you to compose a <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs#solution\">read model for your application state</a>.\nIn terms of the CQRS architectural pattern, NgRx separates the read model (selectors) from the write model (reducers).\nAn advanced technique is to combine selectors with <a href=\"https://rxjs.dev/guide/v6/pipeable-operators\">RxJS pipeable operators</a>.</p>\n<p>This section covers some basics of how selectors compare to pipeable operators and demonstrates how <code><a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a></code> and <code>scan</code> are utilized to display a history of state transitions.</p>\n<h3 id=\"breaking-down-the-basics\">Breaking Down the Basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#breaking-down-the-basics\"><i class=\"material-icons\">link</i></a></h3>\n<h4 id=\"select-a-non-empty-state-using-pipeable-operators\">Select a non-empty state using pipeable operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#select-a-non-empty-state-using-pipeable-operators\"><i class=\"material-icons\">link</i></a></h4>\n<p>Let's pretend we have a selector called <code>selectValues</code> and the component for displaying the data is only interested in defined values, i.e., it should not display empty states.</p>\n<p>We can achieve this behaviour by using only RxJS pipeable operators:</p>\n<code-example header=\"app.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a> } from 'rxjs/operators';\n\nstore\n  .pipe(\n    map(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> => selectValues(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>)),\n    <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>(val => val !== undefined)\n  )\n  .subscribe(/* .. */);\n</code-example>\n<p>The above can be further rewritten to use the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a>()</code> utility function from NgRx:</p>\n<code-example header=\"app.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a> } from 'rxjs/operators';\n\nstore\n  .pipe(\n    <a href=\"api/store/select\" class=\"code-anchor\">select</a>(selectValues),\n    <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>(val => val !== undefined)\n  )\n  .subscribe(/* .. */);\n</code-example>\n<h4 id=\"solution-extracting-a-pipeable-operator\">Solution: Extracting a pipeable operator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#solution-extracting-a-pipeable-operator\"><i class=\"material-icons\">link</i></a></h4>\n<p>To make the <code><a href=\"api/store/select\" class=\"code-anchor\">select</a>()</code> and <code><a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>()</code> behaviour a reusable piece of code, we extract a <a href=\"https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md\">pipeable operator</a> using the RxJS <code>pipe()</code> utility function:</p>\n<code-example header=\"app.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { pipe } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a> } from 'rxjs/operators';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectFilteredValues = pipe(\n  <a href=\"api/store/select\" class=\"code-anchor\">select</a>(selectValues),\n  <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>(val => val !== undefined)\n);\n\nstore.pipe(selectFilteredValues).subscribe(/* .. */);\n</code-example>\n<h3 id=\"advanced-example-select-the-last-n-state-transitions\">Advanced Example: Select the last {n} state transitions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/selectors#advanced-example-select-the-last-n-state-transitions\"><i class=\"material-icons\">link</i></a></h3>\n<p>Let's examine the technique of combining NgRx selectors and RxJS operators in an advanced example.</p>\n<p>In this example, we will write a selector function that projects values from two different slices of the application state.\nThe projected state will emit a value when both slices of state have a value.\nOtherwise, the selector will emit an <code>undefined</code> value.</p>\n<code-example header=\"index.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectProjectedValues = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectFoo,\n  selectBar,\n  (foo, bar) => {\n    if (foo &#x26;&#x26; bar) {\n      return { foo, bar };\n    }\n\n    return undefined;\n  }\n);\n</code-example>\n<p>Then, the component should visualize the history of state transitions.\nWe are not only interested in the current state but rather like to display the last <code>n</code> pieces of state.\nMeaning that we will map a stream of state values (<code>1</code>, <code>2</code>, <code>3</code>) to an array of state values (<code>[1, 2, 3]</code>).</p>\n<code-example header=\"select-last-state-transition.ts\">\n// The number of <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> transitions is given by the user (subscriber)\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectLastStateTransitions = (count: number) => {\n\n  return pipe(\n    // Thanks to `<a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>` the operator will have memoization \"for free\"\n    <a href=\"api/store/select\" class=\"code-anchor\">select</a>(selectProjectedValues),\n    // Combines the last `count` <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> values in array\n    scan((acc, curr) => {\n      return [ curr, ...acc ].filter((val, index) => index &#x3C; count &#x26;&#x26; val !== undefined)\n    }, [] as {foo: number; bar: string}[]) // XX: Explicit type hint for the array.\n                                          // Equivalent to what is emitted by the <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>\n  );\n}\n</code-example>\n<p>Finally, the component will subscribe to the store, telling the number of state transitions it wishes to display:</p>\n<code-example header=\"app.component.ts\">\n// Subscribe to the store using the custom pipeable operator\nstore.pipe(selectLastStateTransitions(3)).subscribe(/* .. */);\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/store\n-->\n<!-- links from this doc:\n - api/data/EntityCollection#filter\n - api/data/UpdateResponseData#id\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/State\n - api/store/Store\n - api/store/createFeatureSelector\n - api/store/createSelector\n - api/store/props\n - api/store/select\n - api/store/testing/MockSelector#selector\n - api/store/testing/MockSelector#value\n - guide/store/selectors#advanced-example-select-the-last-n-state-transitions\n - guide/store/selectors#advanced-usage\n - guide/store/selectors#breaking-down-the-basics\n - guide/store/selectors#example\n - guide/store/selectors#resetting-memoized-selectors\n - guide/store/selectors#select-a-non-empty-state-using-pipeable-operators\n - guide/store/selectors#selecting-feature-states\n - guide/store/selectors#selectors\n - guide/store/selectors#solution-extracting-a-pipeable-operator\n - guide/store/selectors#using-a-selector-for-one-piece-of-state\n - guide/store/selectors#using-selectors-for-multiple-pieces-of-state\n - guide/store/selectors#using-selectors-with-props\n - guide/store/selectors#using-store-without-type-generic\n - https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs#solution\n - https://en.wikipedia.org/wiki/Memoization\n - https://en.wikipedia.org/wiki/Pure_function\n - https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/selectors.md?message=docs%3A%20describe%20your%20change...\n - https://rxjs.dev/guide/v6/pipeable-operators\n-->"
}