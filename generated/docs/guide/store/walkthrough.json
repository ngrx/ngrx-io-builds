{
  "id": "guide/store/walkthrough",
  "title": "Walkthrough",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/walkthrough.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"walkthrough\">Walkthrough<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/walkthrough#walkthrough\"><i class=\"material-icons\">link</i></a></h1>\n<p>The following example more extensively utilizes the key concepts of store to manage the state of book list, and how the user can add a book to and remove it from their collection within an Angular component. Try the <live-example name=\"store-walkthrough\" nodownload=\"\"></live-example>.</p>\n<h2 id=\"tutorial\">Tutorial<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/store/walkthrough#tutorial\"><i class=\"material-icons\">link</i></a></h2>\n<ol>\n<li>\n<p>Generate a new project using StackBlitz <live-example name=\"ngrx-start\" nodownload=\"\"></live-example>.</p>\n</li>\n<li>\n<p>Right click on the <code>app</code> folder in StackBlitz. Create a state management folder <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code>, and within the new folder, name a new file <code>books.actions.ts</code> to describe the book actions. Book actions include the book list retrieval, and the add and remove book actions.</p>\n</li>\n</ol>\n<code-example header=\"src/app/state/books.actions.ts\" path=\"store-walkthrough/src/app/state/books.actions.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>, <a href=\"api/store/props\" class=\"code-anchor\">props</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const addBook = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>(\n  '[Book List] <a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">Add</a> Book',\n  <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ bookId }>()\n);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const removeBook = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>(\n  '[Book Collection] Remove Book',\n  <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ bookId }>()\n);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const retrievedBookList = <a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a>(\n  '[Book List/API] Retrieve Books Success',\n  <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ Book }>()\n);\n\n\n</code-example>\n<ol start=\"3\">\n<li>Right click on the <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code> folder and create a new file labeled <code>books.reducer.ts</code>. Within this file, define a reducer function to handle the retrieval of the book list from the state and consequently, update the state.</li>\n</ol>\n<code-example header=\"src/app/state/books.reducer.ts\" path=\"store-walkthrough/src/app/state/books.reducer.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>, <a href=\"api/store/on\" class=\"code-anchor\">on</a>, <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { retrievedBookList } from './books.actions';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from '../book-list/books.model';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState: ReadonlyArray&#x3C;Book> = [];\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const booksReducer = <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>(\n  initialState,\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(retrievedBookList, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, { Book }) => [...Book])\n);\n\n\n</code-example>\n<ol start=\"4\">\n<li>Create another file named <code>collection.reducer.ts</code> in the <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code> folder to handle actions that alter the user's book collection. Define a reducer function that handles the add action by appending the book's ID to the collection, including a condition to avoid duplicate book IDs. Define the same reducer to handle the remove action by filtering the collection array with the book ID.</li>\n</ol>\n<code-example header=\"src/app/state/collection.reducer.ts\" path=\"store-walkthrough/src/app/state/collection.reducer.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>, <a href=\"api/store/on\" class=\"code-anchor\">on</a>, <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { addBook, removeBook } from './books.actions';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState: ReadonlyArray&#x3C;string> = [];\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const collectionReducer = <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>(\n  initialState,\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(removeBook, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, { bookId }) => state.filter((<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) => <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a> !== bookId)),\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(addBook, (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, { bookId }) => {\n    if (state.indexOf(bookId) > -1) return <a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>;\n\n    return [...state, bookId];\n  })\n);\n\n\n</code-example>\n<ol start=\"5\">\n<li>Import the <code><a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a></code> from <code>@ngrx/store</code> and the <code>books.reducer</code> and <code>collection.reducer</code> file.</li>\n</ol>\n<code-example header=\"src/app/app.module.ts (imports)\" path=\"store-walkthrough/src/app/app.module.ts\" region=\"imports\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { booksReducer } from './<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>/books.reducer';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { collectionReducer } from './<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>/collection.reducer';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n\n</code-example>\n<ol start=\"6\">\n<li>Add the <code>StoreModule.forRoot</code> function in the <code>imports</code> array of your <code>AppModule</code> with an object containing the <code>books</code> and <code>booksReducer</code>, as well as the <code>collection</code> and <code>collectionReducer</code> that manage the state of the book list and the collection. The <code><a href=\"api/store/StoreModule#forRoot\" class=\"code-anchor\">StoreModule.forRoot()</a></code> method registers the global providers needed to access the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> throughout your application.</li>\n</ol>\n<code-example header=\"src/app/app.module.ts (StoreModule)\" path=\"store-walkthrough/src/app/app.module.1.ts\">\n@NgModule({\n    imports: [\n      BrowserModule,\n      StoreModule.forRoot({ books: booksReducer, collection: collectionReducer }),\n      HttpClientModule,\n    ],\n    declarations: [AppComponent],\n    bootstrap: [AppComponent],\n  })\n  <a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n\n</code-example>\n<ol start=\"7\">\n<li>Create a new file in <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code> named <code>app.state.ts</code>. Define the state as a list of books and a list of collection books' IDs. </li>\n</ol>\n<code-example header=\"src/app/state/app.state.ts\" path=\"store-walkthrough/src/app/state/app.state.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from '../book-list/books.model';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface AppState {\n  books: ReadonlyArray&#x3C;Book>;\n  collection: ReadonlyArray&#x3C;string>;\n}\n\n\n</code-example>\n<ol start=\"8\">\n<li>Create the book list and collection selectors to ensure we get the correct information from the store. As you can see, the <code>selectBookCollection</code>  selector combines two other selectors in order to build its return value.</li>\n</ol>\n<code-example header=\"src/app/state/books.selectors.ts\" path=\"store-walkthrough/src/app/state/books.selectors.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>, <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a> } from \"@ngrx/store\";\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AppState } from \"./app.state\";\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from \"../book-list/books.model\";\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectBooks = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: AppState) => state.books,\n  (books: Array&#x3C;Book>) => books\n);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCollectionState = <a href=\"api/store/createFeatureSelector\" class=\"code-anchor\">createFeatureSelector</a>&#x3C;\n  AppState,\n  ReadonlyArray&#x3C;string>\n>(\"collection\");\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectBookCollection = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectBooks,\n  selectCollectionState,\n  (books: Array&#x3C;Book>, collection: Array&#x3C;string>) => {\n    return collection.map((<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) => books.find((book) => book.id === <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>));\n  }\n);\n\n\n</code-example>\n<ol start=\"9\">\n<li>Create a folder named <code>book-list</code>, which we will be using soon to hold our book list component. For now, let's start with adding a file named <code>books.model.ts</code> to reference different aspects of a book in the book list.</li>\n</ol>\n<code-example header=\"src/app/book-list/books.model.ts\" path=\"store-walkthrough/src/app/book-list/books.model.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface Book {\n    <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: string;\n    volumeInfo: {\n      title: string;\n      authors: Array&#x3C;string>;\n    };\n}\n\n</code-example>\n<ol start=\"10\">\n<li>In the same folder, we will have a service that fetches the data needed for the book list from an API. Create a file in the <code>book-list</code> folder named <code>books.service.ts</code>, which will call the Google Books API and return a list of books.</li>\n</ol>\n<code-example header=\"src/app/book-list/books.service.ts\" path=\"store-walkthrough/src/app/book-list/books.service.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { HttpClient } from '@angular/common/http';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { of, Observable } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map } from 'rxjs/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './books.model';\n\n@Injectable({ providedIn: 'root' })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class GoogleBooksService {\n  constructor(private http: HttpClient) {}\n\n  getBooks(): Observable&#x3C;Array&#x3C;Book>> {\n    return this.http\n      .get&#x3C;{ items: Book[] }>(\n        'https://www.googleapis.com/books/v1/volumes?maxResults=5&#x26;orderBy=relevance&#x26;q=oliver%20sacks'\n      )\n      .pipe(map((books) => books.items || []));\n  }\n}\n\n\n</code-example>\n<ol start=\"11\">\n<li>In the <code>book-list</code> folder, create the <code>BookListComponent</code> with the following template. Update the <code>BookListComponent</code> class to dispatch the <code>add</code> event.</li>\n</ol>\n<code-example header=\"src/app/book-list/book-list.component.html\" path=\"store-walkthrough/src/app/book-list/book-list.component.html\">\n&#x3C;div\n  class=\"book-item\"\n  *ngFor=\"let book of books\"\n>\n  &#x3C;p>{{book.volumeInfo.title}}&#x3C;/p>&#x3C;span> by {{book.volumeInfo.authors}}&#x3C;/span>\n  &#x3C;button\n    (click)=\"add.emit(book.id)\"\n    data-test=\"add-button\"\n  ><a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">Add</a> to Collection&#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<code-example header=\"src/app/book-list/book-list.component.ts\" path=\"store-walkthrough/src/app/book-list/book-list.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, EventEmitter, Input, Output } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './books.model';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.css'],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BookListComponent {\n  @Input() books: Array&#x3C;Book>;\n  @Output() add = new EventEmitter();\n}\n\n\n</code-example>\n<ol start=\"12\">\n<li>Create a new <em>Component</em> named <code>book-collection</code> in the <code>app</code> folder. Update the <code>BookCollectionComponent</code> template and class.</li>\n</ol>\n<code-example header=\"src/app/book-collection/book-collection.component.html\" path=\"store-walkthrough/src/app/book-collection/book-collection.component.html\">\n&#x3C;div \n  class=\"book-item\"\n  *ngFor=\"let book of books\"\n>\n  &#x3C;p>{{book.volumeInfo.title}}&#x3C;/p>&#x3C;span> by {{book.volumeInfo.authors}}&#x3C;/span>\n  &#x3C;button\n    (click)=\"remove.emit(book.id)\"\n    data-test=\"remove-button\"\n  >Remove from Collection&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<code-example header=\"src/app/book-collection/book-collection.component.ts\" path=\"store-walkthrough/src/app/book-collection/book-collection.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, EventEmitter, Input, Output } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from '../book-list/books.model';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-book-collection',\n  templateUrl: './book-collection.component.html',\n  styleUrls: ['./book-collection.component.css'],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BookCollectionComponent {\n  @Input() books: Array&#x3C;Book>;\n  @Output() remove = new EventEmitter();\n}\n\n\n</code-example>\n<ol start=\"13\">\n<li>Add <code>BookListComponents</code> and <code>BookCollectionComponent</code> to your <code>AppComponent</code> template, and to your declarations in <code>app.module.ts</code> as well. </li>\n</ol>\n<code-example header=\"src/app/app.component.html (Components)\" path=\"store-walkthrough/src/app/app.component.html\" region=\"components\">\n&#x3C;h2>Books&#x3C;/h2>\n&#x3C;app-book-list class=\"book-list\" [books]=\"books$ | async\" (add)=\"onAdd($event)\">&#x3C;/app-book-list>\n\n&#x3C;h2>My Collection&#x3C;/h2>\n&#x3C;app-book-collection class=\"book-collection\" [books]=\"bookCollection$ | async\" (remove)=\"onRemove($event)\">\n&#x3C;/app-book-collection>\n\n</code-example>\n<code-example header=\"src/app/app.module.ts\" path=\"store-walkthrough/src/app/app.module.ts\" region=\"declareComponents\">\n@NgModule({\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ books: booksReducer, collection: collectionReducer }),\n    HttpClientModule,\n  ],\n  declarations: [AppComponent, BookListComponent, BookCollectionComponent],\n  bootstrap: [AppComponent],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n\n</code-example>\n<ol start=\"14\">\n<li>In the <code>AppComponent</code> class, add the selectors and corresponding actions to dispatch on <code>add</code> or <code>remove</code> method calls. Then subscribe to the Google Books API in order to update the state. (This should probably be handled by NgRx Effects, which you can read about <a href=\"guide/effects\">here</a>. For the sake of this demo, NgRx Effects is not being included).</li>\n</ol>\n<code-example header=\"src/app/app.component.ts\" path=\"store-walkthrough/src/app/app.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>, <a href=\"api/store/select\" class=\"code-anchor\">select</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { selectBookCollection, selectBooks } from './<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>/books.selectors';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  retrievedBookList,\n  addBook,\n  removeBook,\n} from './<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>/books.actions';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { GoogleBooksService } from './book-list/books.service';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-root',\n  templateUrl: './app.component.html',\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppComponent {\n  books$ = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(selectBooks));\n  bookCollection$ = this.store.pipe(<a href=\"api/store/select\" class=\"code-anchor\">select</a>(selectBookCollection));\n\n  onAdd(bookId) {\n    this.store.dispatch(addBook({ bookId }));\n  }\n\n  onRemove(bookId) {\n    this.store.dispatch(removeBook({ bookId }));\n  }\n\n  constructor(\n    private booksService: GoogleBooksService,\n    private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a>\n  ) {}\n\n  ngOnInit() {\n    this.booksService\n      .getBooks()\n      .subscribe((Book) => this.store.dispatch(retrievedBookList({ Book })));\n  }\n}\n\n\n</code-example>\n<p>And that's it! Click the add and remove buttons to change the state.</p>\n<p>Let's cover what you did:</p>\n<ul>\n<li>Defined actions to express events.</li>\n<li>Defined two reducer functions to manage different parts of the state.</li>\n<li>Registered the global state container that is available throughout your application.</li>\n<li>Defined the state, as well as selectors that retrieve specific parts of the state.</li>\n<li>Created two distinct components, as well as a service that fetches from the Google Books API. </li>\n<li>Injected the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> and Google Books API services to dispatch actions and select the current state.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/store/testing\n-->\n<!-- links from this doc:\n - api/data/ChangeSetOperation#Add\n - api/data/UpdateResponseData#id\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/Action\n - api/store/Store\n - api/store/StoreModule\n - api/store/StoreModule#forRoot\n - api/store/createAction\n - api/store/createFeatureSelector\n - api/store/createReducer\n - api/store/createSelector\n - api/store/on\n - api/store/props\n - api/store/select\n - api/store/testing/MockSelector#selector\n - guide/effects\n - guide/store/walkthrough#tutorial\n - guide/store/walkthrough#walkthrough\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/store/walkthrough.md?message=docs%3A%20describe%20your%20change...\n-->"
}