{
  "id": "guide/data/entity-metadata",
  "title": "Entity Metadata",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-metadata.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entity-metadata\">Entity Metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#entity-metadata\"><i class=\"material-icons\">link</i></a></h1>\n<p>The NgRx Data library maintains a <strong><em>cache</em></strong> of entity collection data in the <em>NgRx store</em>.</p>\n<p>You tell the NgRx Data library about those collections and the entities they contain with <strong><em>entity metadata</em></strong>.</p>\n<p>The entities within a collection belong to the same <strong><em>entity type</em></strong>.\nEach <em>entity type</em> appears as named instance of the NgRx Data <a href=\"guide/data/entity-metadata#metadata-properties\"><strong><code>EntityMetadata&#x3C;T></code></strong></a> interface.</p>\n<p>You can specify metadata for several entities at the same time in an <strong><code><a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a></code></strong>.</p>\n<p>Here is an example <code><a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a></code> similar to the one in the demo app\nthat defines metadata for two entities, <code>Hero</code> and <code>Villain</code>.</p>\n<code-example header=\"app-entity-metadata.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const appEntityMetadata: <a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a> = {\n  Hero: {\n    /* optional settings */\n    <a href=\"api/data/EntityMetadata#filterFn\" class=\"code-anchor\">filterFn</a>: nameFilter,\n    sortComparer: sortByName\n  },\n  Villain: {\n    villainSelectId, // necessary if key is not `<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>`\n\n    /* optional settings */\n    entityName: 'Villain', // optional because same as map key\n    <a href=\"api/data/EntityMetadata#filterFn\" class=\"code-anchor\">filterFn</a>: nameAndSayingFilter,\n    entityDispatcherOptions: { <a href=\"api/data/EntityDispatcherDefaultOptions#optimisticAdd\" class=\"code-anchor\">optimisticAdd</a>: true, <a href=\"api/data/EntityDispatcherDefaultOptions#optimisticUpdate\" class=\"code-anchor\">optimisticUpdate</a>: true }\n  }\n};\n</code-example>\n<h2 id=\"register-metadata\">Register metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#register-metadata\"><i class=\"material-icons\">link</i></a></h2>\n<p>You must register the metadata with the NgRx Data <code><a href=\"api/data/EntityDefinitionService\" class=\"code-anchor\">EntityDefinitionService</a></code>.</p>\n<p>The easiest way to register metadata is to define a single <code><a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a></code> for the entire application and specify it in the one place where you initialize the NgRx Data library:</p>\n<code-example language=\"typescript\">\n    EntityDataModule.forRoot({\n      ...\n      <a href=\"api/data/EntityDataModuleConfig#entityMetadata\" class=\"code-anchor\">entityMetadata</a>: appEntityMetadata,\n      ...\n    })\n</code-example>\n<p>If you define entities in several, different <em>eagerly-loaded</em> Angular modules, you can add the metadata for each module with the multi-provider.</p>\n<code-example language=\"typescript\">\n{ provide: <a href=\"api/data/ENTITY_METADATA_TOKEN\" class=\"code-anchor\">ENTITY_METADATA_TOKEN</a>, multi: true, useValue: someEntityMetadata }\n</code-example>\n<p>This technique won't work for a <em>lazy-loaded</em> module.\nThe <code><a href=\"api/data/ENTITY_METADATA_TOKEN\" class=\"code-anchor\">ENTITY_METADATA_TOKEN</a></code> provider was already set and consumed by the time the <em>lazy-loaded</em> module arrives.</p>\n<p>The module should inject the <code><a href=\"api/data/EntityDefinitionService\" class=\"code-anchor\">EntityDefinitionService</a></code>\ninstead and register metadata directly with one of the registration methods.</p>\n<code-example language=\"typescript\">\n@NgModule({...})\nclass LazyModule {\n  constructor(eds: <a href=\"api/data/EntityDefinitionService\" class=\"code-anchor\">EntityDefinitionService</a>) {\n    eds.registerMetadataMap(this.lazyMetadataMap);\n  }\n  ...\n}\n</code-example>\n<h2 id=\"metadata-properties\">Metadata Properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#metadata-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/data/EntityMetadata\" class=\"code-anchor\">EntityMetadata</a>&#x3C;T></code> interface describes aspects of an entity type that tell the NgRx Data library how to manage collections of entity data of type <code>T</code>.</p>\n<p>Type <code>T</code> is your application's TypeScript representation of that entity; it can be an interface or a class.</p>\n<h3 id=\"entityname\"><em>entityName</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#entityname\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>entityName</code> of the type is the only <strong>required metadata property</strong>.\nIt's the unique <em>key</em> of the entity type's metadata in cache.</p>\n<p>It <em>must</em> be specified for individual <code><a href=\"api/data/EntityMetadata\" class=\"code-anchor\">EntityMetadata</a></code> instances.\nIf you omit it in an <code><a href=\"api/data/EntityMetadataMap\" class=\"code-anchor\">EntityMetadataMap</a></code>, the map <em>key</em> becomes the <code>entityName</code> as in this example.</p>\n<code-example language=\"typescript\">\nconst map = {\n  Hero: {} // \"Hero\" becomes the entityName\n};\n</code-example>\n<p>The spelling and case (typically PascalCase) of the <code>entityName</code> is important for NgRx Data conventions. It appears in the generated <a href=\"guide/data/entity-actions\"><em>entity actions</em></a>, in error messages, and in the persistence operations.</p>\n<p>Importantly, the default <a href=\"guide/data/entity-dataservice\"><em>entity dataservice</em></a> creates HTTP resource URLs from the lowercase version of this name. For example, if the <code>entityName</code> is \"Hero\", the default data service will POST to a URL such as <code>'api/hero'</code>.</p>\n<div class=\"alert is-helpful\">\n<p>By default it generates the <em>plural</em> of the entity name when preparing a <em>collection</em> resource URL.</p>\n<p>It isn't good at pluralization.\nIt would produce <code>'api/heros'</code> for the URL to fetch <em>all heroes</em> because it blindly adds an <code>'s'</code> to the end of the lowercase entity name.</p>\n<p>Of course the proper plural of \"hero\" is \"hero<strong>es</strong>\", not \"hero<strong>s</strong>\".\nYou'll see how to correct this problem <a href=\"guide/data/entity-metadata#plurals\">below</a>.</p>\n</div>\n<h3 id=\"filterfn\"><em>filterFn</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#filterfn\"><i class=\"material-icons\">link</i></a></h3>\n<p>Many applications allow the user to filter a cached entity collection.</p>\n<p>In the accompanying demonstration app, the user can filter <em>heroes</em> by name and can filter <em>villains</em> by name or the villain's <em>saying</em>.</p>\n<p>We felt this common scenario is worth building into the NgRx Data library. So every entity can have an <em>optional</em> filter function.</p>\n<p>Each collection's <code>filteredEntities</code> selector applies the filter function to the collection, based on the user's filtering criteria, which are held in the stored entity collection's <code><a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a></code> property.</p>\n<p>If there is no filter function, the <code>filteredEntities</code> selector is the same as the <code>selectAll</code> selector, which returns all entities in the collection.</p>\n<p>A filter function (see <code><a href=\"api/data/EntityFilterFn\" class=\"code-anchor\">EntityFilterFn</a></code>) takes an entity collection and the user's filtering criteria (the filter <em>pattern</em>) and returns an array of the selected entities.</p>\n<p>Here's an example that filters for entities with a <code>name</code> property whose value contains the search string.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> function nameFilter(entities: { name: string }[], search: string) {\n  return entities.filter(e => -1 &#x3C; e.name.indexOf(search));\n}\n</code-example>\n<p>The NgRx Data library includes a helper function, <code><a href=\"api/data/PropsFilterFnFactory\" class=\"code-anchor\">PropsFilterFnFactory</a>&#x3C;T></code>, that creates an entity filter function which will treat the user's input\nas a case-insensitive, regular expression and apply it to one or more properties of the entity.</p>\n<p>The demo uses this helper to create hero and villain filters. Here's how the app creates the <code>nameAndSayingFilter</code> function for villains.</p>\n<code-example language=\"typescript\">\n/**\n * Filter for entities whose name or saying\n * matches the case-insensitive pattern.\n */\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> function nameAndSayingFilter(entities: Villain[], pattern: string) {\n  return <a href=\"api/data/PropsFilterFnFactory\" class=\"code-anchor\">PropsFilterFnFactory</a>&#x3C;Villain> ['name', 'saying'](entities, pattern);\n}\n</code-example>\n<h3 id=\"selectid\"><em>selectId</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#selectid\"><i class=\"material-icons\">link</i></a></h3>\n<p>Every <em>entity type</em> must have a <em>primary key</em> whose value is an integer or a string.</p>\n<p>The NgRx Data library assumes that the entity has an <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code> property whose value is the primary key.</p>\n<p>Not every entity will have a primary key property named <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code>. For some entities, the primary key could be the combined value of two or more properties.</p>\n<p>In these cases, you specify a <code>selectId</code> function that, given an entity instance, returns an integer or string primary key value.</p>\n<p>In the <em>EntityCollectionReducer</em> <a href=\"https://github.com/ngrx/platform/blob/master/modules/data/spec/reducers/entity-collection-reducer.spec.ts\">tests</a>,\nthe <code>Villain</code> type has a string primary key property named <code>key</code>.\nThe <code>selectorId</code> function is this:</p>\n<code-example language=\"typescript\">\nselectId: (villain: Villain) => villain.key;\n</code-example>\n<h3 id=\"sortcomparer\"><em>sortComparer</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#sortcomparer\"><i class=\"material-icons\">link</i></a></h3>\n<p>The NgRx Data library keeps the collection entities in a specific order.</p>\n<div class=\"alert is-helpful\">\n<p>This is actually a feature of the underlying NgRx Entity library.</p>\n</div>\n<p>The default order is the order in which the entities arrive from the server.\nThe entities you add are pushed to the end of the collection.</p>\n<p>You may prefer to maintain the collection in some other order.\nWhen you provide a <code>sortComparer</code> function, the <em>NgRx-lib</em> keeps the collection in the order prescribed by your comparer.</p>\n<p>In the demo app, the villains metadata has no comparer so its entities are in default order.</p>\n<p>The hero metadata have a <code>sortByName</code> comparer that keeps the collection in alphabetical order by <code>name</code>.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> function sortByName(a: { name: string }, b: { name: string }): number {\n  return a.name.localeCompare(b.name);\n}\n</code-example>\n<p>Run the demo app and try changing existing hero names or adding new heroes.</p>\n<p>Your app can call the <code>selectKey</code> selector to see the collection's <code><a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a></code> property, which returns an array of the collection's primary key values in sorted order.</p>\n<h3 id=\"entitydispatcheroptions\"><em>entityDispatcherOptions</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#entitydispatcheroptions\"><i class=\"material-icons\">link</i></a></h3>\n<p>These options determine the default behavior of the collection's <em>dispatcher</em> which sends actions to the reducers and effects.</p>\n<p>A dispatcher save command will add, delete, or update\nthe collection <em>before</em> sending a corresponding HTTP request (<em>optimistic</em>) or <em>after</em> (<em>pessimistic</em>).\nThe caller can specify in the optional <code><a href=\"api/data/EntityActionOptions#isOptimistic\" class=\"code-anchor\">isOptimistic</a></code> parameter.\nIf the caller doesn't specify, the dispatcher chooses based on default options.</p>\n<p>The <em>defaults</em> are the safe ones: <em>optimistic</em> for delete and <em>pessimistic</em> for add and update.\nYou can override those choices here.</p>\n<h3 id=\"additionalcollectionstate\"><em>additionalCollectionState</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#additionalcollectionstate\"><i class=\"material-icons\">link</i></a></h3>\n<p>Each NgRx Data entity collection in the store has\n<a href=\"guide/data/entity-collection\">predefined properties</a>.</p>\n<p>You can add your own collection properties by setting the <code><a href=\"api/data/EntityMetadata#additionalCollectionState\" class=\"code-anchor\">additionalCollectionState</a></code> property to an object with those custom collection properties.</p>\n<p>The <em>EntitySelectors</em> <a href=\"https://github.com/ngrx/platform/blob/master/modules/data/spec/selectors/entity-selectors.spec.ts\">tests</a>\nillustrate by adding <code>foo</code> and <code>bar</code> collection properties to test hero metadata.</p>\n<code-example language=\"typescript\">\n  <a href=\"api/data/EntityMetadata#additionalCollectionState\" class=\"code-anchor\">additionalCollectionState</a>: {\n    foo: 'Foo',\n    bar: 3.14\n  }\n</code-example>\n<p>The property values become the initial collection values for those properties when NgRx Data first creates the collection in the store.</p>\n<p>The NgRx Data library generates selectors for these properties, but has no way to update them. You'll have to create or extend the existing reducers to do that yourself.</p>\n<p>If the property you want to add comes from <code>backend</code>, you will need some additional work to make sure the property can be saved into the store from <code>Effects</code> correctly.</p>\n<h4 id=\"step-1-implement-persistenceresulthandler-to-save-data-from-backend-to-actionpayload\">Step 1: Implement <code><a href=\"api/data/PersistenceResultHandler\" class=\"code-anchor\">PersistenceResultHandler</a></code> to save data from backend to action.payload<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#step-1-implement-persistenceresulthandler-to-save-data-from-backend-to-actionpayload\"><i class=\"material-icons\">link</i></a></h4>\n<p>Create a new class <code>AdditionalPersistenceResultHandler</code> that <code>extends <a href=\"api/data/DefaultPersistenceResultHandler\" class=\"code-anchor\">DefaultPersistenceResultHandler</a></code> and overwrite the <a href=\"https://github.com/ngrx/platform/blob/master/modules/data/src/dataservices/persistence-result-handler.service.ts\">handleSuccess</a> method, the purpose is to parse the data received from <code>DataService</code>, retrieve the additional property, and then save this to the <code>action.payload</code>. Note that the default reducer for success actions requires that <code>action.payload.data</code> is an array of entities or an entity. This would need to be set after retrieving the additional property, not shown in the example below.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AdditionalPersistenceResultHandler extends <a href=\"api/data/DefaultPersistenceResultHandler\" class=\"code-anchor\">DefaultPersistenceResultHandler</a> {\n  handleSuccess(<a href=\"api/data/EntityActionDataServiceError#originalAction\" class=\"code-anchor\">originalAction</a>: <a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a>): (data: any) => <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n    const actionHandler = super.handleSuccess(<a href=\"api/data/EntityActionDataServiceError#originalAction\" class=\"code-anchor\">originalAction</a>);\n    // return a factory to get a data handler to\n    // parse data from DataService and save to action.payload\n    return function(data: any) {\n      const action = actionHandler.call(this, data);\n      if (action &#x26;&#x26; data &#x26;&#x26; data.foo) {\n        // save the data.foo to action.payload.foo\n        (action as any).payload.foo = data.foo;\n      }\n      return action;\n    };\n  }\n}\n</code-example>\n<h4 id=\"step-2-overwrite-entitycollectionreducermethods-to-save-the-additional-property-from-actionpayload-to-the-entitycollection-instance\">Step 2: Overwrite <code><a href=\"api/data/EntityCollectionReducerMethods\" class=\"code-anchor\">EntityCollectionReducerMethods</a></code> to save the additional property from action.payload to the EntityCollection instance<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#step-2-overwrite-entitycollectionreducermethods-to-save-the-additional-property-from-actionpayload-to-the-entitycollection-instance\"><i class=\"material-icons\">link</i></a></h4>\n<p>Following the prior step, we have added the additional property to the <code>action.payload</code>. Up next we need to set it to the instance of EntityCollection in the <code><a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a></code>. In order to accomplish that, we need to create an <code>AdditionalEntityCollectionReducerMethods</code> that <code>extends <a href=\"api/data/EntityCollectionReducerMethods\" class=\"code-anchor\">EntityCollectionReducerMethods</a></code>. In addition, we will need to overwrite the method to match your <code>action</code>. For example, if the additional property <code>foo</code> is only available in <code>queryMany action(triggered by EntityCollectionService.getWithQuery)</code>, we can follow this approach.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AdditionalEntityCollectionReducerMethods&#x3C;T> extends <a href=\"api/data/EntityCollectionReducerMethods\" class=\"code-anchor\">EntityCollectionReducerMethods</a>&#x3C;T> {\n  constructor(public entityName: string, public <a href=\"api/data/EntityCollectionReducerMethods#definition\" class=\"code-anchor\">definition</a>: <a href=\"api/data/EntityDefinition\" class=\"code-anchor\">EntityDefinition</a>&#x3C;T>) {\n    super(entityName, <a href=\"api/data/EntityCollectionReducerMethods#definition\" class=\"code-anchor\">definition</a>);\n  }\n   protected queryManySuccess(\n    collection: <a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a>&#x3C;T>,\n    action: <a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a>&#x3C;T[]>\n  ): <a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a>&#x3C;T> {\n    const ec = super.queryManySuccess(collection, action);\n    if ((action.payload as any).foo) {\n      // save the foo property from action.payload to entityCollection instance\n      (ec as any).foo = (action.payload as any).foo;\n    }\n    return ec;\n  }\n}\n</code-example>\n<h4 id=\"step-3-register-customized-entitycollectionreducermethods-and-additionalpersistenceresulthandler\">Step 3: Register customized <code><a href=\"api/data/EntityCollectionReducerMethods\" class=\"code-anchor\">EntityCollectionReducerMethods</a></code> and <code>AdditionalPersistenceResultHandler</code>.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#step-3-register-customized-entitycollectionreducermethods-and-additionalpersistenceresulthandler\"><i class=\"material-icons\">link</i></a></h4>\n<p>Finally we need to register the <code>AdditionalPersistenceResultHandler</code> and <code>AdditionalEntityCollectionReducerMethods</code> to replace the default implementation.</p>\n<p>Register <code>AdditionalPersistenceResultHandler</code> in <code>NgModule</code>,</p>\n<code-example language=\"typescript\">\n@NgModule({\n  { provide: <a href=\"api/data/PersistenceResultHandler\" class=\"code-anchor\">PersistenceResultHandler</a>, useClass: AdditionalPersistenceResultHandler },\n})\n</code-example>\n<p>Register <code>AdditionalEntityCollectionReducerMethods</code>, to do that, we need to create an <code>AdditionalEntityCollectionReducerMethodFactory</code>, for details, see <a href=\"guide/data/entity-reducer\">Entity Reducer</a></p>\n<code-example language=\"typescript\">\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AdditionalEntityCollectionReducerMethodsFactory {\n  constructor(private <a href=\"api/data/EntityCacheDataService#entityDefinitionService\" class=\"code-anchor\">entityDefinitionService</a>: <a href=\"api/data/EntityDefinitionService\" class=\"code-anchor\">EntityDefinitionService</a>) {}\n   /** Create the  {<a href=\"api/data/EntityCollectionReducerMethods\" class=\"code-anchor\">EntityCollectionReducerMethods</a>} for the named entity type */\n  create&#x3C;T>(entityName: string): <a href=\"api/data/EntityCollectionReducerMethodMap\" class=\"code-anchor\">EntityCollectionReducerMethodMap</a>&#x3C;T> {\n    const <a href=\"api/data/EntityCollectionReducerMethods#definition\" class=\"code-anchor\">definition</a> = this.entityDefinitionService.getDefinition&#x3C;T>(entityName);\n    const methodsClass = new AdditionalEntityCollectionReducerMethods(entityName, <a href=\"api/data/EntityCollectionReducerMethods#definition\" class=\"code-anchor\">definition</a>);\n     return methodsClass.methods;\n  }\n}\n</code-example>\n<p>Register <code>AdditionalEntityCollectionReducerMethodsFactory</code> to <code>NgModule</code>,</p>\n<code-example language=\"typescript\">\n@NgModule({\n  {\n    provide: <a href=\"api/data/EntityCollectionReducerMethodsFactory\" class=\"code-anchor\">EntityCollectionReducerMethodsFactory</a>,\n    useClass: AdditionalEntityCollectionReducerMethodsFactory\n  },\n})\n</code-example>\n<p>Now you can get <code>foo</code> from <code>backend</code> just like another <code><a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a></code> level property.</p>\n<p><a id=\"plurals\"></a></p>\n<h2 id=\"pluralizing-the-entity-name\">Pluralizing the entity name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-metadata#pluralizing-the-entity-name\"><i class=\"material-icons\">link</i></a></h2>\n<p>The NgRx Data <a href=\"guide/data/entity-dataservice\"><code>DefaultDataService</code></a> relies on the <code><a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a></code> to create conventional HTTP resource names (URLs) for each entity type.</p>\n<p>By convention, an HTTP request targeting a single entity item contains the lowercase, singular version of the entity type name. For example, if the entity type <code>entityName</code> is \"Hero\", the default data service will POST to a URL such as <code>'api/hero'</code>.</p>\n<p>By convention, an HTTP request targeting multiple entities contains the lowercase, <em>plural</em> version of the entity type name. The URL of a GET request that retrieved all heroes should be something like <code>'api/heroes'</code>.</p>\n<p>The <code><a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a></code> can't pluralize the entity type name on its own. It delegates to an injected <em>pluralizing class</em>, called <code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code>.</p>\n<p>The <code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code> class has a <em>pluralize()</em> method that takes the singular string and returns the plural string.</p>\n<p>The default <code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code> handles many of the common English pluralization rules such as appending an <code>'s'</code>.\nThat's fine for the <code>Villain</code> type (which becomes \"Villains\") and even for <code>Company</code> (which becomes \"Companies\").</p>\n<p>It's far from perfect. For example, it incorrectly turns <code>Hero</code> into \"Heros\" instead of \"Heroes\".</p>\n<p>Fortunately, the default <code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code> also injects a map of singular to plural strings (with the <code><a href=\"api/data/PLURAL_NAMES_TOKEN\" class=\"code-anchor\">PLURAL_NAMES_TOKEN</a></code>).</p>\n<p>Its <code>pluralize()</code> method looks for the singular entity name in that map and uses the corresponding plural value if found.\nOtherwise, it returns the default pluralization of the entity name.</p>\n<p>If this scheme works for you, create a map of <em>singular-to-plural</em> entity names for the exceptional cases:</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const pluralNames = {\n  // Case matters. Match the case of the entity name.\n  Hero: 'Heroes'\n};\n</code-example>\n<p>Then specify this map while configuring the NgRx Data library.</p>\n<code-example language=\"typescript\">\n    EntityDataModule.forRoot({\n      ...\n      pluralNames: pluralNames\n    })\n</code-example>\n<p>If you define your <em>entity model</em> in separate Angular modules, you can incrementally add a plural names map with the multi-provider.</p>\n<code-example language=\"typescript\">\n{ provide: <a href=\"api/data/PLURAL_NAMES_TOKEN\" class=\"code-anchor\">PLURAL_NAMES_TOKEN</a>, multi: true, useValue: morePluralNames }\n</code-example>\n<p>If this scheme isn't working for you, replace the <code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code> class with your own invention.</p>\n<code-example language=\"typescript\">\n{ provide: <a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a>, useClass: MyPluralizer }\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/architecture-overview\n - guide/data/entity-actions\n - guide/data/entity-collection\n - guide/data/entity-dataservice\n - guide/data/entity-reducer\n - guide/data/faq\n-->\n<!-- links from this doc:\n - api/data/DefaultPersistenceResultHandler\n - api/data/ENTITY_METADATA_TOKEN\n - api/data/EntityAction\n - api/data/EntityActionDataServiceError#originalAction\n - api/data/EntityActionOptions#isOptimistic\n - api/data/EntityCacheDataService#entityDefinitionService\n - api/data/EntityCollection\n - api/data/EntityCollection#filter\n - api/data/EntityCollectionReducerMethodMap\n - api/data/EntityCollectionReducerMethods\n - api/data/EntityCollectionReducerMethods#definition\n - api/data/EntityCollectionReducerMethodsFactory\n - api/data/EntityDataModuleConfig#entityMetadata\n - api/data/EntityDefinition\n - api/data/EntityDefinitionService\n - api/data/EntityDispatcherDefaultOptions#optimisticAdd\n - api/data/EntityDispatcherDefaultOptions#optimisticUpdate\n - api/data/EntityFilterFn\n - api/data/EntityMetadata\n - api/data/EntityMetadata#additionalCollectionState\n - api/data/EntityMetadata#filterFn\n - api/data/EntityMetadataMap\n - api/data/HttpUrlGenerator\n - api/data/PLURAL_NAMES_TOKEN\n - api/data/PersistenceResultHandler\n - api/data/Pluralizer\n - api/data/PropsFilterFnFactory\n - api/data/UpdateResponseData#id\n - api/entity/EntityState#ids\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store/Action\n - api/store/On#reducer\n - guide/data/entity-actions\n - guide/data/entity-collection\n - guide/data/entity-dataservice\n - guide/data/entity-metadata#additionalcollectionstate\n - guide/data/entity-metadata#entity-metadata\n - guide/data/entity-metadata#entitydispatcheroptions\n - guide/data/entity-metadata#entityname\n - guide/data/entity-metadata#filterfn\n - guide/data/entity-metadata#metadata-properties\n - guide/data/entity-metadata#pluralizing-the-entity-name\n - guide/data/entity-metadata#plurals\n - guide/data/entity-metadata#register-metadata\n - guide/data/entity-metadata#selectid\n - guide/data/entity-metadata#sortcomparer\n - guide/data/entity-metadata#step-1-implement-persistenceresulthandler-to-save-data-from-backend-to-actionpayload\n - guide/data/entity-metadata#step-2-overwrite-entitycollectionreducermethods-to-save-the-additional-property-from-actionpayload-to-the-entitycollection-instance\n - guide/data/entity-metadata#step-3-register-customized-entitycollectionreducermethods-and-additionalpersistenceresulthandler\n - guide/data/entity-reducer\n - https://github.com/ngrx/platform/blob/master/modules/data/spec/reducers/entity-collection-reducer.spec.ts\n - https://github.com/ngrx/platform/blob/master/modules/data/spec/selectors/entity-selectors.spec.ts\n - https://github.com/ngrx/platform/blob/master/modules/data/src/dataservices/persistence-result-handler.service.ts\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-metadata.md?message=docs%3A%20describe%20your%20change...\n-->"
}