{
  "id": "guide/data/entity-collection-service",
  "title": "EntityCollectionService",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-collection-service.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entitycollectionservice\">EntityCollectionService<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#entitycollectionservice\"><i class=\"material-icons\">link</i></a></h1>\n<p>An <strong><code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code></strong> is a facade over the NgRx Data <strong>dispatcher</strong> and <strong>selectors$</strong> that manages an entity <code>T</code> collection cached in the <em>NgRx store</em>.</p>\n<p>The <strong><em>Dispatcher</em></strong> features <strong>command</strong> methods that dispatch <a href=\"guide/data/entity-actions\"><em>entity actions</em></a> to the <em>NgRx store</em>.\nThese commands either update the entity collection directly or trigger HTTP requests to a server. When the server responds, the NgRx Data library dispatches new actions with the response data and these actions update the entity collection.</p>\n<p>The <code><a href=\"api/data/EntityCommands\" class=\"code-anchor\">EntityCommands</a></code> interface lists all the commands and what they do.</p>\n<p>Your application calls these <em>command methods</em> to update\nthe <em>cached entity collection</em> in the <em>NgRx store</em>.</p>\n<p><strong><em>Selectors$</em></strong> are properties returning <em>selector observables</em>.\nEach <em>observable</em> watches for a specific change in the cached entity collection and emits the changed value.</p>\n<p>The <code><a href=\"api/data/EntitySelectors$\" class=\"code-anchor\">EntitySelectors$</a></code> interface lists all of the pre-defined <em>selector observable properties</em> and\nexplains which collection properties they observe.</p>\n<p>Your application subscribes to <em>selector observables</em>\nin order to process and display entities in the collection.</p>\n<h2 id=\"examples-from-the-demo-app\">Examples from the demo app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#examples-from-the-demo-app\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here are simplified excerpts from the demo app's <code>HeroesComponent</code> showing the component calling <em>command methods</em> and subscribing to <em>selector observables</em>.</p>\n<code-example language=\"typescript\">\nconstructor(<a href=\"api/data/EntityCollectionServiceFactory\" class=\"code-anchor\">EntityCollectionServiceFactory</a>: <a href=\"api/data/EntityCollectionServiceFactory\" class=\"code-anchor\">EntityCollectionServiceFactory</a>) {\n  this.heroService = EntityCollectionServiceFactory.create&#x3C;Hero>('Hero');\n  this.filteredHeroes$ = this.heroService.filteredEntities$;\n  this.loading$ = this.heroService.loading$;\n}\n\ngetHeroes() { this.heroService.getAll(); }\nadd(hero: Hero) { this.heroService.add(hero); }\ndeleteHero(hero: Hero) { this.heroService.delete(hero.id); }\nupdate(hero: Hero) { this.heroService.update(hero); }\n</code-example>\n<h3 id=\"create-the-entitycollectionservice-with-a-factory\">Create the <em>EntityCollectionService</em> with a factory<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#create-the-entitycollectionservice-with-a-factory\"><i class=\"material-icons\">link</i></a></h3>\n<p>The component injects the NgRx Data <code><a href=\"api/data/EntityCollectionServiceFactory\" class=\"code-anchor\">EntityCollectionServiceFactory</a></code> and\ncreates an <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> for <code>Hero</code> entities.</p>\n<div class=\"alert is-helpful\">\n<p>We'll go inside the factory <a href=\"guide/data/entity-collection-service#entitycollectionservicefactory\">later in this guide</a>.</p>\n</div>\n<h3 id=\"create-the-entitycollectionservice-as-a-class\">Create the <em>EntityCollectionService</em> as a class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#create-the-entitycollectionservice-as-a-class\"><i class=\"material-icons\">link</i></a></h3>\n<p>Alternatively, you could have created a single <code>HeroEntityService</code> elsewhere, perhaps in the <code>AppModule</code>, and injected it into the component's constructor.</p>\n<p>There are two basic ways to create the service class.</p>\n<ol>\n<li>Derive from <code><a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>&#x3C;T></code></li>\n<li>Write a <code>HeroEntityService</code> with just the API you need.</li>\n</ol>\n<p>When <code>HeroEntityService</code> derives from <code><a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>&#x3C;T></code> it must inject the <code><a href=\"api/data/EntityCollectionServiceFactory\" class=\"code-anchor\">EntityCollectionServiceFactory</a></code> into its constructor.\nThere are examples of this approach in the demo app.</p>\n<p>When defining an <code>HeroEntityService</code> with a limited API,\nyou may also inject <code><a href=\"api/data/EntityCollectionServiceFactory\" class=\"code-anchor\">EntityCollectionServiceFactory</a></code> as a source of the\nfunctionality that you choose to expose.</p>\n<p>Let your preferred style and app needs determine which creation technique you choose.</p>\n<h3 id=\"set-component-selector-properties\">Set component <em>selector$</em> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#set-component-selector-properties\"><i class=\"material-icons\">link</i></a></h3>\n<p>A <code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>$</code> property is an <em>observable</em> that emits when a <em>selected</em> state property changes.</p>\n<div class=\"alert is-helpful\">\n<p>Some folks refer to such properties as <strong>state streams</strong>.</p>\n</div>\n<p>The example component has two such properties that expose two <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> <em>selector observables</em>: <code>filteredEntities$</code> and <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$</code>.</p>\n<p>The <code>filteredEntities$</code> <em>observable</em> produces an array of the currently cached <code>Hero</code> entities that satisfy the user's filter criteria.\nThis <em>observable</em> produces a new array of heroes if the user\nchanges the filter or if some action changes the heroes in the cached collection.</p>\n<p>The <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$</code> <em>observable</em> produces <code>true</code> while the\n<a href=\"guide/data/entity-dataservice\">data service</a> is waiting for heroes from the server.\nIt produces <code>false</code> when the server responds.\nThe demo app subscribes to <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$</code> so that it can turn a visual loading indicator on and off.</p>\n<div class=\"alert is-helpful\">\n<p>These component and <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> selector property names end in <code>'$'</code> which is a common convention for a property that returns an <code>Observable</code>.\nAll <em>selector observable</em> properties of an <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> follow this convention.</p>\n</div>\n<h4 id=\"the-selector-observable-versus-the-selector-function\">The <em>selector observable</em> versus the <em>selector function</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#the-selector-observable-versus-the-selector-function\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <em><code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>$</code></em> observable (ending with an <code>'$'</code>) differs from the similarly named and\nclosely-related <code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a></code> function (no <code>'$'</code> suffix)</p>\n<p>A <code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a></code> is a <em>function</em> that <em>selects</em> a slice of state from the entity collection.\nA <code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>$</code> observable emits that slice of state when the state changes.</p>\n<p>NgRx Data creates a <code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>$</code> observable by passing the <em>selector</em> function to the NgRx <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> operator and piping it onto the NgRx store, as seen in the following example:</p>\n<code-example language=\"typescript\">\n<a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$ = this.store.select(selectLoading);\n</code-example>\n<h4 id=\"using-selectors\">Using <em>selectors$</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#using-selectors\"><i class=\"material-icons\">link</i></a></h4>\n<p>The component <em>class</em> does not subscribe to these <code><a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>$</code> properties but the component <em>template</em> does.</p>\n<p>The template binds to them and forwards their <em>observables</em> to the Angular <code>AsyncPipe</code>, which subscribes to them.\nHere's an excerpt of the <code>filteredHeroes$</code> binding.</p>\n<code-example language=\"html\">\n&#x3C;div *ngIf=\"filteredHeroes$ | async as heroes\">\n...\n&#x3C;/div>\n</code-example>\n<h3 id=\"call-command-methods\">Call <em>command methods</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#call-command-methods\"><i class=\"material-icons\">link</i></a></h3>\n<p>Most of the <code>HeroesComponent</code> methods delegate to <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> command methods such as <code>getAll()</code> and <code>add()</code>.</p>\n<p>There are two kinds of commands:</p>\n<ol>\n<li>Commands that trigger requests to the server.</li>\n<li>Cache-only commands that update the cached entity collection.</li>\n</ol>\n<p>The server commands are simple verbs like \"add\" and \"getAll\".\nThey dispatch actions that trigger asynchronous requests to a remote server.</p>\n<p>The cache-only command methods are longer verbs like \"addManyToCache\" and \"removeOneFromCache\"\nand their names all contain the word \"cache\".\nThey update the cached collection immediately (synchronously).</p>\n<div class=\"alert is-helpful\">\n<p>Most applications call the server commands because they want to query and save entity data.</p>\n<p>Apps rarely call the cache-only commands because direct updates to the entity collection\nare lost when the application shuts down.</p>\n</div>\n<p>Many <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> command methods take a value.\nThe value is <em>typed</em> (often as <code>Hero</code>) so you won't make a mistake by passing in the wrong kind of value.</p>\n<p>Internally, an entity service method creates an\n<a href=\"guide/data/entity-actions\"><em>entity action</em></a> that corresponds to the method's intent. The action's <em>payload</em> is either the value passed to the method or an appropriate derivative of that value.</p>\n<p><em>Immutability</em> is a core principle of the <em>redux pattern</em>.\nSeveral of the command methods take an entity argument such as a <code>Hero</code>.\nAn entity argument <strong>must never be a cached entity object</strong>.\nIt can be a <em>copy</em> of a cached entity object and it often is.\nThe demo application always calls these command methods with copies of the entity data.</p>\n<p>All <em>command methods</em> return <code>void</code>.\nA core principle of the <em>redux pattern</em> is that <em>commands</em> never return a value. They just <em>do things</em> that have side-effects.</p>\n<p>Rather than expect a result from the command,\nyou subscribe to a <em>selector$</em> property that reflects\nthe effects of the command. If the command did something you care about, a <em>selector$</em> property should be able to tell you about it.</p>\n<h2 id=\"entitycollectionservicefactory\"><em>EntityCollectionServiceFactory</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-collection-service#entitycollectionservicefactory\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>create&#x3C;T>()</code> method of the NgRx Data <code><a href=\"api/data/EntityCollectionServiceFactory\" class=\"code-anchor\">EntityCollectionServiceFactory</a></code> produces a new instance\nof the <code><a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>&#x3C;T></code> class that implements the <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> interface for the entity type <code>T</code>.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/entity-services\n-->\n<!-- links from this doc:\n - api/data/EntityCollection#loading\n - api/data/EntityCollectionService\n - api/data/EntityCollectionServiceBase\n - api/data/EntityCollectionServiceFactory\n - api/data/EntityCommands\n - api/data/EntitySelectors$\n - api/store/select\n - api/store/testing/MockSelector#selector\n - guide/data/entity-actions\n - guide/data/entity-collection-service#call-command-methods\n - guide/data/entity-collection-service#create-the-entitycollectionservice-as-a-class\n - guide/data/entity-collection-service#create-the-entitycollectionservice-with-a-factory\n - guide/data/entity-collection-service#entitycollectionservice\n - guide/data/entity-collection-service#entitycollectionservicefactory\n - guide/data/entity-collection-service#examples-from-the-demo-app\n - guide/data/entity-collection-service#set-component-selector-properties\n - guide/data/entity-collection-service#the-selector-observable-versus-the-selector-function\n - guide/data/entity-collection-service#using-selectors\n - guide/data/entity-dataservice\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-collection-service.md?message=docs%3A%20describe%20your%20change...\n-->"
}