{
  "id": "guide/data/entity-actions",
  "title": "Entity Actions",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-actions.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entity-actions\">Entity Actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#entity-actions\"><i class=\"material-icons\">link</i></a></h1>\n<p>The <a href=\"guide/data/entity-services\"><code>EntityCollectionService</code></a> dispatches an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> to the <em>NgRx store</em> when you call one of its commands to query or update entities in a cached collection.</p>\n<h2 id=\"action-and-entityaction\"><em>Action</em> and <em>EntityAction</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#action-and-entityaction\"><i class=\"material-icons\">link</i></a></h2>\n<p>A vanilla\n<a href=\"guide/store/actions\"><em>NgRx <code>Action</code></em></a> is a message.\nThe message describes an operation that can change state in the <em>store</em>.</p>\n<p>The <em>action</em>'s <code>type</code> identifies the operation.\nIt's optional <code>payload</code> carries the message data necessary to perform the operation.</p>\n<p>An <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> is a super-set of the <em>NgRx <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code></em>.\nIt has additional properties that guide NgRx Data's handling of the action. Here's the full interface.</p>\n<code-example header=\"EntityAction\" linenums=\"false\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a>&#x3C;P = any> extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly type: string;\n  readonly payload: <a href=\"api/data/EntityActionPayload\" class=\"code-anchor\">EntityActionPayload</a>&#x3C;P>;\n}\n</code-example>\n<code-example header=\"EntityActionPayload\" linenums=\"false\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/data/EntityActionPayload\" class=\"code-anchor\">EntityActionPayload</a>&#x3C;P = any> extends <a href=\"api/data/EntityActionOptions\" class=\"code-anchor\">EntityActionOptions</a> {\n  readonly entityName: string;\n  readonly <a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a>: <a href=\"api/data/EntityOp\" class=\"code-anchor\">EntityOp</a>;\n  readonly data?: P;\n\n  // <a href=\"api/data/EntityActionOptions\" class=\"code-anchor\">EntityActionOptions</a> (also an interface)\n  readonly <a href=\"api/data/EntityActionOptions#correlationId\" class=\"code-anchor\">correlationId</a>?: any;\n  readonly <a href=\"api/data/EntityActionOptions#isOptimistic\" class=\"code-anchor\">isOptimistic</a>?: boolean;\n  readonly <a href=\"api/data/EntityActionOptions#mergeStrategy\" class=\"code-anchor\">mergeStrategy</a>?: <a href=\"api/data/MergeStrategy\" class=\"code-anchor\">MergeStrategy</a>;\n  readonly tag?: string;\n  error?: Error;\n  skip?: boolean\n}\n</code-example>\n<ul>\n<li><code>type</code> - action name, typically generated from the <code>tag</code> and the <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code>.</li>\n<li><code>entityName</code> - the name of the entity type.</li>\n<li><code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> - the name of an entity operation.</li>\n<li><code>data?</code> - the message data for the action.</li>\n<li><code><a href=\"api/data/EntityActionOptions#correlationId\" class=\"code-anchor\">correlationId</a>?</code> - a serializable object (typically a string) for correlating related actions.</li>\n<li><code><a href=\"api/data/EntityActionOptions#isOptimistic\" class=\"code-anchor\">isOptimistic</a>?</code> - true if should perform the action optimistically (before the server responds).</li>\n<li><code><a href=\"api/data/EntityActionOptions#mergeStrategy\" class=\"code-anchor\">mergeStrategy</a></code> - how to merge an entity into the cache. See <a href=\"guide/data/entity-change-tracker\">Change Tracking</a>.</li>\n<li><code>tag?</code> - the tag to use within the generated type. If not specified, the <code>entityName</code> is the tag.</li>\n<li><code>error?</code> - an unexpected action processing error.</li>\n<li><code>skip?</code> - true if downstream consumers should skip processing the action.</li>\n</ul>\n<p>The <code>type</code> is the only property required by <em>NgRx</em>. It is a string that uniquely identifies the action among the set of all the types of actions that can be dispatched to the store.</p>\n<p>NgRx Data doesn't care about the <code>type</code>. It pays attention to the <code>entityName</code> and <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> properties.</p>\n<p>The <code>entityName</code> is the name of the entity type.\nIt identifies the <em>entity collection</em> in the NgRx Data cache to which this action applies.\nThis name corresponds to <a href=\"guide/data/entity-metadata\">NgRx Data <em>metadata</em></a> for that collection.\nAn entity interface or class name, such as <code>'Hero'</code>, is a typical <code>entityName</code>.</p>\n<p>The <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> identifies the operation to perform on the <em>entity collection</em>,\none of the <code><a href=\"api/data/EntityOp\" class=\"code-anchor\">EntityOp</a></code> enumerations that correspond to one of the\nalmost <em>sixty</em> distinct operations that NgRx Data can perform on a collection.</p>\n<p>The <code>data</code> is conceptually the body of the message.\nIts type and content should fit the requirements of the operation to be performed.</p>\n<p>The optional <code><a href=\"api/data/EntityActionOptions#correlationId\" class=\"code-anchor\">correlationId</a>?</code> is an optional serializable object (usually a GUID) that correlates two or more actions such as the action that initiates a server action (\"get all heroes\") and the subsequent actions that follow after the server action completed (\"got heroes successfully\" or \"error while getting heroes\").</p>\n<p>The optional <code><a href=\"api/data/EntityActionOptions#mergeStrategy\" class=\"code-anchor\">mergeStrategy</a></code> tells NgRx Data how to \"merge\" the result of the action into the cache.\nMostly this is an instruction to the the <a href=\"guide/data/entity-change-tracker\">Change Tracking</a> sub-system.</p>\n<p>The optional <code>tag</code> appears in the generated <code>type</code> text when the <code><a href=\"api/data/EntityActionFactory\" class=\"code-anchor\">EntityActionFactory</a></code> creates this <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code>.</p>\n<p>The <code>entityName</code> is the default tag that appears between brackets in the formatted <code>type</code>,\ne.g., <code>'[Hero] NgRx Data/query-all'</code>.\nYou can set this tag to identify the purpose of the operation and \"who\" dispatched it.\nNgRx Data will put your tag between the brackets in the formatted <code>type</code>.</p>\n<p>The <code>error</code> property indicates that something went wrong while processing the action. <a href=\"guide/data/entity-actions#action-error\">See more below</a>.</p>\n<p>The <code>skip</code> property tells downstream action receivers that they should skip the usual action processing.\nThis flag is usually missing and is implicitly false.\n<a href=\"guide/data/entity-actions#action-skip\">See more below</a>.</p>\n<h2 id=\"entityaction-consumers\"><em>EntityAction</em> consumers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#entityaction-consumers\"><i class=\"material-icons\">link</i></a></h2>\n<p>The NgRx Data library ignores the <code><a href=\"api/store/Action#type\" class=\"code-anchor\">Action.type</a></code>.\nAll NgRx Data library behaviors are determined by the <code>entityName</code> and <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> properties alone.</p>\n<p>The NgRx Data <code>EntityReducer</code> redirects an action to an <code><a href=\"api/data/EntityCollectionReducer\" class=\"code-anchor\">EntityCollectionReducer</a></code> based on the <code>entityName</code>\nand that reducer processes the action based on the <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code>.</p>\n<p><code><a href=\"api/data/EntityEffects\" class=\"code-anchor\">EntityEffects</a></code> intercepts an action if its <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> is among the small set of persistence <code>EntityAction.entityOp</code> names.\nThe effect picks the right <em>data service</em> for that action's <code>entityName</code>, then tells the service to make the appropriate HTTP request and handle the response.</p>\n<h2 id=\"creating-an-entityaction\">Creating an <em>EntityAction</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#creating-an-entityaction\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can create an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> by hand if you wish.\nThe NgRx Data library considers <em>any action</em> with an <code>entityName</code> and <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> properties to be an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code>.</p>\n<p>The <code><a href=\"api/data/EntityActionFactory#create\" class=\"code-anchor\">EntityActionFactory.create()</a></code> method helps you create a consistently well-formed <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> instance\nwhose <code>type</code> is a string composed from the <code>tag</code> (the <code>entityName</code> by default) and the <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code>.</p>\n<p>For example, the default generated <code><a href=\"api/store/Action#type\" class=\"code-anchor\">Action.type</a></code> for the operation that queries the server for all heroes is <code>'[Hero] NgRx Data/query-all'</code>.</p>\n<div class=\"alert is-helpful\">\n<p>The <code><a href=\"api/data/EntityActionFactory#create\" class=\"code-anchor\">EntityActionFactory.create()</a></code> method calls the factory's <code><a href=\"api/data/EntityActionFactory#formatActionType\" class=\"code-anchor\">formatActionType()</a></code> method\nto produce the <code><a href=\"api/store/Action#type\" class=\"code-anchor\">Action.type</a></code> string.</p>\n<p>Because NgRx Data ignores the <code>type</code>, you can replace <code><a href=\"api/data/EntityActionFactory#formatActionType\" class=\"code-anchor\">formatActionType()</a></code> with your own method if you prefer a different format\nor provide and inject your own <code><a href=\"api/data/EntityActionFactory\" class=\"code-anchor\">EntityActionFactory</a></code>.</p>\n</div>\n<p>Note that <strong><em>each entity type has its own _unique</em> <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code> for each operation_</strong>, as if you had created them individually by hand.</p>\n<h2 id=\"tagging-the-entityaction\">Tagging the EntityAction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#tagging-the-entityaction\"><i class=\"material-icons\">link</i></a></h2>\n<p>A well-formed action <code>type</code> can tell the reader what changed and\nwho changed it.</p>\n<p>The NgRx Data library doesn't look at the type of an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code>,\nonly its <code>entityName</code> and <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code>.\nSo you can get the same behavior from several different actions,\neach with its own informative <code>type</code>, as long as they share the same\n<code>entityName</code> and <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code>.</p>\n<p>The optional <code>tag</code> parameter of the <code><a href=\"api/data/EntityActionFactory#create\" class=\"code-anchor\">EntityActionFactory.create()</a></code> method makes\nit easy to produce meaningful <em>EntityActions</em>.</p>\n<p>You don't have to specify a tag. The <code>entityName</code> is the default tag that appears between brackets in the formatted <code>type</code>,\ne.g., <code>'[Hero] NgRx Data/query-all'</code>.</p>\n<p>Here's an example that uses the injectable <code><a href=\"api/data/EntityActionFactory\" class=\"code-anchor\">EntityActionFactory</a></code> to construct the default \"query all heroes\" action.</p>\n<code-example language=\"typescript\">\nconst action = this.entityActionFactory.create&#x3C;Hero>(\n  'Hero',\n  <a href=\"api/data/EntityOp#QUERY_ALL\" class=\"code-anchor\">EntityOp.QUERY_ALL</a>\n);\n\nstore.dispatch(action);\n</code-example>\n<p>Thanks to the NgRx Data <em>Effects</em>, this produces <em>two</em> actions in the log, the first to initiate the request and the second with the successful response:</p>\n<code-example language=\"typescript\">\n[Hero] ngrx/data/query-all\n[Hero] ngrx/data/query-all/success\n</code-example>\n<p>This default <code>entityName</code> tag identifies the action's target entity collection.\nBut you can't understand the <em>context</em> of the action from these log entries. You don't know who dispatched the action or why.\nThe action <code>type</code> is too generic.</p>\n<p>You can create a more informative action by providing a tag that\nbetter describes what is happening and also make it easier to find\nwhere that action is dispatched by your code.</p>\n<p>For example,</p>\n<code-example language=\"typescript\">\nconst action = this.entityActionFactory.create&#x3C;Hero>(\n  'Hero',\n  <a href=\"api/data/EntityOp#QUERY_ALL\" class=\"code-anchor\">EntityOp.QUERY_ALL</a>,\n  null,\n  { tag: 'Load Heroes <a href=\"api/store/On\" class=\"code-anchor\">On</a> Start' }\n);\n\nstore.dispatch(action);\n</code-example>\n<p>The action log now looks like this:</p>\n<code-example language=\"typescript\">\n[Load Heroes <a href=\"api/store/On\" class=\"code-anchor\">On</a> Start] ngrx/data/query-all\n[Load Heroes <a href=\"api/store/On\" class=\"code-anchor\">On</a> Start] ngrx/data/query-all/success\n</code-example>\n<h3 id=\"handcrafted-entityaction\">Handcrafted <em>EntityAction</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#handcrafted-entityaction\"><i class=\"material-icons\">link</i></a></h3>\n<p>You don't have to create entity actions with the <code><a href=\"api/data/EntityActionFactory\" class=\"code-anchor\">EntityActionFactory</a></code>.\nAny action object with an <code>entityName</code> and <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> property is\nan entity action, as explained <a href=\"guide/data/entity-actions#where-are-the-entityactions\">below</a>.</p>\n<p>The following example creates the initiating \"query all heroes\" action by hand.</p>\n<code-example language=\"typescript\">\nconst action = {\n  type: 'some/arbitrary/action/type',\n  entityName: 'Hero',\n  <a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a>: <a href=\"api/data/EntityOp#QUERY_ALL\" class=\"code-anchor\">EntityOp.QUERY_ALL</a>\n};\n\nstore.dispatch(action);\n</code-example>\n<p>It triggers the HTTP request via <em>NgRx Data effects</em>, as in the previous examples.</p>\n<p>Just be aware that <em>NgRx Data effects</em> uses the <code><a href=\"api/data/EntityActionFactory\" class=\"code-anchor\">EntityActionFactory</a></code> to create the second, success Action.\nWithout the <code>tag</code> property, it produces a generic success action.</p>\n<p>The log of the two action types will look like this:</p>\n<code-example language=\"sh\">\nsome/arbitrary/action/type\n[Hero] NgRx Data/query-all-success\n</code-example>\n<h2 id=\"where-are-the-entityactions\">Where are the <em>EntityActions</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#where-are-the-entityactions\"><i class=\"material-icons\">link</i></a></h2>\n<p>In an NgRx Data app, the NgRx Data library creates and dispatches <em>EntityActions</em> for you.</p>\n<p><em>EntityActions</em> are largely invisible when you call the <a href=\"guide/data/entity-services\"><code>EntityCollectionService</code></a> API.\nYou can see them in action with the\n<a href=\"guide/store-devtools\">NgRx store dev-tools</a>.</p>\n<h2 id=\"why-this-matters\">Why this matters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#why-this-matters\"><i class=\"material-icons\">link</i></a></h2>\n<p>In an ordinary <em>NgRx</em> application, you hand-code every <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code> for every <em>state</em> in the store\nas well as the <a href=\"guide/store/reducers\">reducers</a>\nthat process those <em>actions</em>.</p>\n<p>It takes many <em>actions</em>, a complex <em>reducer</em>, and the help of an NgRx <a href=\"guide/effects\">Effect</a> to manage queries and saves for a <em>single</em> entity type.</p>\n<p>The NgRx <a href=\"guide/entity\">Entity</a> library makes the job considerably easier.</p>\n<div class=\"alert is-helpful\">\n<p>The NgRx Data library internally delegates much of the heavy lifting to NgRx <em>Entity</em>.</p>\n</div>\n<p>But you must still write a lot of code for each entity type.\nYou're expected to create <em>eight actions</em> per entity type and\nwrite a <em>reducer</em> that responds to these eight actions by calling eight methods of an NgRx <a href=\"guide/entity/adapter#adapter-collection-methods\"><em>EntityAdapter</em></a>.</p>\n<p>These artifacts only address the <em>cached</em> entity collection.</p>\n<p>You may write as many as <em>eighteen additional actions</em> to support a typical complement of asynchronous CRUD (Create, Retrieve, Update, Delete) operations. You'll have to dispatch them to the store where you'll process them with more <em>reducer</em> methods and <em>effects</em> that you must also hand code.</p>\n<p>With vanilla <em>NgRx</em>, you'll go through this exercise for <em>every entity type</em>.\nThat's a lot of code to write, test, and maintain.</p>\n<p>With the help of NgRx Data, you don't write any of it.\nNgRx Data creates the <em>actions</em> and the <em>dispatchers</em>, <em>reducers</em>, and <em>effects</em> that respond to those actions.</p>\n<p><a id=\"action-error\"></a></p>\n<h2 id=\"entityactionerror\"><em>EntityAction.error</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#entityactionerror\"><i class=\"material-icons\">link</i></a></h2>\n<p>The presence of an <code>EntityAction.error</code> property indicates that something bad happened while processing the action.</p>\n<p>An <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> should be immutable. The <code>EntityAction.error</code> property is the <em>only</em> exception and is strictly an internal property of the NgRx Data system.\nYou should rarely (if ever) set it yourself.</p>\n<p>The primary use case for <code>error</code> is to catch reducer exceptions.\n<em>NgRx</em> stops subscribing to reducers if one of them throws an exception.\nCatching reducer exceptions allows the application to continue operating.</p>\n<p>NgRx Data traps an error thrown by an <code><a href=\"api/data/EntityCollectionReducer\" class=\"code-anchor\">EntityCollectionReducer</a></code> and sets the <code>EntityAction.error</code> property to the caught error object.</p>\n<p>The <code>error</code> property is important when the errant action is a <em>persistence action</em> (such as <code><a href=\"api/data/EntityOp#SAVE_ADD_ONE\" class=\"code-anchor\">SAVE_ADD_ONE</a></code>).\nThe <code><a href=\"api/data/EntityEffects\" class=\"code-anchor\">EntityEffects</a></code> will see that such an action has an error and will return the corresponding failure action (<code><a href=\"api/data/EntityOp#SAVE_ADD_ONE_ERROR\" class=\"code-anchor\">SAVE_ADD_ONE_ERROR</a></code>) immediately, without attempting an HTTP request.</p>\n<div class=\"alert is-important\">\n<p>This is the only way we've found to prevent a bad action from getting through the effect and triggering an HTTP request.</p>\n</div>\n<p><a id=\"action-skip\"></a></p>\n<h2 id=\"entityactionskip\"><em>EntityAction.skip</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#entityactionskip\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>skip</code> property tells downstream action receivers that they should skip the usual action processing.\nThis flag is usually missing and is implicitly false.</p>\n<p>The NgRx Data sets <code>skip=true</code> when you try to delete a new entity that has not been saved.\nWhen the <code><a href=\"api/data/EntityEffects#persist$\" class=\"code-anchor\">EntityEffects.persist$</a></code> method sees this flag set true on the <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> envelope,\nit skips the HTTP request and dispatches an appropriate <code>_SUCCESS</code> action with the\noriginal request payload.</p>\n<p>This feature allows NgRx Data to avoid making a DELETE request when you try to delete an entity\nthat has been added to the collection but not saved.\nSuch a request would have failed on the server because there is no such entity to delete.</p>\n<p>See the <a href=\"guide/data/entity-change-tracker\"><code>EntityChangeTracker</code></a> page for more about change tracking.</p>\n<p><a id=\"entity-cache-actions\"></a></p>\n<h2 id=\"entitycache-level-actions\">EntityCache-level actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-actions#entitycache-level-actions\"><i class=\"material-icons\">link</i></a></h2>\n<p>A few actions target the entity cache as a whole.</p>\n<p><code><a href=\"api/data/EntityCacheAction#SET_ENTITY_CACHE\" class=\"code-anchor\">SET_ENTITY_CACHE</a></code> replaces the entire cache with the object in the action payload,\neffectively re-initializing the entity cache to a known state.</p>\n<p><code>MERGE_ENTITY_CACHE</code> replaces specific entity collections in the current entity cache\nwith those collections present in the action payload.\nIt leaves the other current collections alone.</p>\n<p>Learn about them in the \"<a href=\"guide/data/entity-reducer#entity-cache-actions\">EntityReducer</a>\" document.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/architecture-overview\n - guide/data/entity-collection-service\n - guide/data/entity-metadata\n-->\n<!-- links from this doc:\n - api/data/EntityAction\n - api/data/EntityActionFactory\n - api/data/EntityActionFactory#create\n - api/data/EntityActionFactory#formatActionType\n - api/data/EntityActionOptions\n - api/data/EntityActionOptions#correlationId\n - api/data/EntityActionOptions#isOptimistic\n - api/data/EntityActionOptions#mergeStrategy\n - api/data/EntityActionPayload\n - api/data/EntityActionPayload#entityOp\n - api/data/EntityCacheAction#SET_ENTITY_CACHE\n - api/data/EntityCollectionReducer\n - api/data/EntityEffects\n - api/data/EntityEffects#persist$\n - api/data/EntityOp\n - api/data/EntityOp#QUERY_ALL\n - api/data/EntityOp#SAVE_ADD_ONE\n - api/data/EntityOp#SAVE_ADD_ONE_ERROR\n - api/data/MergeStrategy\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store/Action\n - api/store/Action#type\n - api/store/On\n - guide/data/entity-actions#action-and-entityaction\n - guide/data/entity-actions#action-error\n - guide/data/entity-actions#action-skip\n - guide/data/entity-actions#creating-an-entityaction\n - guide/data/entity-actions#entity-actions\n - guide/data/entity-actions#entityaction-consumers\n - guide/data/entity-actions#entityactionerror\n - guide/data/entity-actions#entityactionskip\n - guide/data/entity-actions#entitycache-level-actions\n - guide/data/entity-actions#handcrafted-entityaction\n - guide/data/entity-actions#tagging-the-entityaction\n - guide/data/entity-actions#where-are-the-entityactions\n - guide/data/entity-actions#why-this-matters\n - guide/data/entity-change-tracker\n - guide/data/entity-metadata\n - guide/data/entity-reducer#entity-cache-actions\n - guide/data/entity-services\n - guide/effects\n - guide/entity\n - guide/entity/adapter#adapter-collection-methods\n - guide/store-devtools\n - guide/store/actions\n - guide/store/reducers\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-actions.md?message=docs%3A%20describe%20your%20change...\n-->"
}