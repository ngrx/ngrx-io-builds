{
  "id": "guide/data/entity-services",
  "title": "EntityServices",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-services.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entityservices\">EntityServices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#entityservices\"><i class=\"material-icons\">link</i></a></h1>\n<p><code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code> is a facade over the NgRx Data services and the NgRx Data <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code>.</p>\n<h2 id=\"registry-of-entitycollectionservices\">Registry of <em>EntityCollectionServices</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#registry-of-entitycollectionservices\"><i class=\"material-icons\">link</i></a></h2>\n<p>It is primarily a registry of <a href=\"guide/data/entity-collection-service\">EntityCollectionServices</a>.</p>\n<p>Call its <code>EntityServices.getEntityCollectionService(entityName)</code> method to get the singleton\n<code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> for that entity type.</p>\n<p>Here's a component doing that.</p>\n<code-example header=\"heroes-component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a>, <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a> } from '@ngrx/data';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Hero } from '../../model';\n\n@Component({...})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class HeroesComponent implements OnInit {\n  heroesService: <a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a>&#x3C;Hero>;\n\n  constructor(entityServices: <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a>) {\n    this.heroesService = entityServices.getEntityCollectionService('Hero');\n  }\n}\n</code-example>\n<p>If the <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> service does not yet exist,\n<code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code> creates a default instance of that service and registers\nthat instance for future reference.</p>\n<h2 id=\"create-a-custom-entitycollectionservice\">Create a custom <em>EntityCollectionService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#create-a-custom-entitycollectionservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>You'll often create custom <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> classes with additional capabilities and convenience members,\nas explained in the <a href=\"guide/data/entity-collection-service\">EntityCollectionService</a> doc.</p>\n<p>Here's an example.</p>\n<code-example header=\"heroes.service.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>, <a href=\"api/data/EntityCollectionServiceElementsFactory\" class=\"code-anchor\">EntityCollectionServiceElementsFactory</a> } from '@ngrx/data';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Hero } from '../model';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class HeroesService extends <a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>&#x3C;Hero> {\n  constructor(elementsFactory: <a href=\"api/data/EntityCollectionServiceElementsFactory\" class=\"code-anchor\">EntityCollectionServiceElementsFactory</a>) {\n    super('Hero', elementsFactory);\n  }\n\n  // ... your special sauce here\n}\n</code-example>\n<p>Of course you must provide the custom service before you use it, typically in an Angular <code>NgModule</code>.</p>\n<code-example header=\"heroes.module.ts\">\n...\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { HeroesService } from './heroes.service';\n\n@NgModule({\n  imports: [...],\n  declarations: [...],\n  providers: [HeroesService]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class HeroesModule {}\n</code-example>\n<p>The following alternative example uses the <strong>preferred \"tree-shakable\" <code>Injectable()</code></strong>\nto provide the service in the root module.</p>\n<code-example language=\"javascript\">\n@Injectable({ providedIn: 'root' })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class HeroesService extends <a href=\"api/data/EntityCollectionServiceBase\" class=\"code-anchor\">EntityCollectionServiceBase</a>&#x3C;Hero> {\n  ...\n}\n</code-example>\n<p>You can inject that custom service directly into the component.</p>\n<code-example header=\"heroes.component.ts (v2)\">\n@Component({...})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class HeroesComponent {\n  heroes$: Observable&#x3C;Hero[]>;\n  <a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a>$: Observable&#x3C;boolean>;\n\n  constructor(public heroesService: HeroesService) {\n    this.heroes$ = this.heroesService.entities$;\n    this.loading$ = this.heroesService.loading$;\n  }\n  ...\n}\n</code-example>\n<p>Nothing new so far.\nBut we want to be able to get the <code>HeroesService</code> from <code>EntityServices.getEntityCollectionService()</code>\njust as we get the default collection services.</p>\n<p>This consistency will pay off when the app has a lot of collection services</p>\n<h2 id=\"register-the-custom-entitycollectionservice\">Register the custom <em>EntityCollectionService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#register-the-custom-entitycollectionservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>When you register an instance of a custom <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> with <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>, other callers of\n<code>EntityServices.getEntityCollectionService()</code> get that custom service instance.</p>\n<p>You'll want to do that before anything tries to acquire it via the <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>.</p>\n<p>One solution is to inject custom collection services in the constructor of the module that provides them,\nand register them there.</p>\n<p>The following example demonstrates.</p>\n<code-example header=\"app.module.ts\">\n@NgModule({ ... })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {\n  // Inject the service to ensure it registers with <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a>\n  constructor(\n    entityServices: <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a>,\n    // custom collection <a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>\n    hs: HeroesService,\n    vs: VillainsService\n    ){\n    entityServices.registerEntityCollectionServices([hs, vs]);\n  }\n}\n</code-example>\n<h2 id=\"sub-class-entityservices-for-application-class-convenience\">Sub-class <em>EntityServices</em> for application class convenience<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#sub-class-entityservices-for-application-class-convenience\"><i class=\"material-icons\">link</i></a></h2>\n<p>Another useful solution is to create a sub-class of <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>\nthat both injects the custom collection services\nand adds convenience members for your application.</p>\n<p>The following <code>AppEntityServices</code> demonstrates.</p>\n<code-example header=\"app-entity-services.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/EntityServicesBase\" class=\"code-anchor\">EntityServicesBase</a>, <a href=\"api/data/EntityServicesElements\" class=\"code-anchor\">EntityServicesElements</a> } from '@ngrx/data';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { SideKick } from '../../model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { HeroService, VillainService } from '../../<a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppEntityServices extends <a href=\"api/data/EntityServicesBase\" class=\"code-anchor\">EntityServicesBase</a> {\n  constructor(\n    elements: <a href=\"api/data/EntityServicesElements\" class=\"code-anchor\">EntityServicesElements</a>,\n\n    // Inject custom <a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>, register them with the <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a>, and expose in API.\n    readonly heroesService: HeroesService,\n    readonly villainsService: VillainsService\n  ) {\n    super(elements);\n    this.registerEntityCollectionServices([heroesService, villainsService]);\n  }\n\n  /** get the (default) SideKicks service */\n  get sideKicksService() {\n    return this.getEntityCollectionService&#x3C;SideKick>('SideKick');\n  }\n}\n</code-example>\n<p><code>AppEntityService</code> first injects the <code><a href=\"api/data/EntityServicesElements\" class=\"code-anchor\">EntityServicesElements</a></code> helper which it passes straight through to the base class constructor.\nThe \"elements\" enclose the ingredients that the base class needs to make and manage the entities you described in metadata.</p>\n<p>Then it injects your two custom collection services, <code>HeroesService</code> and <code>VillainsService</code>,\nand exposes them directly to consumers as convenience properties for accessing those services.</p>\n<p>In this example, we don't need a custom collection service for the <code>SideKick</code> entity.\nThe default service will do.</p>\n<p>Nonetheless, we add a <code>sideKicksService</code> property that gets or creates a default service for <code>SideKick</code>.\nConsumers will find this more discoverable and easier to call than <code><a href=\"api/data/EntityServicesBase#getEntityCollectionService\" class=\"code-anchor\">getEntityCollectionService()</a></code>.</p>\n<p>Of course the base class <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code> members, such as <code><a href=\"api/data/EntityServicesBase#getEntityCollectionService\" class=\"code-anchor\">getEntityCollectionService()</a></code>, <code>entityCache$</code>,\nand <code><a href=\"api/data/EntityServicesBase#registerEntityCollectionService\" class=\"code-anchor\">registerEntityCollectionService()</a></code> are all available.</p>\n<p>Next, provide <code>AppEntityServices</code> in an Angular <code>NgModule</code> both as itself (<code>AppEntityServices</code>)\nand as an alias for <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>.</p>\n<p>In this manner, an application class references this same <code>AppEntityServices</code> service instance,\nwhether it injects <code>AppEntityServices</code> or <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>.</p>\n<p>See it here in the sample app.</p>\n<code-example header=\"store/entity/entity-module\">\n@NgModule({\n  imports: [ ... ],\n  providers: [\n    AppEntityServices,\n    { provide: <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a>, useExisting: AppEntityServices },\n    ...\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class EntityStoreModule { ... }\n</code-example>\n<h2 id=\"access-multiple-entitycollectionservices\">Access multiple <em>EntityCollectionServices</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-services#access-multiple-entitycollectionservices\"><i class=\"material-icons\">link</i></a></h2>\n<p>A complex component may need access to multiple entity collections.\nThe <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code> registry makes this easy,\neven when the <code>EntityCollectionServices</code> are customized for each entity type.</p>\n<p>You'll only need <strong>a single injected constructor parameter</strong>, the <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>.</p>\n<code-example header=\"character-container.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a>, <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a> } from '@ngrx/data';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { SideKick } from '../../model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { HeroService, VillainService } from '../../<a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>';\n\n@Component({...})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class CharacterContainerComponent implements OnInit {\n  heroesService: HeroService;\n  sideKicksService: <a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a>&#x3C;SideKick>;\n  villainService: VillainService;\n\n  heroes$: Observable&#x3C;Hero>;\n  ...\n  constructor(entityServices: <a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a>) {\n    this.heroesService = entityServices.getEntityCollectionService('Hero');\n    this.sidekicksService = entityServices.getEntityCollectionService('SideKick');\n    this.villainService = entityServices.getEntityCollectionService('Villain');\n\n    this.heroes$ = this.heroesService.entities$;\n    ...\n  }\n  ...\n}\n</code-example>\n<p>An application-specific sub-class of <code><a href=\"api/data/EntityServices\" class=\"code-anchor\">EntityServices</a></code>, such as the <code>AppEntityServices</code> above,\nmakes this a little nicer.</p>\n<code-example header=\"character-container.component.ts (with AppEntityServices)\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AppEntityServices } from '../../<a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>';\n\n@Component({...})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class CharacterContainerComponent implements OnInit {\n\n  heroes$: Observable&#x3C;Hero>;\n  ...\n  constructor(private appEntityServices: AppEntityServices) {\n    this.heroes$ = appEntityServices.heroesService.entities$;\n    ...\n  }\n  ...\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/architecture-overview\n - guide/data/entity-actions\n-->\n<!-- links from this doc:\n - api/data/EntityCache\n - api/data/EntityCollection#loading\n - api/data/EntityCollectionService\n - api/data/EntityCollectionServiceBase\n - api/data/EntityCollectionServiceElementsFactory\n - api/data/EntityDataService#services\n - api/data/EntityServices\n - api/data/EntityServicesBase\n - api/data/EntityServicesBase#getEntityCollectionService\n - api/data/EntityServicesBase#registerEntityCollectionService\n - api/data/EntityServicesElements\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - guide/data/entity-collection-service\n - guide/data/entity-services#access-multiple-entitycollectionservices\n - guide/data/entity-services#create-a-custom-entitycollectionservice\n - guide/data/entity-services#entityservices\n - guide/data/entity-services#register-the-custom-entitycollectionservice\n - guide/data/entity-services#registry-of-entitycollectionservices\n - guide/data/entity-services#sub-class-entityservices-for-application-class-convenience\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-services.md?message=docs%3A%20describe%20your%20change...\n-->"
}