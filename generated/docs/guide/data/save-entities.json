{
  "id": "guide/data/save-entities",
  "title": "Saving Multiple Entities",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/save-entities.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"saving-multiple-entities\">Saving Multiple Entities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#saving-multiple-entities\"><i class=\"material-icons\">link</i></a></h1>\n<p>Many apps must save several entities at the same time in the same transaction.</p>\n<p>Multiple entity saves are a first class feature.\nBy \"first class\" we mean that NgRx Data offers a built-in, multiple entity save solution that\nis consistent with NgRx Data itself:</p>\n<ul>\n<li>defines a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>, describing <code>ChangeOperations</code> to be performed on multiple entities of multiple types.</li>\n<li>has a set of <code>SAVE_ENTITIES...</code> cache-level actions.</li>\n<li>has an <code><a href=\"api/data/EntityCacheDispatcher\" class=\"code-anchor\">EntityCacheDispatcher</a></code> to dispatch those actions.</li>\n<li>offers <code><a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a></code> that sends <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> async requests to the server and\nreturns results as <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> or <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_ERROR\" class=\"code-anchor\">SAVE_ENTITIES_ERROR</a></code> actions.</li>\n<li>offers a default <code><a href=\"api/data/EntityCacheDataService\" class=\"code-anchor\">EntityCacheDataService</a></code> to make those http server requests.</li>\n<li>integrates with change tracking.</li>\n<li>delegates each collection-level change to the (customizable) <code>entity-collection-reducer-methods</code>.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>You could implement multiple-entity saves yourself by, prior to version 6.1.\nYou could define your own protocol and manipulate the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> directly by dispatching <code><a href=\"api/data/EntityCacheAction#SET_ENTITY_CACHE\" class=\"code-anchor\">SET_ENTITY_CACHE</a></code>\nafter updating a copy of the current cache before and after save.\nThe collection-level reducers in <code>entity-collection-reducer-methods</code> and the NgRx <code>EntityAdapters</code> would help.</p>\n<p>It wouldn't be easy and there are many steps that can be easily overlooked. But you could do it.</p>\n</div>\n<h3 id=\"save-with-entitycachedispatchersaveentities\">Save with <em>EntityCacheDispatcher.saveEntities()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#save-with-entitycachedispatchersaveentities\"><i class=\"material-icons\">link</i></a></h3>\n<p>This NgRx Data version includes a new <code><a href=\"api/data/EntityCacheDispatcher\" class=\"code-anchor\">EntityCacheDispatcher</a></code> whose\nmethods make it easier to create and dispatch all of the entity cache actions.</p>\n<p>Save a bunch of entity changes with the <code>saveEntities()</code> dispatcher method.\nCall it with a URL and a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> describing the entity changes that the server API (at the URL endpoint) should save.</p>\n<p>The sample application demonstrates a simple <code>saveEntities</code> scenario.\nA button on the <em>Villains</em> page deletes all of the villains.</p>\n<p>In the following example, we want to add a <code>Hero</code> and delete two <code>Villains</code> in the same transaction.\nWe assume a server is ready to handle such a request.</p>\n<p>First create the changes (each a <code><a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a></code>) for the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>.</p>\n<code-example linenums=\"false\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/ChangeSetOperation\" class=\"code-anchor\">ChangeSetOperation</a> } from '@ngrx/data';\n...\nconst changes: <a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a>[] = [\n  {\n    op: <a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">ChangeSetOperation.Add</a>,\n    entityName: 'Hero',\n    entities: [hero]\n  },\n  {\n    op: <a href=\"api/data/ChangeSetOperation#Delete\" class=\"code-anchor\">ChangeSetOperation.Delete</a>,\n    entityName: 'Villain',\n    entities: [2, 3] // delete by their <a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a>\n  }\n];\n</code-example>\n<p>The <code><a href=\"api/data/changeSetItemFactory\" class=\"code-anchor\">changeSetItemFactory</a></code> makes it easier to write these changes.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/changeSetItemFactory\" class=\"code-anchor\">changeSetItemFactory</a> as cif } from '@ngrx/data';\n...\nconst changes: <a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a>[] = [\n  cif.add('Hero', hero),\n  cif.delete('Villain', [2, 3])\n];\n</code-example>\n<p>Now dispatch a <code>saveEntities</code> with a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> for those changes.</p>\n<code-example language=\"typescript\">\nconst changeSet: <a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a> = { changes, tag: 'Hello World'}\n\ncacheEntityDispatcher.saveEntities(changeSet, saveUrl).subscribe(\n  result => log('Saved <a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a>')\n);\n</code-example>\n<p>The <code>saveEntities(changeSet, saveUrl)</code> returns an <code>Observable&#x3C;<a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a>></code>,\nwhich emits a new <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> after the server API (at the <code>saveUrl</code> endpoint) returns a successful response.</p>\n<p>That emitted <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> holds the server's response data for all affected entities.</p>\n<p>The app can wait for the <code>saveEntities()</code> observable to terminate (either successfully or with an error), before proceeding (e.g., routing to another page).</p>\n<h4 id=\"how-it-works\">How it works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#how-it-works\"><i class=\"material-icons\">link</i></a></h4>\n<p>Internally, the method creates a <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> action whose payload data includes the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>.\nThe action also has the URL to which the requested save should be sent and a <code><a href=\"api/data/EntityActionOptions#correlationId\" class=\"code-anchor\">correlationId</a></code> (see below).</p>\n<p>The method dispatches this action to the NgRx store where it is processed by the <code>EntityCacheReducer</code>.\nIf the action is \"optimistic\", the reducer updates the cache with changes immediately.</p>\n<p>Then the <code><a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a></code> picks up the <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> action and sends a \"save changes\" request to\nthe server's API endpoint (the URL).</p>\n<p>If the request succeeds, the server returns data for all of the changed (and deleted) entities.\nThe <code><a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a></code> packages that data into a <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> action and dispatches it to the store.</p>\n<p>The <code>EntityCacheReducer</code> for the <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> action\nupdates the cache with the (possibly altered) entity data from the server.</p>\n<p>Meanwhile, the <code>Observable&#x3C;<a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a>></code> from the <code>saveEntities()</code> dispatcher method is\nwatching the stream of actions dispatched to the store.\nWhen a <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> (or <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_ERROR\" class=\"code-anchor\">SAVE_ENTITIES_ERROR</a></code>) action emerges and\nit has the same <code><a href=\"api/data/EntityActionOptions#correlationId\" class=\"code-anchor\">correlationId</a></code> as the original <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> action,\nthe observable emits the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> (or error).</p>\n<p>The subscriber to that observable now knows that this particular <em>save entities</em> request is \"done\".</p>\n<div class=\"alert is-helpful\">\n<p>This complicated dance is standard NgRx. Fortunately, all you have to know is that you can call <code>saveEntities()</code> with the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> and URL, then wait for the returned observable to emit.</p>\n</div>\n<h4 id=\"changeset\"><em>ChangeSet</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#changeset\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> interface is a simple structure with only one critical property,\n<code>changes</code>, which holds the entity data to save.</p>\n<code-example header=\"ChangeSet\" linenums=\"false\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a>&#x3C;T = any> {\n  /** An array of ChangeSetItems to be processed in the array order */\n  changes: <a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a>[];\n\n  /**\n   * An arbitrary, serializable object that should travel with the ChangeSet.\n   * Meaningful to the <a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a> producer and consumer. Ignored by NgRx Data.\n   */\n  <a href=\"api/data/ChangeSet#extras\" class=\"code-anchor\">extras</a>?: T;\n\n  /** An arbitrary string, identifying the <a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a> and perhaps its purpose */\n  tag?: string;\n}\n\n</code-example>\n<p>At the heart of it is <code>changes</code>, an array of <code>ChangeSetItems</code> that describes a change operation to be performed with one or more entities of a particular type.</p>\n<p>For example,</p>\n<ul>\n<li>a <code><a href=\"api/data/ChangeSetAdd\" class=\"code-anchor\">ChangeSetAdd</a></code> could add 3 new <code>Hero</code> entities to the server's <code>Hero</code> collection.</li>\n<li>a <code><a href=\"api/data/ChangeSetUpdate\" class=\"code-anchor\">ChangeSetUpdate</a></code> could update 2 existing <code>Villain</code> entities.</li>\n<li>a <code><a href=\"api/data/ChangeSetDelete\" class=\"code-anchor\">ChangeSetDelete</a></code> could delete a <code>SideKick</code> entity by its primary key.</li>\n<li>a <code><a href=\"api/data/ChangeSetUpsert\" class=\"code-anchor\">ChangeSetUpsert</a></code> could add two new <code>SuperPower</code> entities and update a third <code>SuperPower</code> entity.</li>\n</ul>\n<p>There are four <code>ChangeSetOperations</code></p>\n<code-example header=\"ChangeSetOperation\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> enum <a href=\"api/data/ChangeSetOperation\" class=\"code-anchor\">ChangeSetOperation</a> {\n  <a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">Add</a> = '<a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">Add</a>',\n  <a href=\"api/data/ChangeSetOperation#Delete\" class=\"code-anchor\">Delete</a> = '<a href=\"api/data/ChangeSetOperation#Delete\" class=\"code-anchor\">Delete</a>',\n  <a href=\"api/entity/Update\" class=\"code-anchor\">Update</a> = '<a href=\"api/entity/Update\" class=\"code-anchor\">Update</a>',\n  <a href=\"api/data/ChangeSetOperation#Upsert\" class=\"code-anchor\">Upsert</a> = '<a href=\"api/data/ChangeSetOperation#Upsert\" class=\"code-anchor\">Upsert</a>'\n}\n</code-example>\n<div class=\"alert is-helpful\">\n<p><code><a href=\"api/data/ChangeSetOperation#Upsert\" class=\"code-anchor\">Upsert</a></code> is a request to treat the entities in the <code><a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a></code> as <em>either</em> new entities or updates to <em>existing</em> entities.</p>\n</div>\n<p>Each kind of <code><a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a></code> follows a pattern similar to <code><a href=\"api/data/ChangeSetAdd\" class=\"code-anchor\">ChangeSetAdd</a></code>.</p>\n<code-example header=\"ChangeSetAdd\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/data/ChangeSetAdd\" class=\"code-anchor\">ChangeSetAdd</a>&#x3C;T = any> {\n  op: <a href=\"api/data/ChangeSetOperation#Add\" class=\"code-anchor\">ChangeSetOperation.Add</a>;\n  entityName: string;\n  entities: T[];\n}\n</code-example>\n<p>The <code><a href=\"api/data/ChangeSetItem\" class=\"code-anchor\">ChangeSetItem</a></code> flavors all have <code>op</code>, <code>entityName</code> and <code>entities</code> properties.\nThey differ substantively only in the nature of the <code>entities</code> array which corresponds to the change operation:</p>\n<ul>\n<li>Add: entities</li>\n<li>Delete: primary keys of the entities to delete</li>\n<li>Update: NgRx Entity <code><a href=\"api/entity/Update\" class=\"code-anchor\">Update</a>&#x3C;T></code>s</li>\n<li>Upsert: entities</li>\n</ul>\n<h4 id=\"pessimistic--optimistic-save\">Pessimistic / Optimistic save<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#pessimistic--optimistic-save\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>EntityCacheDispatcher.saveEntities</code> dispatches the <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> action (with its <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>) to the store where it is processed by the <code>EntityCacheReducer</code>.</p>\n<p>If the action is \"pessimistic\", the reducer sets the collection <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a></code> flags but doesn't update the entities in cache.\nThe reducer for the <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> action, whose payload holds the successfully saved entities, will update the cached entities.</p>\n<p>If the action is \"optimistic\", the reducer applies the changes to the cache immediately, before you send them to the server.</p>\n<p>You can specify \"optimistic\" or \"pessimistic\" in the <code><a href=\"api/data/RequestData#options\" class=\"code-anchor\">options</a></code> parameter.\nIf you don't specify this option, NgRx Data uses the default value in\n<code><a href=\"api/data/EntityDispatcherDefaultOptions#optimisticSaveEntities\" class=\"code-anchor\">EntityDispatcherDefaultOptions.optimisticSaveEntities</a></code>.\nIt is <code>false</code> (pessimistic) by default.</p>\n<h4 id=\"specify-your-own-defaults\">Specify your own defaults<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#specify-your-own-defaults\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can provide alternative defaults.</p>\n<code-example language=\"typescript\">\n {\n  provide: <a href=\"api/data/EntityDispatcherDefaultOptions\" class=\"code-anchor\">EntityDispatcherDefaultOptions</a>,\n  useValue: myDispatcherDefaultOptions\n}\n</code-example>\n<h4 id=\"server\">Server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#server\"><i class=\"material-icons\">link</i></a></h4>\n<p>The server API (the usual recipient of a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>) must be able to process the request.\nNgRx Data doesn't know if the API can or cannot process a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> (and that includes whether the server can or cannot handle upserts).</p>\n<p>As always, make sure only to send something that the server API can handle.</p>\n<h4 id=\"entitycacheeffects\">EntityCacheEffects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#entitycacheeffects\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can handle the async HTTP <em>save changes</em> request yourself, making your own calls to the server in your own way.</p>\n<p>Your solution can use the <code>EntityCacheDispacher</code> to dispatch <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code>, <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> and <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_ERROR\" class=\"code-anchor\">SAVE_ENTITIES_ERROR</a></code> actions for updating the cache and managing the <code><a href=\"api/data/ChangeState\" class=\"code-anchor\">ChangeState</a></code> of the entities in the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>.</p>\n<p>Perhaps better, you can let the <code><a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a></code> handle this for you in a manner similar to the v6 <code><a href=\"api/data/EntityEffects\" class=\"code-anchor\">EntityEffects</a></code> for single-entity saves.</p>\n<p>The <code><a href=\"api/data/EntityCacheEffects#saveEntities$\" class=\"code-anchor\">EntityCacheEffects.saveEntities$</a></code> effect listens for <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> and makes a request to the designated URL via the (new) <code><a href=\"api/data/EntityCacheDataService\" class=\"code-anchor\">EntityCacheDataService</a></code>.\nIt takes the response and dispatches either a <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> or <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_ERROR\" class=\"code-anchor\">SAVE_ENTITIES_ERROR</a></code>, as appropriate.</p>\n<div class=\"alert is-helpful\">\n<p>If you prefer to handle server interaction yourself,\nyou can disable the <code><a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a></code> by providing a null implementation, in your <code>NgModule</code>, e.g.,</p>\n<code-example language=\"typescript\">\n{ provide: <a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a>: useValue: {} }\n</code-example>\n</div>\n<h4 id=\"entitycachedataservice\">EntityCacheDataService<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#entitycachedataservice\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/data/EntityCacheDataService\" class=\"code-anchor\">EntityCacheDataService</a></code> constructs and POSTS the actual request to the given API URL.</p>\n<p>We anticipate that most server API implementors will not support the NgRx Entity <code><a href=\"api/entity/Update\" class=\"code-anchor\">Update</a></code> structure within the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>.\nSo the <code><a href=\"api/data/EntityCacheDataService#saveEntities\" class=\"code-anchor\">EntityCacheDataService.saveEntities()</a></code> method\nextracts the <code>changes</code> from the <code>Updates&#x3C;T>[]</code> and sends these to the server; it then reconstructs the <code>Updates&#x3C;T>[]</code> entities in from the server response so that the NgRx Data consumer of the response sees those <code><a href=\"api/entity/Update\" class=\"code-anchor\">Update</a></code> structures.</p>\n<p>As always, you can provide an alternative implementation:</p>\n<code-example language=\"typescript\">\n{ provide: <a href=\"api/data/EntityCacheDataService\" class=\"code-anchor\">EntityCacheDataService</a>: useClass: MyCacheDataService }\n</code-example>\n<h4 id=\"updating-the-store-with-server-response-data\">Updating the store with server response data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#updating-the-store-with-server-response-data\"><i class=\"material-icons\">link</i></a></h4>\n<p>If the save was pessimistic, the EntityCache is unchanged until the server responds.\nYou need the results from the server to update the cache.</p>\n<div class=\"alert is-helpful\">\n<p>The changes are already in cache with an optimistic save.\nBut the server might have made additional changes to the data,\nin which case you'd want to (re)apply the server response data to cache.</p>\n</div>\n<p>The server API is supposed to return all changed entity data in the\nform of a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>.</p>\n<p>Often the server processes the saved entities without changing them.\nThere's no real need for the server to return the data.\nThe original request <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> has all the information necessary to update the cache.\nResponding with a <code>\"204-No Content\"</code> instead would save time, bandwidth, and processing.</p>\n<p>The server can respond <code>\"204-No Content\"</code> and send back nothing.\nThe <code><a href=\"api/data/EntityCacheEffects\" class=\"code-anchor\">EntityCacheEffects</a></code> recognizes this condition and\nreturns a success action <em>derived</em> from the original request <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>.</p>\n<p>If the save was pessimistic, it returns a <code><a href=\"api/data/SaveEntitiesSuccess\" class=\"code-anchor\">SaveEntitiesSuccess</a></code> action with the original <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> in the payload.</p>\n<p>If the save was optimistic, the changes are already in the cache and there's no point in updating the cache.\nInstead, the effect returns a merge observable that clears the loading flags\nfor each entity type in the original <code>CacheSet</code>.</p>\n<h4 id=\"new-entityops-for-multiple-entity-save\">New <em>EntityOPs</em> for multiple entity save<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#new-entityops-for-multiple-entity-save\"><i class=\"material-icons\">link</i></a></h4>\n<p>When the server responds with a <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>, or the effect re-uses the original request <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code>, the effect returns a <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\" class=\"code-anchor\">SAVE_ENTITIES_SUCCESS</a></code> action with the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> in the payload.</p>\n<p>This <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> has the same structure as the one in the <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code> action, which was the source of the HTTP request.</p>\n<p>The <code>EntityCacheReducer</code> converts the <code><a href=\"api/data/ChangeSet#changes\" class=\"code-anchor\">ChangeSet.changes</a></code> into\na sequence of <code>EntityActions</code> to the entity collection reducers.</p>\n<p>The <code>store</code> never sees these reducer calls (and you won't see them in the redux tools).\nThey are applied synchronously, in succession to an instance of the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> object.</p>\n<p>After all <code><a href=\"api/data/ChangeSet#changes\" class=\"code-anchor\">ChangeSet.changes</a></code> have been reduced, the <code>EntityCacheReducer</code> returns the updated <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> and the NgRx <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> gets the new, fully-updated cache in one shot.</p>\n<p>That should mean that the cache is in a stable state, with all relationships updated, before any code outside the store hears of the changes.</p>\n<p>At that point, all affected entity <code>selectors$</code> will emit.</p>\n<h4 id=\"new-entityops-for-multiple-entity-save-1\">New <em>EntityOPs</em> for multiple entity save<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#new-entityops-for-multiple-entity-save-1\"><i class=\"material-icons\">link</i></a></h4>\n<p>As always, the entity collection reducers know what to do based on the <code>EntityAction.entityOp</code>.</p>\n<p>Before v6.1, the <em>save</em> <code>EntityOps</code> only worked for single entities.\nThis version adds multi-entity save actions to <code><a href=\"api/data/EntityOp\" class=\"code-anchor\">EntityOp</a></code>:\n<code>SAVE_ADD_MANY...</code>,<code>SAVE_DELETE_MANY...</code>, <code>SAVE_UPDATE_MANY...</code>,<code>SAVE_UPSERT_MANY...</code>.</p>\n<div class=\"alert is-helpful\">\n<p>These ops do not have corresponding <code><a href=\"api/data/EntityCommands\" class=\"code-anchor\">EntityCommands</a></code> because a multi-entity save is dispatched (via <code>SAVE_ENTITIES..</code> actions) to the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> reducer,\nnot to a collection reducer (at least not in this version).</p>\n</div>\n<h4 id=\"transactions\">Transactions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#transactions\"><i class=\"material-icons\">link</i></a></h4>\n<p>It is up to the server to process the <code><a href=\"api/data/ChangeSet\" class=\"code-anchor\">ChangeSet</a></code> as a transaction.\nThat's easy if the server-side store is a relational database.</p>\n<p>If your store doesn't support transactions, you'll have to decide if the multiple-entity save facility is right for you.</p>\n<p>On the NgRx Data client, it is \"transactional\" in the sense that a successful result returned by the server will be applied to the cache all at once.\nIf the server returns an error result, the cache is not touched.</p>\n<p><strong><em>Important</em></strong>: if you saved \"optimisitically\", NgRx Data updates the cache <em>before</em> sending the request to the server.</p>\n<p>NgRx Data <em>does not roll back</em> the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> automatically when an <em>optimistic save</em> fails.</p>\n<p>Fortunately, the NgRx Data collection reducers updated the <code><a href=\"api/data/ChangeState\" class=\"code-anchor\">ChangeState</a></code> of the affected entities <em>before merging</em> the changes into the cache (see the NgRx Data <code>ChangeTracker</code>).</p>\n<p>You have good options if the save fails.</p>\n<ul>\n<li>You <em>could</em> rollback using the <code>ChangeTracker</code>.</li>\n<li>You could try again.</li>\n<li>You could fail the app.</li>\n</ul>\n<p>Let your failure analysis and application business rules guide your decision.</p>\n<h4 id=\"cancellation\">Cancellation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/save-entities#cancellation\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can try to cancel a save by dispatching the <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_CANCEL\" class=\"code-anchor\">SAVE_ENTITIES_CANCEL</a></code> action with the\n<strong>correlation id</strong> of the <em>save action</em> that you want to cancel.</p>\n<p>An optional <code>EntityNames</code> array argument tells the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> reducer to turn off the <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a></code> flags\nfor the collections named in that array (these flags would have been turned on by <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES\" class=\"code-anchor\">SAVE_ENTITIES</a></code>).\nYou can also supply a cancellation \"reason\" and the usual action tag.</p>\n<p>The <code><a href=\"api/data/EntityCacheEffects#saveEntitiesCancel$\" class=\"code-anchor\">EntityCacheEffects.saveEntitiesCancel$</a></code> watches for this action and is piped into\nthe <code><a href=\"api/data/EntityCacheEffects#saveEntities$\" class=\"code-anchor\">EntityCacheEffects.saveEntities$</a></code>, where it can try to cancel the save operation\nor at least prevent the server response from updating the cache.</p>\n<div class=\"alert is-helpful\">\n<p>It's not obvious that this is ever a great idea.\nYou cannot tell the server to cancel this way and cannot know if the server did or did not save.\nNor can you count on processing the cancel request before the client receives the server response\nand applies the changes on the server or to the cache.</p>\n<p>If you cancel before the server results arrive, the <code>EntityCacheEffect</code> will not try to update\nthe cache with late arriving server results.\nThe effect will issue a <code><a href=\"api/data/EntityCacheAction#SAVE_ENTITIES_CANCELED\" class=\"code-anchor\">SAVE_ENTITIES_CANCELED</a></code> action instead.\nThe <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> reducer ignores this action but you can listen for it among the store actions\nand thus know that the cancellation took effect on the client.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/ChangeSet\n - api/data/ChangeSet#changes\n - api/data/ChangeSet#extras\n - api/data/ChangeSetAdd\n - api/data/ChangeSetDelete\n - api/data/ChangeSetItem\n - api/data/ChangeSetOperation\n - api/data/ChangeSetOperation#Add\n - api/data/ChangeSetOperation#Delete\n - api/data/ChangeSetOperation#Upsert\n - api/data/ChangeSetUpdate\n - api/data/ChangeSetUpsert\n - api/data/ChangeState\n - api/data/EntityActionOptions#correlationId\n - api/data/EntityCache\n - api/data/EntityCacheAction#SAVE_ENTITIES\n - api/data/EntityCacheAction#SAVE_ENTITIES_CANCEL\n - api/data/EntityCacheAction#SAVE_ENTITIES_CANCELED\n - api/data/EntityCacheAction#SAVE_ENTITIES_ERROR\n - api/data/EntityCacheAction#SAVE_ENTITIES_SUCCESS\n - api/data/EntityCacheAction#SET_ENTITY_CACHE\n - api/data/EntityCacheDataService\n - api/data/EntityCacheDataService#saveEntities\n - api/data/EntityCacheDispatcher\n - api/data/EntityCacheEffects\n - api/data/EntityCacheEffects#saveEntities$\n - api/data/EntityCacheEffects#saveEntitiesCancel$\n - api/data/EntityCollection#loading\n - api/data/EntityCommands\n - api/data/EntityDispatcherDefaultOptions\n - api/data/EntityDispatcherDefaultOptions#optimisticSaveEntities\n - api/data/EntityEffects\n - api/data/EntityOp\n - api/data/RequestData#options\n - api/data/SaveEntitiesSuccess\n - api/data/changeSetItemFactory\n - api/entity/EntityState#ids\n - api/entity/Update\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/Store\n - guide/data/save-entities#cancellation\n - guide/data/save-entities#changeset\n - guide/data/save-entities#entitycachedataservice\n - guide/data/save-entities#entitycacheeffects\n - guide/data/save-entities#how-it-works\n - guide/data/save-entities#new-entityops-for-multiple-entity-save\n - guide/data/save-entities#new-entityops-for-multiple-entity-save-1\n - guide/data/save-entities#pessimistic--optimistic-save\n - guide/data/save-entities#save-with-entitycachedispatchersaveentities\n - guide/data/save-entities#saving-multiple-entities\n - guide/data/save-entities#server\n - guide/data/save-entities#specify-your-own-defaults\n - guide/data/save-entities#transactions\n - guide/data/save-entities#updating-the-store-with-server-response-data\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/save-entities.md?message=docs%3A%20describe%20your%20change...\n-->"
}