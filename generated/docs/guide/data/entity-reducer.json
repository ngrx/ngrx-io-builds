{
  "id": "guide/data/entity-reducer",
  "title": "Entity Reducer",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-reducer.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entity-reducer\">Entity Reducer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#entity-reducer\"><i class=\"material-icons\">link</i></a></h1>\n<p>The <em>Entity Reducer</em> is the <em>master reducer</em> for all entity collections in the stored entity cache.</p>\n<p><a id=\"reducer-factory\"></a></p>\n<p>The library doesn't have a named <em>entity reducer</em> type.\nRather it relies on the <strong><code><a href=\"api/data/EntityCacheReducerFactory#create\" class=\"code-anchor\">EntityCacheReducerFactory.create()</a></code></strong> method to produce that reducer,\nwhich is an <em>NgRx</em> <code><a href=\"api/store/ActionReducer\" class=\"code-anchor\">ActionReducer</a>&#x3C;<a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a>, <a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a>></code>.</p>\n<p>Such a reducer function takes an <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> state and an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> action\nand returns an <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> state.</p>\n<p>The reducer responds either to an <a href=\"guide/data/entity-reducer#entity-cache-actions\">EntityCache-level action</a> (rare)\nor to an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> targeting an entity collection (the usual case).\nAll other kinds of <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code> are ignored and the reducer simply returns the given <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code>.</p>\n<div class=\"alert is-helpful\">\n<p>The reducer filters specifically for the action's <code>entityType</code> property.\nIt treats any action with an <code>entityType</code> property as an <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code>.</p>\n</div>\n<p>The <em>entity reducer's</em> primary job is to</p>\n<ul>\n<li>extract the <code><a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a></code> for the action's entity type from the <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code>.</li>\n<li>create a new, <a href=\"guide/data/entity-reducer#initialize\">initialized entity collection</a> if necessary.</li>\n<li>get or create the <code><a href=\"api/data/EntityCollectionReducer\" class=\"code-anchor\">EntityCollectionReducer</a></code> for that entity type.</li>\n<li>call the <em>entity collection reducer</em> with the collection and the action.</li>\n<li>replace the <em>entity collection</em> in the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> with the new collection returned by the <em>entity collection reducer</em>.</li>\n</ul>\n<h2 id=\"entitycollectionreducers\"><em>EntityCollectionReducers</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#entitycollectionreducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <code><a href=\"api/data/EntityCollectionReducer\" class=\"code-anchor\">EntityCollectionReducer</a></code> applies <em>actions</em> to an <code><a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a></code> in the <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> held in the <em>NgRx store</em>.</p>\n<p>There is always a reducer for a given entity type.\nThe <code><a href=\"api/data/EntityCollectionReducerFactory\" class=\"code-anchor\">EntityCollectionReducerFactory</a></code> maintains a registry of them.\nIf it can't find a reducer for the entity type, it <a href=\"guide/data/entity-reducer#collection-reducer-factory\">creates one</a>, with the help\nof the injected <code><a href=\"api/data/EntityCollectionReducerFactory\" class=\"code-anchor\">EntityCollectionReducerFactory</a></code>, and registers that reducer\nso it can use it again next time.</p>\n<p><a id=\"register\"></a></p>\n<h3 id=\"register-custom-reducers\">Register custom reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#register-custom-reducers\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can create a custom reducer for an entity type and\nregister it directly with <code><a href=\"api/data/EntityCollectionReducerRegistry#registerReducer\" class=\"code-anchor\">EntityCollectionReducerRegistry.registerReducer()</a></code>.</p>\n<p>You can register several custom reducers at the same time\nby calling <code>EntityCollectionReducerRegistry.registerReducers(reducerMap)</code> where\nthe <code>reducerMap</code> is a hash of reducers, keyed by <em>entity-type-name</em>.</p>\n<p><a id=\"collection-reducer-factory\"></a></p>\n<h2 id=\"default-entitycollectionreducer\">Default <em>EntityCollectionReducer</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#default-entitycollectionreducer\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/data/EntityCollectionReducerFactory\" class=\"code-anchor\">EntityCollectionReducerFactory</a></code> creates a default reducer that leverages\nthe capabilities of the NgRx <code><a href=\"api/entity/EntityAdapter\" class=\"code-anchor\">EntityAdapter</a></code>,\nguided by the app's <a href=\"guide/data/entity-metadata\"><em>entity metadata</em></a>.</p>\n<p>The default reducer decides what to do based on the <code>EntityAction.op</code> property,whose string value it expects will be a member of the <code><a href=\"api/data/EntityOp\" class=\"code-anchor\">EntityOp</a></code> enum.</p>\n<p>Many of the <code><a href=\"api/data/EntityOp\" class=\"code-anchor\">EntityOp</a></code> values are ignored; the reducer simply returns the\n<em>entity collection</em> as given.</p>\n<p>Certain persistence-oriented ops, for example,\nare meant to be handled by the NgRx Data <a href=\"guide/data/entity-effects\"><code>persist$</code> effect</a>.\nThey don't update the collection data (other than, perhaps, to flip the <code><a href=\"api/data/EntityCollection#loading\" class=\"code-anchor\">loading</a></code> flag).</p>\n<p>Others add, update, and remove entities from the collection.</p>\n<div class=\"alert is-helpful\">\n<p>Remember that <em>immutable objects</em> are a core principle of the <em>redux/NgRx</em> pattern.\nThese reducers don't actually change the original collection or any of the objects in it.\nThey make a copy of the collection and only update copies of the objects within the collection.</p>\n</div>\n<p>See the NgRx Entity <a href=\"guide/entity/adapter#adapter-collection-methods\"><code>EntityAdapter</code> collection methods</a> for a basic guide to the\ncache altering operations performed by the default <em>entity collection reducer</em>.</p>\n<p>The <code><a href=\"api/data/EntityCollectionReducerFactory\" class=\"code-anchor\">EntityCollectionReducerFactory</a></code> class and its tests are the authority on how the default reducer actually works.</p>\n<p><a id=\"initialize\"></a></p>\n<h2 id=\"initializing-collection-state\">Initializing collection state<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#initializing-collection-state\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>NgRxDataModule</code> adds an empty <code><a href=\"api/data/EntityCache\" class=\"code-anchor\">EntityCache</a></code> to the NgRx Data store.\nThere are no collections in this cache.</p>\n<p>If the master <code>EntityReducer</code> can't find a collection for the <em>action</em>'s entity type,\nit creates a new, initialized collection with the help of the <code><a href=\"api/data/EntityCollectionCreator\" class=\"code-anchor\">EntityCollectionCreator</a></code>, which was injected into the <code><a href=\"api/data/EntityCacheReducerFactory\" class=\"code-anchor\">EntityCacheReducerFactory</a></code>.</p>\n<p>The <em>creator</em> returns an initialized collection from the <code>initialState</code> in the entity's <code><a href=\"api/data/EntityDefinition\" class=\"code-anchor\">EntityDefinition</a></code>.\nIf the entity type doesn't have a <em>definition</em> or the definition doesn't have an <code>initialState</code> property value,\nthe creator returns an <code><a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a></code>.</p>\n<p>The <em>entity reducer</em> then passes the new collection in the <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a></code> argument of the <em>entity collection reducer</em>.</p>\n<p><a id=\"customizing\"></a></p>\n<h2 id=\"customizing-entity-reducer-behavior\">Customizing entity reducer behavior<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#customizing-entity-reducer-behavior\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can <em>replace</em> any entity collection reducer by <a href=\"guide/data/entity-reducer#register\">registering a custom alternative</a>.</p>\n<p>You can <em>replace</em> the default <em>entity reducer</em> by\nproviding a custom alternative to the <a href=\"guide/data/entity-reducer#collection-reducer-factory\"><code>EntityCollectionReducerFactory</code></a>.</p>\n<p>You could even <em>replace</em> the master <em>entity reducer</em> by\nproviding a custom alternative to the <a href=\"guide/data/entity-reducer#reducer-factory\"><code>EntityCacheReducerFactory</code></a>.</p>\n<p>But quite often you'd like to extend a <em>collection reducer</em> with some additional reducer logic that runs before or after.</p>\n<p><a name=\"entity-cache-actions\"></a></p>\n<h2 id=\"entitycache-level-actions\">EntityCache-level actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#entitycache-level-actions\"><i class=\"material-icons\">link</i></a></h2>\n<p>A few actions target the entity cache as a whole.</p>\n<p><code><a href=\"api/data/EntityCacheAction#SET_ENTITY_CACHE\" class=\"code-anchor\">SET_ENTITY_CACHE</a></code> replaces the entire cache with the object in the action payload,\neffectively re-initializing the entity cache to a known state.</p>\n<p><code>MERGE_ENTITY_CACHE</code> replaces specific entity collections in the current entity cache\nwith those collections present in the action payload.\nIt leaves the other current collections alone.</p>\n<div class=\"alert is-helpful\">\n<p>See <code>entity-reducer.spec.ts</code> for examples of these actions.</p>\n</div>\n<p>These actions might be part of your plan to support offline scenarios or rollback changes to many collections at the same time.</p>\n<p>For example, you could subscribe to the <code><a href=\"api/data/EntityServices#entityCache$\" class=\"code-anchor\">EntityServices.entityCache$</a></code> selector.\nWhen the cache changes, you could\nserialize the cache to browser local storage.\nYou might want to <em>debounce</em> for a few seconds to reduce churn.</p>\n<p>Later, when relaunching the application, you could dispatch the <code><a href=\"api/data/EntityCacheAction#SET_ENTITY_CACHE\" class=\"code-anchor\">SET_ENTITY_CACHE</a></code> action to initialize the entity-cache even while disconnected.\nOr you could dispatch the <code>MERGE_ENTITY_CACHE</code> to rollback selected collections to a known state as\nin error-recovery or \"what-if\" scenarios.</p>\n<div class=\"alert is-critical\">\n<p><strong>Important</strong>: <code>MERGE_ENTITY_CACHE</code> <em>replaces</em> the currently cached collections with the entity collections in its payload.\nIt does not <em>merge</em> the payload collection entities into the existing collections as the name might imply.\nMay reconsider and do that in the future.</p>\n</div>\n<p>If you want to create and reduce additional, cache-wide actions,\nconsider the <em>EntityCache MetaReducer</em>, described in the next section.</p>\n<h2 id=\"metareducers\"><em>MetaReducers</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#metareducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>NgRx/store</code> supports <a href=\"guide/store/metareducers\"><strong>MetaReducers</strong></a> that can inspect and process actions flowing through the store and potentially change state in the store.</p>\n<p>A <em>MetaReducer</em> is a function that takes a reducer and returns a reducer.\nNgRx composes these reducers with other reducers in a chain of responsibility.</p>\n<p>NgRx calls the reducer returned by a MetaReducer just as it does any reducer.\nIt calls it with a <em>state</em> object and an <em>action</em>.</p>\n<p>The MetaReducer can do what it wants with the state and action.\nIt can log the action, handle the action on its own, delegate to the incoming reducer, post-process the updated state, or all of the above.</p>\n<div class=\"alert is-helpful\">\n<p>Remember that the actions themselves are immutable. Do not change the action!</p>\n</div>\n<p>Like every reducer, the state passed to a MetaReducer's reducer is only\nthe section of the store that is within the reducer's scope.</p>\n<p>NgRx Data supports two levels of MetaReducer</p>\n<ol>\n<li><em>EntityCache MetaReducer</em>, scoped to the entire entity cache</li>\n<li><em>EntityCollection MetaReducer</em>, scoped to a particular collection.</li>\n</ol>\n<p><a id=\"cache-meta-reducers\"></a></p>\n<h3 id=\"entity-cache-metareducers\">Entity Cache <em>MetaReducers</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#entity-cache-metareducers\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <strong>EntityCache MetaReducer</strong> helps you inspect and apply actions that affect the <em>entire entity cache</em>.\nYou might add custom actions and an <em>EntityCache MetaReducer</em> to update several collections at the\nsame time.</p>\n<p>An <em>EntityCache MetaReducer</em> reducer must satisfy three requirements:</p>\n<ol>\n<li>always returns the entire entity cache.</li>\n<li>return synchronously (no waiting for server responses).</li>\n<li>never mutate the original action; clone it to change it.</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>We intend to explain how in a documentation update.\nFor now, see the NgRx Data <code>entity-data.module.spec.ts</code> for examples.</p>\n</div>\n<h3 id=\"entity-collection-metareducers\">Entity Collection <em>MetaReducers</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#entity-collection-metareducers\"><i class=\"material-icons\">link</i></a></h3>\n<p>An <strong>entity collection <em>MetaReducer</em></strong> takes an <em>entity collection reducer</em> as its reducer argument and\nreturns a new <em>entity collection reducer</em>.</p>\n<p>The new reducer receives the <code><a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a></code> and <code><a href=\"api/data/EntityAction\" class=\"code-anchor\">EntityAction</a></code> arguments that would have gone to the original reducer.</p>\n<p>It can do what it wants with those arguments, such as:</p>\n<ul>\n<li>log the action,</li>\n<li>transform the action into a different action (for the same entity collection),</li>\n<li>call the original reducer,</li>\n<li>post-process the results from original reducer.</li>\n</ul>\n<p>The new entity collection reducer must satisfy three requirements:</p>\n<ol>\n<li>always returns an <code><a href=\"api/data/EntityCollection\" class=\"code-anchor\">EntityCollection</a></code> for the same entity.</li>\n<li>return synchronously (no waiting for server responses).</li>\n<li>never mutate the original action; clone it to change it.</li>\n</ol>\n<h4 id=\"compared-to-store-metareducers\">Compared to Store MetaReducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#compared-to-store-metareducers\"><i class=\"material-icons\">link</i></a></h4>\n<p>While the <em>entity collection MetaReducer</em> is modeled on the NgRx Store <code><a href=\"api/store/MetaReducer\" class=\"code-anchor\">MetaReducer</a></code> (\"<em>Store MetaReducer</em>\"), it is crucially different in several respects.</p>\n<p>The <em>Store MetaReducer</em> broadly targets <em>store reducers</em>.\nIt wraps <em>store reducers</em>, sees <em>all actions</em>, and can update <em>any state within its scope</em>.</p>\n<p>But a <em>Store MetaReducer</em> neither see nor wrap an <em>entity collection reducer</em>.\nThese <em>entity collection reducers</em> are internal to the <em>EntityCache Reducer</em> that is registered with the NgRx Data feature.</p>\n<p>An <em>entity collection MetaReducer</em> is narrowly focused on manipulation of a single, target <em>entity collection</em>.\nIt wraps <em>all entity collection reducers</em>.</p>\n<p>Note that it can't access other collections, the <em>entity cache</em>, or any other state in the store.\nIf you need a cross-collection <em>MetaReducer</em>, try the <a href=\"guide/data/entity-reducer#cache-meta-reducers\">EntityCache MetaReducer</a>\ndescribed above.</p>\n<h4 id=\"provide-entity-metareducers-to-the-factory\">Provide Entity <em>MetaReducers</em> to the factory<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-reducer#provide-entity-metareducers-to-the-factory\"><i class=\"material-icons\">link</i></a></h4>\n<p>Create one or more <em>entity collection MetaReducers</em> and\nadd them to an array.</p>\n<p>Provide this array with the <code><a href=\"api/data/ENTITY_COLLECTION_META_REDUCERS\" class=\"code-anchor\">ENTITY_COLLECTION_META_REDUCERS</a></code> injection token\nwhere you import the <code>NgRxDataModule</code>.</p>\n<p>The <code><a href=\"api/data/EntityCollectionReducerRegistry\" class=\"code-anchor\">EntityCollectionReducerRegistry</a></code> injects it and composes the\narray of <em>MetaReducers</em> into a single <em>meta-MetaReducer</em>.\nThe earlier <em>MetaReducers</em> wrap the later ones in the array.</p>\n<p>When the factory register an <code><a href=\"api/data/EntityCollectionReducer\" class=\"code-anchor\">EntityCollectionReducer</a></code>, including the reducers it creates,\nit wraps that reducer in the <em>meta-MetaReducer</em> before\nadding it to its registry.</p>\n<p>All <code>EntityActions</code> dispatched to the store pass through this wrapper on their way in and out of the entity-specific reducers.</p>\n<div class=\"alert is-helpful\">\n<p>We intend to explain how to create and provide <em>entity collection MetaReducers</em> in a documentation update.\nFor now, see the <code>entity-reducer.spec.ts</code> for examples.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/architecture-overview\n - guide/data/entity-actions\n - guide/data/entity-metadata\n - guide/data/extension-points\n-->\n<!-- links from this doc:\n - api/data/ENTITY_COLLECTION_META_REDUCERS\n - api/data/EntityAction\n - api/data/EntityCache\n - api/data/EntityCacheAction#SET_ENTITY_CACHE\n - api/data/EntityCacheReducerFactory\n - api/data/EntityCacheReducerFactory#create\n - api/data/EntityCollection\n - api/data/EntityCollection#loading\n - api/data/EntityCollectionCreator\n - api/data/EntityCollectionReducer\n - api/data/EntityCollectionReducerFactory\n - api/data/EntityCollectionReducerRegistry\n - api/data/EntityCollectionReducerRegistry#registerReducer\n - api/data/EntityDefinition\n - api/data/EntityOp\n - api/data/EntityServices#entityCache$\n - api/entity/EntityAdapter\n - api/store-devtools/StoreDevtools#state\n - api/store/Action\n - api/store/ActionReducer\n - api/store/MetaReducer\n - guide/data/entity-effects\n - guide/data/entity-metadata\n - guide/data/entity-reducer#cache-meta-reducers\n - guide/data/entity-reducer#collection-reducer-factory\n - guide/data/entity-reducer#compared-to-store-metareducers\n - guide/data/entity-reducer#customizing-entity-reducer-behavior\n - guide/data/entity-reducer#default-entitycollectionreducer\n - guide/data/entity-reducer#entity-cache-actions\n - guide/data/entity-reducer#entity-cache-metareducers\n - guide/data/entity-reducer#entity-collection-metareducers\n - guide/data/entity-reducer#entity-reducer\n - guide/data/entity-reducer#entitycache-level-actions\n - guide/data/entity-reducer#entitycollectionreducers\n - guide/data/entity-reducer#initialize\n - guide/data/entity-reducer#initializing-collection-state\n - guide/data/entity-reducer#metareducers\n - guide/data/entity-reducer#provide-entity-metareducers-to-the-factory\n - guide/data/entity-reducer#reducer-factory\n - guide/data/entity-reducer#register\n - guide/data/entity-reducer#register-custom-reducers\n - guide/entity/adapter#adapter-collection-methods\n - guide/store/metareducers\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-reducer.md?message=docs%3A%20describe%20your%20change...\n-->"
}