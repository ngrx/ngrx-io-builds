{
  "id": "guide/data/faq",
  "title": "NgRx Data FAQs",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/data/faq.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrx-data-faqs\">NgRx Data FAQs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#ngrx-data-faqs\"><i class=\"material-icons\">link</i></a></h1>\n<p><a id=\"no-boilerplate-claim\"></a></p>\n<h2 id=\"you-said-id-never-write-an-action-but-what-if-\">You said I'd never write an action. But what if ...<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#you-said-id-never-write-an-action-but-what-if-\"><i class=\"material-icons\">link</i></a></h2>\n<p>Hold on. We said \"you <em>may never</em> write an action, reducer, selector, or effect.\"</p>\n<p>That doesn’t mean you <em>won’t ever</em>.\nIn fact, a critical feature of NgRx Data is that you can add your own properties to collections, additional actions, reducer cases, selectors, etc.</p>\n<p>You aren't locked in to the way NgRx Data does things.\nYou can customize almost anything, both at the single entity-type level and for all entity types.</p>\n<p>But you ONLY do so when you want to do something unusual … and that, by definition, is not boilerplate.</p>\n<p><a id=\"entity\"></a></p>\n<h2 id=\"what-is-an-entity\">What is an <em>entity</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#what-is-an-entity\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <strong><em>entity</em></strong> is an object with <em>long-lived data values</em> that you read from and write to a database.</p>\n<div class=\"alert is-helpful\">\n<p>Operations that access the database are called <strong><em>persistence</em></strong> operations.</p>\n</div>\n<p>An <em>entity</em> refers to some \"thing\" in the application domain, such as a customer.\nSuch things are unique even as their values change. Accordingly each entity has a unique <strong><em>primary key</em></strong>, also called its <strong><em>identifier</em></strong>.</p>\n<p>Each <em>entity</em> object is an instance of an <strong><em>entity type</em></strong>. That type could be represented explicitly as a class or an interface. Or it could just be a bag of data.</p>\n<p>To manage entities with NgRx Data, you describe each entity type with <a href=\"guide/data/entity-metadata\"><strong><em>entity metadata</em></strong></a>.</p>\n<p>The application's <strong><em>entity model</em></strong> is the set of all entity types in your application that are described with <em>entity metadata</em>.</p>\n<p>In some definitions, the <em>entity type</em> and <em>entity model</em> describe both the data and the <em>logic</em> that govern that data such as data integrity rules (e.g., validations) and behaviors (e.g., calculations). The <em>current version</em> of NgRx Data library is unaware of entity logic beyond what is strictly necessary to persist entity data values.</p>\n<p><a id=\"no-panacea\"></a></p>\n<h2 id=\"is-ngrx-data-the-answer-for-everything\">Is NgRx Data the answer for everything?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#is-ngrx-data-the-answer-for-everything\"><i class=\"material-icons\">link</i></a></h2>\n<p><strong><em>No!</em></strong>\nThe NgRx Data library is narrowly focused on a single objective:\nto simplify management of <a href=\"guide/data/faq#entity\"><em>entity data</em></a>.</p>\n<p>Entity data are a particularly opportune target for simplification\nbecause they appear in high volume in many applications and\nthe sheer number of <em>similar-but-different</em> NgRx code artifacts necessary to manage that data is daunting.</p>\n<p>Anything we can do to shrink entity management code and to leverage the commonalities across entity types will repay the effort handsomely.</p>\n<p>But <em>entity data</em> is only <em>one</em> kind of application data.</p>\n<p>Configuration data, user roles, the user's prior selections, the current state of screen layouts ...\nthese are all important and highly idiosyncratic data that can benefit from\ncustom coding with standard <em>NgRx</em> techniques.</p>\n<p>Data streamed from remote sources such as trading systems,\nmobile asset tracking systems, and IoT devices are not entity data\nand may not be a good fit for the NgRx Data library.\nThey are still worth managing with <em>NgRx</em>.</p>\n<p>It bears repeating: the NgRx Data library is good for\nquerying, caching, and saving <em>entity data</em> ... and that's it.</p>\n<p><a id=\"ngrx\"></a></p>\n<h2 id=\"how-does-ngrx-data-relate-to-other-ngrx-libraries\">How does NgRx Data relate to other NgRx libraries?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#how-does-ngrx-data-relate-to-other-ngrx-libraries\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx is a collection of libraries for writing Angular applications in a \"reactive style\" that combines the\n<strong><a href=\"guide/data/faq#redux\">redux pattern</a></strong> and tools with <a href=\"guide/data/faq#rxjs\">RxJS Observables</a>.</p>\n<p><code>NgRx Data</code> builds upon three <em>NgRx</em> libraries:\n<a href=\"guide/store\">Store</a>,\n<a href=\"guide/effects\">Effects</a>, and\n<a href=\"guide/entity\">Entity</a>.</p>\n<p><a id=\"ngrx-entity\"></a></p>\n<h2 id=\"how-is-ngrx-data-different-from-ngrx-entity\">How is NgRx <em>Data</em> different from NgRx <em>Entity</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#how-is-ngrx-data-different-from-ngrx-entity\"><i class=\"material-icons\">link</i></a></h2>\n<p><strong>The NgRx Data library <em>extends</em> <a href=\"guide/entity\">Entity</a></strong>.</p>\n<p>The <em>Entity</em> library provides the\ncore representation of a single <em>entity collection</em> within an NgRx <em>Store</em>.\nIts <code><a href=\"api/entity/EntityAdapter\" class=\"code-anchor\">EntityAdapter</a></code> defines common operations for querying and updating individual cached entity collections.</p>\n<p>The NgRx Data library leverages these capabilities while offering higher-level features including:</p>\n<ul>\n<li>\n<p>metadata-driven entity model.</p>\n</li>\n<li>\n<p>actions, reducers, and selectors for all entity types in the model.</p>\n</li>\n<li>\n<p>asynchronous fetch and save HTTP operations as NgRx <em>Effects</em>.</p>\n</li>\n<li>\n<p>a reactive <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> with a simple API that\nencapsulates <em>NgRx</em> interaction details.</p>\n</li>\n</ul>\n<p>Nothing is hidden from you.\nThe store, the actions, the adapter, and the entity collections remain visible and directly accessible.</p>\n<p>The fixes and enhancements in future NgRx <em>Entity</em> versions flow through NgRx Data to your application.</p>\n<p><a id=\"redux\"></a></p>\n<h2 id=\"what-is-redux\">What is <em>redux</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#what-is-redux\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"https://redux.js.org/\">Redux</a> is an implementation of a pattern for managing application <a href=\"guide/data/faq#state\">state</a> in a web client application.</p>\n<p>It is notable for:</p>\n<ul>\n<li>\n<p>Holding all <em>shared state</em> as objects in a single, central <em>store</em>.</p>\n</li>\n<li>\n<p>All objects in the store are <a href=\"https://en.wikipedia.org/wiki/Immutable_object\"><em>immutable</em></a>.\nYou never directly set any property of any object held in a redux store.</p>\n</li>\n<li>\n<p>You update the store by <em>dispatching actions</em> to the store.</p>\n</li>\n<li>\n<p>An <em>action</em> is like a message. It always has a <em>type</em>. It often has a <em>payload</em> which is the data for that message.</p>\n</li>\n<li>\n<p>Action instances are immutable.</p>\n</li>\n<li>\n<p>Action instances are serializable (because the redux dev tools demand it and we should be able to persist them to local browser storage between user sessions).</p>\n</li>\n<li>\n<p>All store values are immutable and serializable.</p>\n</li>\n<li>\n<p><em>actions</em> sent to the store are processed by <em>reducers</em>. A reducer may update the store by replacing old objects in the store with new objects that have the updated state.</p>\n</li>\n<li>\n<p>All <em>reducers</em> are “pure” functions.\nThey have no side-effects.</p>\n</li>\n<li>\n<p>The store publishes an <em>event</em> when updated by a reducer.</p>\n</li>\n<li>\n<p>Your application listens for store <em>events</em>; when it hears an event of interest, the app pulls the corresponding object(s) from the store.</p>\n</li>\n</ul>\n<p><em>NgRx</em> is similar in almost all important respects.\nIt differs most significantly in replacing <em>events</em> with <em>observables</em>.</p>\n<p><em>NgRx</em> relies on\n<a href=\"guide/data/faq#rxjs\">RxJS Observables</a> to listen for store events, select those that matter, and push the selected object(s) to your application.</p>\n<p><a id=\"state\"></a></p>\n<h2 id=\"what-is-state\">What is <em>state</em>?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#what-is-state\"><i class=\"material-icons\">link</i></a></h2>\n<p><em>State</em> is data.\nApplications have several kinds of state including:</p>\n<ul>\n<li>\n<p><em>application</em> state is <em>session</em> data that determine how your application works. Filter values and router configurations are examples of <em>application</em> state.</p>\n</li>\n<li>\n<p><em>persistent</em> state is \"permanent\" data that you store in a remote database. <a href=\"guide/data/faq#entity\">Entities</a> are a prime example of <em>persistent</em> state.</p>\n</li>\n<li>\n<p><em>shared</em> state is data that are shared among application components and services.</p>\n</li>\n</ul>\n<p>In <em>NgRx</em>, as in the redux pattern, all stored state is (or should be) <em>immutable</em>.\nYou never change the properties of objects in the store.\nYou replace them with new objects, created through a merge of the previous property values and new property values.</p>\n<p>Arrays are completely replaced when you add, remove, or replace any of their items.</p>\n<p><a id=\"rxjs\"></a></p>\n<h2 id=\"what-are-rxjs-observables\">What are <em>RxJS Observables</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#what-are-rxjs-observables\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"https://rxjs-dev.firebaseapp.com/\">RxJS Observables</a> is a library for programming in a \"reactive style\".</p>\n<p>Many Angular APIs produce <em>RxJS Observables</em> so programming \"reactively\" with <em>Observables</em> is familiar to many Angular developers. Search the web for many helpful resources on <em>RxJS</em>.</p>\n<p><a id=\"code-generation\"></a></p>\n<h2 id=\"whats-wrong-with-code-generation\">What's wrong with code generation?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/faq#whats-wrong-with-code-generation\"><i class=\"material-icons\">link</i></a></h2>\n<p>Some folks try to conquer the \"too much boilerplate\" problem by generating the code.</p>\n<p>Adding the <code>Foo</code> entity type? Run a code generator to produce <em>actions</em>, <em>action-creators</em>, <em>reducers</em>, <em>effects</em>, <em>dispatchers</em>, and <em>selectors</em> for <code>Foo</code>.\nRun another one to produce the service that makes HTTP GET, PUT, POST, and DELETE calls for <code>Foo</code>.</p>\n<p>Maybe it generates canned tests for them too.</p>\n<p>Now you have ten (or more) new files for <code>Foo</code>. Multiply that by a 100 entity model and you have 1000 files. Cool!</p>\n<p>Except you're responsible for everyone of those files. Overtime you're bound to modify some of them to satisfy some peculiarity of the type.</p>\n<p>Then there is a bug fix or a new feature or a new way to generate some of these files. It's your job to upgrade them. Which ones did you change? Why?</p>\n<p>Good luck!</p>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/EntityCollectionService\n - api/entity/EntityAdapter\n - guide/data/entity-metadata\n - guide/data/faq#entity\n - guide/data/faq#how-does-ngrx-data-relate-to-other-ngrx-libraries\n - guide/data/faq#how-is-ngrx-data-different-from-ngrx-entity\n - guide/data/faq#is-ngrx-data-the-answer-for-everything\n - guide/data/faq#ngrx-data-faqs\n - guide/data/faq#redux\n - guide/data/faq#rxjs\n - guide/data/faq#state\n - guide/data/faq#what-are-rxjs-observables\n - guide/data/faq#what-is-an-entity\n - guide/data/faq#what-is-redux\n - guide/data/faq#what-is-state\n - guide/data/faq#whats-wrong-with-code-generation\n - guide/data/faq#you-said-id-never-write-an-action-but-what-if-\n - guide/effects\n - guide/entity\n - guide/store\n - https://en.wikipedia.org/wiki/Immutable_object\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/data/faq.md?message=docs%3A%20describe%20your%20change...\n - https://redux.js.org/\n - https://rxjs-dev.firebaseapp.com/\n-->"
}