{
  "id": "guide/data/extension-points",
  "title": "Extension Points",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/extension-points.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"extension-points\">Extension Points<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#extension-points\"><i class=\"material-icons\">link</i></a></h1>\n<p><strong>Work in progress</strong></p>\n<p>The <code>NgRx Data</code> library strives for the \"<em>it just works</em>\" experience.\nBut customizations are an inevitable necessity.</p>\n<p>The <code>NgRx Data</code> library invites you to customize its behavior at many points,\nmost of them listed here.</p>\n<h2 id=\"take-control-of-an-entity-type\">Take control of an entity type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#take-control-of-an-entity-type\"><i class=\"material-icons\">link</i></a></h2>\n<p>One day you decide that a particular entity type needs special treatment.\nYou want to take over some or all of the management of that type.</p>\n<p>You can do that easily without abandoning NgRx Data for the rest of your entity model.</p>\n<p>You can take it over completely simply by removing it from the entity metadata.\nCreate your own collection and add it to the store's state-tree as you would in vanilla NgRx. Create your own actions, reducers, selectors and effects.\nAs long as your actions don't have an <code>entityName</code> or <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> property,\nNgRx Data will ignore them.</p>\n<p>Or you can keep the entity type in the NgRx Data system and take over the behaviors that matter to you.</p>\n<ul>\n<li>\n<p>Create supplemental actions for that type. Give them custom <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> names that suit your purpose.</p>\n</li>\n<li>\n<p>Register an alternative <code><a href=\"api/data/EntityCollectionReducer\" class=\"code-anchor\">EntityCollectionReducer</a></code> for that type with the <code><a href=\"api/data/EntityCollectionReducerFactory\" class=\"code-anchor\">EntityCollectionReducerFactory</a></code>. Your custom reducer can respond to your custom actions and implement the standard operations in its own way.</p>\n</li>\n<li>\n<p>Create your own service facade, an alternative to <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code>, that dispatches the actions you care about\nand exposes the selectors that your type needs.</p>\n</li>\n<li>\n<p>Add additional properties to the collection state with the <code><a href=\"api/data/EntityMetadata#additionalCollectionState\" class=\"code-anchor\">EntityMetadata.additionalCollectionState</a></code> property. Manage these properties with custom reducer actions and selectors.</p>\n</li>\n<li>\n<p>By-pass the <code><a href=\"api/data/EntityEffects\" class=\"code-anchor\">EntityEffects</a></code> completely by never dispatching an action with an <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> that it intercepts.\nCreate a custom <em>NgRx/effect</em> that handles your custom persistence actions.</p>\n</li>\n</ul>\n<h2 id=\"provide-alternative-service-implementations\">Provide alternative service implementations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#provide-alternative-service-implementations\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code>NgRx Data</code> library consists of many services that perform small tasks.</p>\n<p>Look at the many providers in <code>NgRx Data.module.ts</code>.\nProvide your own version of any <code>NgRx Data</code> service, as long as it conforms to the service API and implements the expected behavior.</p>\n<p>Be sure to test your alternatives.</p>\n<h2 id=\"custom-entitycollectionservice\">Custom <em>EntityCollectionService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-entitycollectionservice\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"extend-the-entitycollection\">Extend the <em>EntityCollection</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#extend-the-entitycollection\"><i class=\"material-icons\">link</i></a></h2>\n<h2 id=\"custom-entityactions\">Custom <em>EntityActions</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-entityactions\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"rename-the-generated-entity-action-type\">Rename the generated entity action <em>type</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#rename-the-generated-entity-action-type\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"\" class=\"code-anchor\">EntityActionFactory.create()</a></code> method relies on the <code><a href=\"api/data/EntityActionFactory#formatActionType\" class=\"code-anchor\">formatActionType()</a></code> method to\nproduce the <code><a href=\"api/store/Action#type\" class=\"code-anchor\">Action.type</a></code> string.</p>\n<p>The default implementation concatenates the entity type name with the <code><a href=\"api/data/EntityOp\" class=\"code-anchor\">EntityOp</a></code>.\nFor example, querying all heroes results in the entity type, <code>[Hero] NgRx Data/query-all</code>.</p>\n<p>If you don't like that approach you can replace the <code><a href=\"api/data/EntityActionFactory#formatActionType\" class=\"code-anchor\">formatActionType()</a></code> method with a generator that produces action type names that are more to your liking.\nThe NgRx Data library doesn't make decisions based on the <code><a href=\"api/store/Action#type\" class=\"code-anchor\">Action.type</a></code>.</p>\n<h2 id=\"custom-entitydispatcher\">Custom <em>EntityDispatcher</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-entitydispatcher\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"change-the-default-save-strategy\">Change the default save strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#change-the-default-save-strategy\"><i class=\"material-icons\">link</i></a></h3>\n<p>The dispatcher's <code>add()</code>, <code>update()</code>, <code>delete()</code> methods dispatch\n<em>optimistic</em> or <em>pessimistic</em> save actions based on settings in the <code>EntityDispatcherOptions</code>.</p>\n<p>These options come from the <code><a href=\"api/data/EntityDispatcherFactory\" class=\"code-anchor\">EntityDispatcherFactory</a></code> that creates the dispatcher.\nThis factory gets the options from the entity's metadata.\nBut where the metadata lack options, the factory relies on its <code>defaultDispatcherOptions</code>.</p>\n<p>You can set these default options directly by injecting the <code><a href=\"api/data/EntityDispatcherFactory\" class=\"code-anchor\">EntityDispatcherFactory</a></code>\nand re-setting <code>defaultDispatcherOptions</code> <em>before</em> creating dispatchers\n(or creating an <code><a href=\"api/data/EntityCollectionService\" class=\"code-anchor\">EntityCollectionService</a></code> which creates a dispatcher).</p>\n<h2 id=\"custom-effects\">Custom <em>effects</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p>The NgRx Data library has one NgRx <code>@<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a></code>, the <code><a href=\"api/data/EntityEffects\" class=\"code-anchor\">EntityEffects</a></code> class.</p>\n<p>This class detects entity persistence actions, performs the persistence operation with a\ncall to an <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code> and channels the HTTP response through a\n<code><a href=\"api/data/PersistenceResultHandler\" class=\"code-anchor\">PersistenceResultHandler</a></code> which produces a persistence results observable that\ngoes back to the NgRx store.</p>\n<p>The <code><a href=\"api/data/EntityEffects\" class=\"code-anchor\">EntityEffects</a></code> class intercepts actions that have an <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> property whose\nvalue is one of the <code><a href=\"api/data/persistOps\" class=\"code-anchor\">persistOps</a></code>. Other actions are ignored by this effect.</p>\n<p>It tries to process any action with such an <code><a href=\"api/data/EntityActionPayload#entityOp\" class=\"code-anchor\">entityOp</a></code> property by looking for a</p>\n<h3 id=\"choose-data-service-for-the-type\">Choose data service for the type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#choose-data-service-for-the-type\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <a href=\"guide/data/entity-dataservice\"><em>Entity DataService</em></a> describes the\ndefault service, how to provide a data service for a specific entity type\nor replace the default service entirely.</p>\n<h3 id=\"replace-the-generic-type-effects\">Replace the generic-type effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-the-generic-type-effects\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"handle-effect-for-a-specific-type\">Handle effect for a specific type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#handle-effect-for-a-specific-type\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"replace-handling-of-the-results-of-a-data-service-call\">Replace handling of the results of a data service call<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-handling-of-the-results-of-a-data-service-call\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"replace-the-entityeffects-entirely\">Replace the EntityEffects entirely<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-the-entityeffects-entirely\"><i class=\"material-icons\">link</i></a></h3>\n<h2 id=\"custom-reducers\">Custom <em>Reducers</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-reducers\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"guide/data/entity-reducer#customizing\"><em>Entity Reducer</em> guide</a> explains how to\ncustomize entity reducers.</p>\n<h2 id=\"custom-selectors\">Custom <em>Selectors</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-selectors\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"introduction\">Introduction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#introduction\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>@ngrx/data</code> has several built-in selectors that are defined in the <a href=\"https://ngrx.io/api/data/EntitySelectors\">EntitySelectors</a> interface. These can be used outside of a component.  </p>\n<p>Many apps use <code>@ngrx/data</code> in conjunction with @ngrx/store including manually written reducers, actions, and so on. <code>@ngrx/data</code> selectors can be used to combine @ngrx/data state with the state of the entire application.  </p>\n<h3 id=\"using-entityselectorsfactory\">Using EntitySelectorsFactory<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#using-entityselectorsfactory\"><i class=\"material-icons\">link</i></a></h3>\n<p><a href=\"https://ngrx.io/api/data/EntitySelectorsFactory\">EntitySelectorsFactory</a> exposes a <code>create</code> method that can be used to create selectors outside the context of a component, such as in a <code>reducers/index.ts</code> file.  </p>\n<h4 id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#example\"><i class=\"material-icons\">link</i></a></h4>\n<code-example language=\"ts\">\n/* src/app/reducers/index.ts */\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromCat from './cat.reducer';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Owner } from '~/app/models'\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const ownerSelectors = new <a href=\"api/data/EntitySelectorsFactory\" class=\"code-anchor\">EntitySelectorsFactory</a>().create&#x3C;Owner>('Owner');\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  cat: fromCat.State;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const reducers: <a href=\"api/store/ActionReducerMap\" class=\"code-anchor\">ActionReducerMap</a>&#x3C;<a href=\"api/store/State\" class=\"code-anchor\">State</a>> = {\n  cat: fromCat.reducer\n};\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectCatState = (<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: <a href=\"api/store/State\" class=\"code-anchor\">State</a>) => state.cat;\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const {\n  selectAll: selectAllCats\n} = fromCat.adapter.getSelectors(selectCatState);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const selectedCatsWithOwners = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectAllCats,\n  ownerSelectors.selectEntities,\n  (cats, ownerEntities) => cats.map(c => ({\n    ...c,\n    owner: ownerEntities[c.owner]\n  }))\n);\n</code-example>\n<h2 id=\"custom-data-service\">Custom data service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-data-service\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"replace-the-generic-type-data-service\">Replace the generic-type data service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-the-generic-type-data-service\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"replace-the-data-service-for-a-specific-type\">Replace the data service for a specific type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-the-data-service-for-a-specific-type\"><i class=\"material-icons\">link</i></a></h3>\n<h2 id=\"custom-http-resource-urls\">Custom HTTP resource URLs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#custom-http-resource-urls\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"add-plurals\">Add plurals<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#add-plurals\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"replace-the-pluralizer\">Replace the Pluralizer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-the-pluralizer\"><i class=\"material-icons\">link</i></a></h3>\n<h3 id=\"replace-the-httpurlgenerator\">Replace the HttpUrlGenerator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#replace-the-httpurlgenerator\"><i class=\"material-icons\">link</i></a></h3>\n<p>This example replaces the <code><a href=\"api/data/DefaultHttpUrlGenerator\" class=\"code-anchor\">DefaultHttpUrlGenerator</a></code> with a customized <code><a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a></code> that pluralizes both collection resource and entity resource URLs.</p>\n<p>The implementation simply overrides <code>DefaultHttpUrlGenerator.getResourceUrls(string, string)</code>:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/data/DefaultHttpUrlGenerator\" class=\"code-anchor\">DefaultHttpUrlGenerator</a>,\n  <a href=\"api/data/HttpResourceUrls\" class=\"code-anchor\">HttpResourceUrls</a>,\n  <a href=\"api/data/normalizeRoot\" class=\"code-anchor\">normalizeRoot</a>,\n  <a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a>\n} from '@ngrx/data';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class PluralHttpUrlGenerator extends <a href=\"api/data/DefaultHttpUrlGenerator\" class=\"code-anchor\">DefaultHttpUrlGenerator</a> {\n  constructor(private myPluralizer: <a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a>) {\n    super(myPluralizer);\n  }\n\n  protected getResourceUrls(\n    entityName: string,\n    root: string\n  ): <a href=\"api/data/HttpResourceUrls\" class=\"code-anchor\">HttpResourceUrls</a> {\n    let resourceUrls = this.knownHttpResourceUrls[entityName];\n    if (!resourceUrls) {\n      const nRoot = <a href=\"api/data/normalizeRoot\" class=\"code-anchor\">normalizeRoot</a>(root);\n      const url = `${nRoot}/${this.myPluralizer.pluralize(\n        entityName\n      )}/`.toLowerCase();\n      resourceUrls = {\n        <a href=\"api/data/HttpResourceUrls#entityResourceUrl\" class=\"code-anchor\">entityResourceUrl</a>: url,\n        <a href=\"api/data/HttpResourceUrls#collectionResourceUrl\" class=\"code-anchor\">collectionResourceUrl</a>: url\n      };\n      this.registerHttpResourceUrls({ [entityName]: resourceUrls });\n    }\n    return resourceUrls;\n  }\n}\n</code-example>\n<p>Override the <code><a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a></code> provider in the root <code>AppModule</code> where <code><a href=\"api/data/EntityDataModule#forRoot\" class=\"code-anchor\">EntityDataModule.forRoot()</a></code> is imported:</p>\n<code-example language=\"ts\">\n@NgModule({\n  // ...\n  imports: [\n    // ...\n    EntityDataModule.forRoot({})\n  ],\n  providers: [\n    // ...\n    { provide: <a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a>, useClass: PluralHttpUrlGenerator }\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<p>To unit test the custom HTTP URL generator:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { PluralHttpUrlGenerator } from './plural-http-url-generator';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/DefaultPluralizer\" class=\"code-anchor\">DefaultPluralizer</a> } from '@ngrx/data';\n\ndescribe('PluralHttpUrlGenerator', () => {\n  let generator: PluralHttpUrlGenerator;\n\n  beforeEach(() => {\n    generator = new PluralHttpUrlGenerator(new <a href=\"api/data/DefaultPluralizer\" class=\"code-anchor\">DefaultPluralizer</a>([]));\n  });\n\n  it('should be created', () => {\n    expect(generator).toBeTruthy();\n  });\n\n  it('should pluralize entity resource URLs', () => {\n    let url = generator.entityResource('bar', 'https://foo.com/api');\n    expect(url).toBe('https://foo.com/api/bars/');\n  });\n\n  it('should pluralize collection resource URLs', () => {\n    const url = generator.collectionResource('bar', 'https://foo.com/api');\n    expect(url).toBe('https://foo.com/api/bars/');\n  });\n\n  it('should <a href=\"api/data/SetEntityCache#cache\" class=\"code-anchor\">cache</a> results (needed for 100% branch coverage)', () => {\n    const url = generator.entityResource('bar', 'https://foo.com/api');\n    const cachedUrl = generator.entityResource('bar', 'https://foo.com/api');\n    expect(cachedUrl).toBe(url);\n  });\n});\n</code-example>\n<h2 id=\"serialization-with-back-end\">Serialization with back-end<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/extension-points#serialization-with-back-end\"><i class=\"material-icons\">link</i></a></h2>\n<p>The shape of the JSON data going over the wire to-and-from the server often\ndoesn't match the shape of the entity model(s) in the client application.\nYou may need <em>serialization/deserialization</em> transformation functions\nto map between the client entity data and the formats expected by the web APIs.</p>\n<p>There are no facilities for this within <code>NgRx Data</code> itself although\nthat is a <a href=\"guide/data/limitations#serialization\">limitation</a> we might address in a future version.</p>\n<p>One option in the interim is to write such serialization functions and\ninject them into the <code>HttpClient</code> pipeline with <a href=\"https://angular.io/guide/http#intercepting-requests-and-responses\"><code>HttpClient</code> interceptors</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/DefaultHttpUrlGenerator\n - api/data/DefaultPluralizer\n - api/data/EntityActionFactory#formatActionType\n - api/data/EntityActionPayload#entityOp\n - api/data/EntityCollectionReducer\n - api/data/EntityCollectionReducerFactory\n - api/data/EntityCollectionService\n - api/data/EntityDataModule#forRoot\n - api/data/EntityDataService\n - api/data/EntityDispatcherFactory\n - api/data/EntityEffects\n - api/data/EntityMetadata#additionalCollectionState\n - api/data/EntityOp\n - api/data/EntitySelectorsFactory\n - api/data/HttpResourceUrls\n - api/data/HttpResourceUrls#collectionResourceUrl\n - api/data/HttpResourceUrls#entityResourceUrl\n - api/data/HttpUrlGenerator\n - api/data/PersistenceResultHandler\n - api/data/Pluralizer\n - api/data/SetEntityCache#cache\n - api/data/normalizeRoot\n - api/data/persistOps\n - api/effects/Effect\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store/Action#type\n - api/store/ActionReducerMap\n - api/store/State\n - api/store/createSelector\n - guide/data/entity-dataservice\n - guide/data/entity-reducer#customizing\n - guide/data/extension-points#add-plurals\n - guide/data/extension-points#change-the-default-save-strategy\n - guide/data/extension-points#choose-data-service-for-the-type\n - guide/data/extension-points#custom-data-service\n - guide/data/extension-points#custom-effects\n - guide/data/extension-points#custom-entityactions\n - guide/data/extension-points#custom-entitycollectionservice\n - guide/data/extension-points#custom-entitydispatcher\n - guide/data/extension-points#custom-http-resource-urls\n - guide/data/extension-points#custom-reducers\n - guide/data/extension-points#custom-selectors\n - guide/data/extension-points#example\n - guide/data/extension-points#extend-the-entitycollection\n - guide/data/extension-points#extension-points\n - guide/data/extension-points#handle-effect-for-a-specific-type\n - guide/data/extension-points#introduction\n - guide/data/extension-points#provide-alternative-service-implementations\n - guide/data/extension-points#rename-the-generated-entity-action-type\n - guide/data/extension-points#replace-handling-of-the-results-of-a-data-service-call\n - guide/data/extension-points#replace-the-data-service-for-a-specific-type\n - guide/data/extension-points#replace-the-entityeffects-entirely\n - guide/data/extension-points#replace-the-generic-type-data-service\n - guide/data/extension-points#replace-the-generic-type-effects\n - guide/data/extension-points#replace-the-httpurlgenerator\n - guide/data/extension-points#replace-the-pluralizer\n - guide/data/extension-points#serialization-with-back-end\n - guide/data/extension-points#take-control-of-an-entity-type\n - guide/data/extension-points#using-entityselectorsfactory\n - guide/data/limitations#serialization\n - https://angular.io/guide/http#intercepting-requests-and-responses\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/extension-points.md?message=docs%3A%20describe%20your%20change...\n - https://ngrx.io/api/data/EntitySelectors\n - https://ngrx.io/api/data/EntitySelectorsFactory\n-->"
}