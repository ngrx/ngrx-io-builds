{
  "id": "guide/data/limitations",
  "title": "NgRx Data Limitations",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/limitations.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrx-data-limitations\">NgRx Data Limitations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#ngrx-data-limitations\"><i class=\"material-icons\">link</i></a></h1>\n<p>The NgRx Data library lacks many capabilities of a <a href=\"guide/data/limitations#alternatives\">full-featured entity management</a> system.</p>\n<p>You may be able to work-around some of the limitations without too much effort,\nparticularly when the shortcomings are a problem for just a few entity types.</p>\n<p>This page lists many of the serious limitations we've recognized ourselves.</p>\n<p>If curing them were easy, we'd have done so already.\nSometimes there are acceptable, well-known solutions that just take a little more effort.\nSome solutions are too complicated or perform poorly.\nIn some cases, we have no good ideas at all.</p>\n<p>If there's enough interest in this NgRx Data, we'd like to tackle some of these problems.\nWe could use your help.</p>\n<h2 id=\"deep-entity-cloning\">Deep entity cloning<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#deep-entity-cloning\"><i class=\"material-icons\">link</i></a></h2>\n<p>This library (like the NgRx <a href=\"guide/entity\">Entity</a> library\non which it depends) assumes that entity property values\nare simple data types such as strings, numbers, and dates.</p>\n<p>Nothing enforces that assumption.\nMany web APIs return entity data with complex properties.\nA property value could be a <em>value type</em> (e.g., a <em>money type</em> that combines a currency indicator and an amount).\nIt could have a nested structure (e.g., an address).</p>\n<p>This library shallow-clones the entity data in the collections.\nIt doesn't clone complex, nested, or array properties.\nYou'll have to do the deep equality tests and cloning yourself <em>before</em> asking NgRx Data to save data.</p>\n<h2 id=\"non-normalized-server-responses\">Non-normalized server responses<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#non-normalized-server-responses\"><i class=\"material-icons\">link</i></a></h2>\n<p>Many query APIs return an entity bundle with data for many different entity types.</p>\n<p>This library only handles responses with a single entity or an array of entities of the same type.\nWhen you adopt the <em>redux</em> pattern, you're expected to \"normalize\" the entity data\nas you would a <em>relational database</em>.</p>\n<p>This library lacks the tools to help you disaggregate and normalize server response data.</p>\n<h2 id=\"entity-relationships-and-navigation\">Entity relationships and navigation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#entity-relationships-and-navigation\"><i class=\"material-icons\">link</i></a></h2>\n<p>Entities are often related to each other via <em>foreign keys</em>.\nThese relationships can be represented as a directed graph, often with cycles.</p>\n<p>This library is unaware of <em>relationships</em> and <em>foreign keys</em> that may be implicit in the entity data.\nIt's up to you to make something out of those relationships and keys.</p>\n<p>It's not easy to represent relationships.</p>\n<p>A <code>Customer</code> entity could have a one-to-many relationship with <code>Order</code> entities.\nThe <code>Order</code> entity has an <code>order.customer</code> property whose value is the primary key\nof its parent <code>Customer</code>.</p>\n<p>Each <code>Order</code> has related <code>LineItems</code>.\nA <code>LineItems</code> has a one-to-one relationship with <code>Product</code>.\nAnd so it goes.</p>\n<p>There are other cardinalities to consider (one-to-zero, one-to-zero-or-many, many-to-many, etc.).\nA good solution would include an extension of the <code><a href=\"api/data/EntityMetadata\" class=\"code-anchor\">EntityMetadata</a></code> that identified relationships, their cardinalities, and their foreign keys.</p>\n<p>It can be convenient to construct classes for <code>Customer</code> and <code>Order</code> that have\nproperties for navigating between them (<em>navigation properties</em>).\nThe domain logic for the model may argue for unidirectional navigations in some cases\nand bi-directional navigations in others.</p>\n<p>We have to be prepared for any load order.\nThe <em>orders</em> could arrive before their parent <em>customers</em>.\nA good solution would tolerate that, making connections and breaking them again\nas entities enter and leave the cache.</p>\n<p>There will be long chains of navigations (<code>Customer &#x3C;-> Order &#x3C;-> &#x3C;-> LineItem &#x3C;-> Product &#x3C;-> Supplier</code>).\nHow should these be implemented?</p>\n<p>One approach is to combine <em>Observable selector</em> properties like this</p>\n<code-example language=\"typescript\">\norders$ = combineLatest([\n  currentCustomerId$,\n  orders$\n]).pipe(\n  map(([customerId, orders]) => orders.filter(o => o.customerId === customerId))\n)\n</code-example>\n<div class=\"alert is-helpful\">\n<p>We'll explore this and rival approaches in a future documentation update.</p>\n</div>\n<h2 id=\"client-side-primary-key-generation\">Client-side primary key generation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#client-side-primary-key-generation\"><i class=\"material-icons\">link</i></a></h2>\n<p>You are responsible for setting the primary key of an entity you create.</p>\n<p>If the server supplies the key, you can send the new entity to the server\nand rely on the server to send the entity back with its assigned key.\nIt's up to you to orchestrate that cycle.</p>\n<p>It's far better if the client assigns the key.\nYou can create new records offline or recover if your connection to the server\nbreaks inconveniently during the save.</p>\n<p>It's easy to generate a new <em>guid</em> (or <em>uuid</em>) key.\nIt's much harder to generate integer or semantic keys because\nyou need a foolproof way to enforce uniqueness.</p>\n<p>Server-supplied keys greatly complicate maintenance of a cache of inter-related entities.\nYou'll have to find a way to hold the related entities together until you can save them.</p>\n<p>Temporary-key generation is one approach. It requires complex key-fixup logic\nto replace the temporary keys in <em>foreign key properties</em>\nwith the server-supplied permanent keys.</p>\n<h2 id=\"data-integrity-rules\">Data integrity rules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#data-integrity-rules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Entities are often governed by intra- and inter-entity validation rules.\nThe <code>Customer.name</code> property may be required.\nThe <code>Order.shipDate</code> must be after the <code>Order.orderDate</code>.\nThe parent <code>Order</code> of a <code>LineItem</code> may have to exist.</p>\n<p>You can weave validation rules into your application logic\nbut you'll have to do so without the help of the <code>NgRx Data</code> library.</p>\n<p>It would be great if the library knew about the rules (in <code><a href=\"api/data/EntityMetadata\" class=\"code-anchor\">EntityMetadata</a></code>?), ran the validation rules at appropriate times, displayed validation errors on screen, and prevented the save of entities with errors.</p>\n<p>These might be features in a future version of this library.</p>\n<p><a name=\"serialization\"></a></p>\n<h2 id=\"serverclient-entity-mapping\">Server/client entity mapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#serverclient-entity-mapping\"><i class=\"material-icons\">link</i></a></h2>\n<p>The representation of an entity on the server may be different than on the client.</p>\n<p>Perhaps the camelCased property names on the client-side entity are PascalCased on the server.\nMaybe a server-side property is spelled differently than on the client.\nMaybe the client entity should have some properties that don't belong on the server entity (or vice-versa).</p>\n<p>Today you could transform the data in both directions with <a href=\"https://angular.io/guide/http#intercepting-requests-and-responses\"><code>HttpClient</code> interceptors</a>.\nBut this seems like a problem that would be more easily and transparently addressed as a feature of <code>NgRx Data</code>.</p>\n<h2 id=\"no-request-concurrency-checking\">No request concurrency checking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#no-request-concurrency-checking\"><i class=\"material-icons\">link</i></a></h2>\n<p>The user saves a new <code>Customer</code>, followed by a query for all customers.\nIs the new customer in the query response?</p>\n<p><code>NgRx Data</code> does not coordinate save and query requests and does not guarantee order of responses.</p>\n<p>You'll have to manage that yourself.\nHere's some pseudo-code that might do that for the previous example:</p>\n<code-example language=\"javascript\">\n// add new customer, then query all customers\ncustomerService\n  .addEntity(newCustomer)\n  .pipe(concatMap(() => customerService.queryAll()))\n  .subscribe(custs => (this.customers = custs));\n</code-example>\n<p>The same reasoning applies to <em>any</em> request that must follow in a precise sequence.</p>\n<h2 id=\"no-update-concurrency-checking\">No update concurrency checking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#no-update-concurrency-checking\"><i class=\"material-icons\">link</i></a></h2>\n<p>There is no intrinsic mechanism to enforce concurrency checks when updating a record even if the record contains a concurrency property.</p>\n<p>For example, the user saves a change to the customer's address from \"123 Main Street\" to \"45 Elm Avenue\".\nThen the user changes and saves the address again to \"89 Bower Road\".\nAnother user changes the same address to \"67 Maiden Lane\".</p>\n<p>What's the actual address in the database? What's the address in the user's cache?</p>\n<p>It could be any of the three addresses depending on when the server saw them and when the responses arrived.\nYou cannot know.</p>\n<p>Many applications maintain a concurrency property that guards against updating an entity\nthat was updated by someone else.\nThe <code>NgRx Data</code> library is unaware of this protocol.\nYou'll have to manage concurrency yourself.</p>\n<h2 id=\"no-offline-capability\">No offline capability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#no-offline-capability\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx Data lacks support for accumulating changes while the application is offline and then saving those changes to the server when connectivity is restored.</p>\n<p>The <em>NgRx</em> system has some of the ingredients of an offline capability.\nActions are immutable and serializable so they can be stashed in browser storage of some kind while offline and replayed later.</p>\n<p>But there are far more difficult problems to overcome than just recording changes for playback.\nNgRx Data makes no attempt to address these problems.</p>\n<h2 id=\"query-language\">Query language<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#query-language\"><i class=\"material-icons\">link</i></a></h2>\n<p>Servers often offer a sophisticated query API for selecting entities from the server, sorting them on the server, grabbing related entities at the same time, and reducing the number of downloaded fields.</p>\n<p>This library's <code>getWithQuery()</code> command takes a query specification in the form of a <em>parameter/value</em> map or a URL query string.</p>\n<p>There is no apparatus for composing queries or sending them to the server except as a query string.</p>\n<p><a id=\"alternatives\"></a></p>\n<h2 id=\"an-alternative-to-ngrx-data\">An alternative to NgRx Data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/limitations#an-alternative-to-ngrx-data\"><i class=\"material-icons\">link</i></a></h2>\n<p><a href=\"http://www.getbreezenow.com/breezejs\">BreezeJS</a> is a free, open source,\nfull-featured entity management library that overcomes (almost) all of the\nlimitations described above.\nMany Angular (and AngularJS) applications use <em>Breeze</em> today.</p>\n<p>It's not the library for you if you <strong><em>require</em></strong> a small library that adheres to <em>reactive</em>, <em>immutable</em>, <em>redux-like</em> principles.</p>\n<div class=\"alert is-helpful\">\n<p>Disclosure: one of the NgRx Data authors, Ward Bell, is an original core Breeze contributor.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/extension-points\n-->\n<!-- links from this doc:\n - api/data/EntityMetadata\n - guide/data/limitations#alternatives\n - guide/data/limitations#an-alternative-to-ngrx-data\n - guide/data/limitations#client-side-primary-key-generation\n - guide/data/limitations#data-integrity-rules\n - guide/data/limitations#deep-entity-cloning\n - guide/data/limitations#entity-relationships-and-navigation\n - guide/data/limitations#ngrx-data-limitations\n - guide/data/limitations#no-offline-capability\n - guide/data/limitations#no-request-concurrency-checking\n - guide/data/limitations#no-update-concurrency-checking\n - guide/data/limitations#non-normalized-server-responses\n - guide/data/limitations#query-language\n - guide/data/limitations#serverclient-entity-mapping\n - guide/entity\n - http://www.getbreezenow.com/breezejs\n - https://angular.io/guide/http#intercepting-requests-and-responses\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/limitations.md?message=docs%3A%20describe%20your%20change...\n-->"
}