{
  "id": "guide/data/entity-dataservice",
  "title": "Entity DataService",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-dataservice.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entity-dataservice\">Entity DataService<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#entity-dataservice\"><i class=\"material-icons\">link</i></a></h1>\n<p>The NgRx Data library expects to persist entity data with calls to a REST-like web api with endpoints for each entity type.</p>\n<p>The <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code> maintains a registry of service classes dedicated to persisting data for a specific entity type.</p>\n<p>When the NgRx Data library sees an action for an entity <em>persistence operation</em>, it asks the <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code> for the registered data service that makes HTTP calls for that entity type, and calls the appropriate service method.</p>\n<p>A data service is an instance of a class that implements the <code><a href=\"api/data/EntityCollectionDataService\" class=\"code-anchor\">EntityCollectionDataService</a></code>.\nThis interface supports a basic set of CRUD operations for an entity.\nEach that return <code>Observables</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Meaning</th>\n<th>HTTP Method with endpoint</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>add(entity: T)</code></td>\n<td>Add a new entity</td>\n<td><code>POST</code> /api/hero/</td>\n</tr>\n<tr>\n<td><code>delete(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: any)</code></td>\n<td>Delete an entity by primary key value</td>\n<td><code>DELETE</code> /api/hero/5</td>\n</tr>\n<tr>\n<td><code>getAll()</code></td>\n<td>Get all instances of this entity type</td>\n<td><code>GET</code> /api/heroes/</td>\n</tr>\n<tr>\n<td><code>getById(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: any)</code></td>\n<td>Get an entity by its primary key</td>\n<td><code>GET</code> /api/hero/5</td>\n</tr>\n<tr>\n<td><code>getWithQuery(<a href=\"api/router-store/MinimalActivatedRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a>: <a href=\"api/data/QueryParams\" class=\"code-anchor\">QueryParams</a></code> | <code>string)</code></td>\n<td>Get entities that satisfy the query</td>\n<td><code>GET</code> /api/heroes/?name=bombasto</td>\n</tr>\n<tr>\n<td><code>update(update: <a href=\"api/entity/Update\" class=\"code-anchor\">Update</a>&#x3C;T>)</code></td>\n<td>Update an existing entity</td>\n<td><code>PUT</code> /api/hero/5</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p><code><a href=\"api/data/QueryParams\" class=\"code-anchor\">QueryParams</a></code> is a <em>parameter-name/value</em> map\nYou can also supply the query string itself.\n<code>HttpClient</code> safely encodes both into an encoded query string.</p>\n<p><code><a href=\"api/entity/Update\" class=\"code-anchor\">Update</a>&#x3C;T></code> is an object with a strict subset of the entity properties.\nIt <em>must</em> include the properties that participate in the primary key (e.g., <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code>).\nThe update property values are the <em>properties-to-update</em>;\nunmentioned properties should retain their current values.</p>\n</div>\n<p>The default data service methods return the <code>Observables</code> returned by the corresponding Angular <code>HttpClient</code> methods.</p>\n<div class=\"alert is-helpful\">\n<p>If you create your own data service alternatives, they should return similar <code>Observables</code>.</p>\n</div>\n<h2 id=\"register-data-services\">Register data services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#register-data-services\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code> registry is empty by default.</p>\n<p>You can add custom data services to it by creating instances of those classes and registering them with <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code> in one of two ways.</p>\n<ol>\n<li>\n<p>register a single data service by entity name with the <code><a href=\"api/data/EntityDataService#registerService\" class=\"code-anchor\">registerService()</a></code> method.</p>\n</li>\n<li>\n<p>register several data services at the same time with by calling <code>registerServices</code> with an <em>entity-name/service</em> map.</p>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>You can create and import a module that registers your custom data services as shown in the <em>EntityDataService</em> <a href=\"https://github.com/ngrx/platform/blob/master/modules/data/spec/dataservices/entity-data.service.spec.ts\">tests</a></p>\n</div>\n<p>If you decide to register an entity data service, be sure to do so <em>before</em> you ask NgRx Data to perform a persistence operation for that entity.</p>\n<p>Otherwise, the NgRx Data library will create and register an instance of the default data service <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService&#x3C;T></a></code> for that entity type.</p>\n<h2 id=\"the-defaultdataservice\">The <em>DefaultDataService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#the-defaultdataservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>The demo app doesn't register any entity data services.\nIt relies entirely on a <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService</a></code>, created for each entity type, by the injected <code><a href=\"api/data/DefaultDataServiceFactory\" class=\"code-anchor\">DefaultDataServiceFactory</a></code>.</p>\n<p>A <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService&#x3C;T></a></code> makes REST-like calls to the server's web api with Angular's <code>HttpClient</code>.</p>\n<p>It composes HTTP URLs from a <em>root</em> path (see <a href=\"guide/data/entity-dataservice#configuration\">\"Configuration\"</a> below) and the entity name.</p>\n<p>For example,</p>\n<ul>\n<li>if the persistence action is to delete a hero with id=42 <em>and</em></li>\n<li>the root path is <code>'api'</code> <em>and</em></li>\n<li>the entity name is <code>'Hero'</code>, <em>then</em></li>\n<li>the DELETE request URL will be <code>'api/hero/42'</code>.</li>\n</ul>\n<p>When the persistence operation concerns multiple entities, the <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService</a></code> substitutes the plural of the entity type name for the resource name.</p>\n<p>The <code><a href=\"api/data/EntityOp#QUERY_ALL\" class=\"code-anchor\">QUERY_ALL</a></code> action to get all heroes would result in an HTTP GET request to the URL <code>'api/heroes'</code>.</p>\n<p>The <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService</a></code> doesn't know how to pluralize the entity type name.\nIt doesn't even know how to create the base resource names.</p>\n<p>It relies on an injected <code><a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a></code> service to produce the appropriate endpoints.\nAnd the default implementation of the <code><a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a></code> relies on the\n<code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code> service to produce the plural collection resource names.</p>\n<p>The <a href=\"guide/data/entity-metadata#plurals\"><em>Entity Metadata</em></a> guide\nexplains how to configure the default <code><a href=\"api/data/Pluralizer\" class=\"code-anchor\">Pluralizer</a></code> .</p>\n<p><a id=\"configuration\"></a></p>\n<h3 id=\"configure-the-defaultdataservice\">Configure the <em>DefaultDataService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#configure-the-defaultdataservice\"><i class=\"material-icons\">link</i></a></h3>\n<p>The collection-level data services construct their own URLs for HTTP calls. They typically rely on shared configuration information such as the root of every resource URL.</p>\n<p>The shared configuration values are almost always specific to the application and may vary according the runtime environment.</p>\n<p>The NgRx Data library defines a <code><a href=\"api/data/DefaultDataServiceConfig\" class=\"code-anchor\">DefaultDataServiceConfig</a></code> for\nconveying shared configuration to an entity collection data service.</p>\n<p>The most important configuration property, <code>root</code>, returns the <em>root</em> of every web api URL, the parts that come before the entity resource name. If you are using a remote API, this value can include the protocol, domain, port, and root path, such as <code>https://my-api-domain.com:8000/api/v1</code>.</p>\n<p>For a <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService&#x3C;T></a></code>, the default value is <code>'api'</code>, which results in URLs such as <code>api/heroes</code>.</p>\n<p>The <code>timeout</code> property sets the maximum time (in ms) before the <em>ng-lib</em> persistence operation abandons hope of receiving a server reply and cancels the operation. The default value is <code>0</code>, which means that requests do not timeout.</p>\n<p>The <code>delete404OK</code> flag tells the data service what to do if the server responds to a DELETE request with a <code>404 - Not Found</code>.</p>\n<p>In general, not finding the resource to delete is harmless and\nyou can save yourself the headache of ignoring a DELETE 404 error\nby setting this flag to <code>true</code>, which is the default for the <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService&#x3C;T></a></code>.</p>\n<p>When running a demo app locally, the server may respond more quickly than it will in production. You can simulate real-world by setting the <code>getDelay</code> and <code>saveDelay</code> properties.</p>\n<h4 id=\"provide-a-custom-configuration\">Provide a custom configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#provide-a-custom-configuration\"><i class=\"material-icons\">link</i></a></h4>\n<p>First, create a custom configuration object of type <code><a href=\"api/data/DefaultDataServiceConfig\" class=\"code-anchor\">DefaultDataServiceConfig</a></code> :</p>\n<code-example language=\"typescript\">\nconst defaultDataServiceConfig: <a href=\"api/data/DefaultDataServiceConfig\" class=\"code-anchor\">DefaultDataServiceConfig</a> = {\n  root: 'https://my-api-domain.com:8000/api/v1',\n  timeout: 3000, // request timeout\n}\n</code-example>\n<p>Provide it in an eagerly-loaded <code>NgModule</code> such as the <code>EntityStoreModule</code> in the sample application:</p>\n<code-example language=\"typescript\">\n@NgModule({\n  providers: [{ provide: <a href=\"api/data/DefaultDataServiceConfig\" class=\"code-anchor\">DefaultDataServiceConfig</a>, useValue: defaultDataServiceConfig }]\n})\n</code-example>\n<h2 id=\"custom-entitydataservice\">Custom <em>EntityDataService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#custom-entitydataservice\"><i class=\"material-icons\">link</i></a></h2>\n<p>While the NgRx Data library provides a configuration object to modify certain aspects of the <em>DefaultDataService</em>,\nyou may want to further customize what happens when you save or retrieve data for a particular collection.</p>\n<p>For example, you may need to modify fetched entities to convert strings to dates, or to add additional properties to an entity.</p>\n<p>You could do this by creating a custom data service and registering that service with the <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code>.</p>\n<p>To illustrate this, the sample app adds a <code>dateLoaded</code> property to the <code>Hero</code> entity to record when a hero is loaded from the server into the <em>NgRx-store</em> entity cache.</p>\n<code-example language=\"typescript\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class Hero {\n  readonly <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number;\n  readonly name: string;\n  readonly saying: string;\n  readonly dateLoaded: Date;\n}\n</code-example>\n<p>To support this feature, we 'll create a <code>HeroDataService</code> class that implements the <code><a href=\"api/data/EntityCollectionDataService\" class=\"code-anchor\">EntityCollectionDataService&#x3C;T></a></code> interface.</p>\n<p>In the sample app the <code>HeroDataService</code> derives from the NgRx Data <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService&#x3C;T></a></code> in order to leverage its base functionality.\nIt only overrides what it really needs.</p>\n<code-example header=\"store/entity/hero-data-service.ts\" linenums=\"false\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { HttpClient } from '@angular/common/http';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/data/EntityCollectionDataService\" class=\"code-anchor\">EntityCollectionDataService</a>,\n  <a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService</a>,\n  <a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a>,\n  <a href=\"api/data/Logger\" class=\"code-anchor\">Logger</a>,\n  <a href=\"api/data/QueryParams\" class=\"code-anchor\">QueryParams</a>\n} from '@ngrx/data';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Observable } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map } from 'rxjs/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Hero } from '../../core';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class HeroDataService extends <a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService</a>&#x3C;Hero> {\n  constructor(http: HttpClient, httpUrlGenerator: <a href=\"api/data/HttpUrlGenerator\" class=\"code-anchor\">HttpUrlGenerator</a>, logger: <a href=\"api/data/Logger\" class=\"code-anchor\">Logger</a>) {\n    super('Hero', http, httpUrlGenerator);\n    logger.log('Created custom Hero <a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a>');\n  }\n\n  getAll(): Observable&#x3C;Hero[]> {\n    return super.getAll().pipe(map(heroes => heroes.map(hero => this.mapHero(hero))));\n  }\n\n  getById(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: string | number): Observable&#x3C;Hero> {\n    return super.getById(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>).pipe(map(hero => this.mapHero(hero)));\n  }\n\n  getWithQuery(<a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>: string | <a href=\"api/data/QueryParams\" class=\"code-anchor\">QueryParams</a>): Observable&#x3C;Hero[]> {\n    return super.getWithQuery(<a href=\"api/router-store/MinimalActivatedRouteSnapshot#params\" class=\"code-anchor\">params</a>).pipe(map(heroes => heroes.map(hero => this.mapHero(hero))));\n  }\n\n  private mapHero(hero: Hero): Hero {\n    return { ...hero, dateLoaded: new Date() };\n  }\n}\n</code-example>\n<p>This <code>HeroDataService</code> hooks into the <em>get</em> operations to set the <code>Hero.dateLoaded</code> on fetched hero entities.\nIt also tells the logger when it is created (see the console output of the running sample) .</p>\n<p>Finally, we must tell NgRx Data about this new data service.</p>\n<p>The sample app provides <code>HeroDataService</code> and registers it by calling the <code><a href=\"api/data/EntityDataService#registerService\" class=\"code-anchor\">registerService()</a></code> method on the <code><a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a></code> in the app's <em>entity store module</em>:</p>\n<code-example header=\"store/entity-store.module.ts\" linenums=\"false\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a> } from '@ngrx/data'; // &#x3C;-- <a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> the NgRx Data data service registry\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { HeroDataService } from './hero-data-service';\n\n@NgModule({\n  imports: [ ... ],\n  providers: [ HeroDataService ] // &#x3C;-- provide the data service\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class EntityStoreModule {\n  constructor(\n    entityDataService: <a href=\"api/data/EntityDataService\" class=\"code-anchor\">EntityDataService</a>,\n    heroDataService: HeroDataService,\n  ) {\n    entityDataService.registerService('Hero', heroDataService); // &#x3C;-- register it\n  }\n}\n</code-example>\n<h3 id=\"a-custom-dataservice\">A custom <em>DataService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/data/entity-dataservice#a-custom-dataservice\"><i class=\"material-icons\">link</i></a></h3>\n<p>You don't have to override members of the <code><a href=\"api/data/DefaultDataService\" class=\"code-anchor\">DefaultDataService</a></code>.\nYou could write a completely custom alternative that queries and saves\nentities by any mechanism you choose.</p>\n<p>You can register it the same way as long as it adheres to the interface. </p>\n<code-example language=\"typescript\">\n// Register custom data service\nentityDataService.registerService('Hero', peculiarHeroDataService); \n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/data/architecture-overview\n - guide/data/entity-collection-service\n - guide/data/entity-metadata\n - guide/data/extension-points\n-->\n<!-- links from this doc:\n - api/data/DefaultDataService\n - api/data/DefaultDataServiceConfig\n - api/data/DefaultDataServiceFactory\n - api/data/EntityCollectionDataService\n - api/data/EntityDataService\n - api/data/EntityDataService#registerService\n - api/data/EntityOp#QUERY_ALL\n - api/data/HttpUrlGenerator\n - api/data/Logger\n - api/data/Pluralizer\n - api/data/QueryParams\n - api/data/UpdateResponseData#id\n - api/entity/Update\n - api/router-store/MinimalActivatedRouteSnapshot#params\n - api/router-store/MinimalActivatedRouteSnapshot#queryParams\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - guide/data/entity-dataservice#a-custom-dataservice\n - guide/data/entity-dataservice#configuration\n - guide/data/entity-dataservice#configure-the-defaultdataservice\n - guide/data/entity-dataservice#custom-entitydataservice\n - guide/data/entity-dataservice#entity-dataservice\n - guide/data/entity-dataservice#provide-a-custom-configuration\n - guide/data/entity-dataservice#register-data-services\n - guide/data/entity-dataservice#the-defaultdataservice\n - guide/data/entity-metadata#plurals\n - https://github.com/ngrx/platform/blob/master/modules/data/spec/dataservices/entity-data.service.spec.ts\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/data/entity-dataservice.md?message=docs%3A%20describe%20your%20change...\n-->"
}