{
  "id": "guide/component-store",
  "title": "@ngrx/component-store",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngrxcomponent-store\">@ngrx/component-store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store#ngrxcomponent-store\"><i class=\"material-icons\">link</i></a></h1>\n<p>ComponentStore is a standalone library that helps to manage local/component state. It's an alternative to push-based \"Service with a Subject\".</p>\n<h2 id=\"introduction\">Introduction<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store#introduction\"><i class=\"material-icons\">link</i></a></h2>\n<p>// TODO(alex-okrushko): fill-up the intro</p>\n<h2 id=\"key-concepts\">Key Concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store#key-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Local state can be initialized lazily</li>\n<li>Local state is typically tied to the life-cycle of a particular component and is cleaned up when that component is destroyed.</li>\n<li>Users of ComponentStore can update the state through <code>setState</code> or <code>updater</code>, either imperatively or by providing an Observable.</li>\n<li>Users of ComponentStore can read the state through <code><a href=\"api/store/select\" class=\"code-anchor\">select</a></code> or a top-level <code><a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>$</code>. Selectors are extremely performant.</li>\n<li>Users of ComponentStore may start side-effects with <code><a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a></code>, both sync and async, and feed the data both imperatively or reactively.</li>\n</ul>\n<h2 id=\"installation\">Installation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store#installation\"><i class=\"material-icons\">link</i></a></h2>\n<p>// TODO(alex-okrushko): fill-up the installation, including pros/cons of extending the service vs Component-scoped providers</p>\n<h2 id=\"initialization\">Initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-store#initialization\"><i class=\"material-icons\">link</i></a></h2>\n<p>ComponentStore can be initialized in 2 ways:</p>\n<ul>\n<li>through constructor - it would have the initial state</li>\n<li>by calling <code>setState</code> and passing an object that matches the state interface.</li>\n</ul>\n<code-example header=\"movies-page.component.ts\">\n@Component({\n  template: `\n    &#x3C;li *ngFor=\"let movie of (movies$ | async)\">\n      {{ movie.name }}\n    &#x3C;/li>\n  `,\n  providers: [ComponentStore],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MoviesPageComponent {\n  movies$ = this.componentStore.state$.pipe(\n    map(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a> => state.movies),\n  );\n\n  constructor(\n    private readonly componentStore: ComponentStore&#x3C;{movies: Movie[]}>\n  ) {}\n\n  ngOnInit() {\n    this.componentStore.setState({movies: []});\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - docs\n-->\n<!-- links from this doc:\n - api/effects/EffectNotification#effect\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/StoreDevtools#state\n - api/store/select\n - guide/component-store#initialization\n - guide/component-store#installation\n - guide/component-store#introduction\n - guide/component-store#key-concepts\n - guide/component-store#ngrxcomponent-store\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/component-store/index.md?message=docs%3A%20describe%20your%20change...\n-->"
}