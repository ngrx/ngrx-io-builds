{
  "id": "guide/entity/recipes/entity-adapter-with-feature-creator",
  "title": "Using Entity Adapter with Feature Creator",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/entity/recipes/entity-adapter-with-feature-creator.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"using-entity-adapter-with-feature-creator\">Using Entity Adapter with Feature Creator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/entity/recipes/entity-adapter-with-feature-creator#using-entity-adapter-with-feature-creator\"><i class=\"material-icons\">link</i></a></h1>\n<p>This recipe demonstrates how to combine <a href=\"/guide/entity/adapter#entity-adapter\">entity adapter</a> (selectors) within <a href=\"/guide/store/feature-creators#providing-extra-selectors\">extraSelectors</a>.</p>\n<p>As an example, let's look at some code from a User state management feature.</p>\n<p>Start by defining the state for the <code>User</code> feature.</p>\n<code-example header=\"users.state.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>, <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a> } from '@ngrx/entity';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { User } from './user.model';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> extends <a href=\"api/entity/EntityState\" class=\"code-anchor\">EntityState</a>&#x3C;User&#x3C; {\n  selectedUserId: string | null;\n}\n\nconst <a href=\"api/data/EntityCollectionReducerMethods#adapter\" class=\"code-anchor\">adapter</a> = <a href=\"api/entity/createEntityAdapter\" class=\"code-anchor\">createEntityAdapter</a>&#x3C;User&#x3C;();\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const initialState: <a href=\"api/store/State\" class=\"code-anchor\">State</a> = adapter.getInitialState({\n  selectedUserId: null,\n});\n\n</code-example>\n<p>Then, we define the <code>User</code> actions: <code>addUser</code> and <code>selectUser</code>.</p>\n<code-example header=\"user-list-page.actions.ts\">\n\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createActionGroup\" class=\"code-anchor\">createActionGroup</a>, <a href=\"api/store/props\" class=\"code-anchor\">props</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { User } from './user.model';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const UserListPageActions = <a href=\"api/store/createActionGroup\" class=\"code-anchor\">createActionGroup</a>({\n  source: 'User List Page',\n  events: {\n    addUser: <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ user: User }>(),\n    selectUser: <a href=\"api/store/props\" class=\"code-anchor\">props</a>&#x3C;{ userId: string }>(),\n  },\n});\n\n</code-example>\n<p>Then use the <code><a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a></code> function to create a reducer for the <code>User</code> feature.</p>\n<code-example header=\"users.state.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>, <a href=\"api/store/on\" class=\"code-anchor\">on</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { UserListPageActions } from './user-list-page.actions';\n\nconst reducer = <a href=\"api/store/createReducer\" class=\"code-anchor\">createReducer</a>(\n  initialState,\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(UserListPageActions.addUser, (state, { user }) =>\n    adapter.addOne(user, state)\n  ),\n  <a href=\"api/store/on\" class=\"code-anchor\">on</a>(UserListPageActions.selectUser, (state, { userId }) => ({\n    ...state,\n    selectedUserId: userId,\n  }))\n);\n\n</code-example>\n<p>Then create the <code>User</code> feature using the <code><a href=\"api/store/createFeature\" class=\"code-anchor\">createFeature</a></code> function.\nThis generates all the basic selectors automatically, and we can specify extra selectors using the <code>extraSelectors</code> option.</p>\n<code-example header=\"users.state.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/createFeature\" class=\"code-anchor\">createFeature</a>, <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const usersFeature = <a href=\"api/store/createFeature\" class=\"code-anchor\">createFeature</a>({\n  name: 'users',\n  reducer,\n  extraSelectors: ({ selectUsersState, selectEntities, selectSelectedUserId }) => ({\n    ...adapter.getSelectors(selectUsersState),\n    selectIsUserSelected: <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n      selectSelectedUserId,\n      (selectedId) => selectedId !== null\n    ),\n    selectSelectedUser: <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n      selectSelectedUserId,\n      selectEntities,\n      (selectedId, entities) => selectedId ? entities[selectedId] : null\n    ),\n  }),\n});\n\n</code-example>\n<p>To use the selector within a component, <code>inject</code> the <code><a href=\"api/store/Store\" class=\"code-anchor\">Store</a></code> and select the data from the state using the selectors generated by the <code><a href=\"api/store/createFeature\" class=\"code-anchor\">createFeature</a></code> function.</p>\n<code-example header=\"user-list.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { usersFeature } from './users.state';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class UserListComponent{\n  private readonly store = inject(<a href=\"api/store/Store\" class=\"code-anchor\">Store</a>);\n  \n  readonly users$ = this.store.select(usersFeature.selectAll);\n  readonly isUserSelected$ = this.store.select(usersFeature.selectIsUserSelected);\n  readonly selectedUser$ = this.store.select(usersFeature.selectSelectedUser);\n}\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/entity/adapter#entity-adapter\n - /guide/store/feature-creators#providing-extra-selectors\n - api/data/EntityCollectionReducerMethods#adapter\n - api/entity/EntityState\n - api/entity/createEntityAdapter\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/State\n - api/store/Store\n - api/store/createActionGroup\n - api/store/createFeature\n - api/store/createReducer\n - api/store/createSelector\n - api/store/on\n - api/store/props\n - guide/entity/recipes/entity-adapter-with-feature-creator#using-entity-adapter-with-feature-creator\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/entity/recipes/entity-adapter-with-feature-creator.md?message=docs%3A%20describe%20your%20change...\n-->"
}