{
  "id": "guide/migration/v15",
  "title": "V15 Update Guide",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/migration/v15.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"v15-update-guide\">V15 Update Guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#v15-update-guide\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"angular-cli-update\">Angular CLI update<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#angular-cli-update\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgRx supports using the Angular CLI <code>ng update</code> command to update your dependencies. Migration schematics are run to make the upgrade smoother. These schematics will fix some of the breaking changes.</p>\n<p>To update your packages to the latest released version, run the command below.</p>\n<code-example language=\"sh\">\nng update @ngrx/store@15\n</code-example>\n<h2 id=\"dependencies\">Dependencies<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#dependencies\"><i class=\"material-icons\">link</i></a></h2>\n<p>Version 15 has the minimum version requirements:</p>\n<ul>\n<li>Angular version 15.x</li>\n<li>Angular CLI version 15.x</li>\n<li>TypeScript version 4.8.x</li>\n<li>RxJS version ^6.5.3 || ^7.5.0</li>\n</ul>\n<h2 id=\"breaking-changes\">Breaking changes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#breaking-changes\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"ngrxstore\">@ngrx/store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#ngrxstore\"><i class=\"material-icons\">link</i></a></h3>\n<p>The projector function on the selector is type-safe by default.</p>\n<p>BEFORE:</p>\n<p>The projector is not type-safe by default, allowing for potential mismatch types in the projector function.</p>\n<code-example language=\"ts\">\nconst mySelector = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  () => 'one',\n  () => 2,\n  (one, two) => 3\n)\n\nmySelector.projector() // &#x3C;- type is projector(...args: any[]): number\n</code-example>\n<p>AFTER:</p>\n<p>The projector is strict by default, but can be bypassed with an <code>any</code> generic parameter.</p>\n<code-example language=\"ts\">\nconst mySelector = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  () => 'one',\n  () => 2,\n  (one, two) => 3\n)\n\nmySelector.projector() // &#x3C;- Results in type error. Type is projector(s1: string, s2: number): number\n</code-example>\n<p>To retain previous behavior</p>\n<code-example language=\"ts\">\nconst mySelector = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  () => 'one',\n  () => 2,\n  (one, two) => 3\n)\n\n(mySelector.projector as any)()\n</code-example>\n<p>The projector method has become strict for selectors with props</p>\n<p>BEFORE:</p>\n<p>You could pass any arguments to the projector method</p>\n<code-example language=\"ts\">\nconst <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a> = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectString, // returning a string\n  selectNumber, // returning a number\n  (s, n, <a href=\"api/data/CorrelationIdGenerator#prefix\" class=\"code-anchor\">prefix</a>: string) => {\n    return <a href=\"api/data/CorrelationIdGenerator#prefix\" class=\"code-anchor\">prefix</a> + s.repeat(n);\n  }\n)\n\n// you could pass any argument\nselector.projector(1, 'a', true);\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\nconst <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a> = <a href=\"api/store/createSelector\" class=\"code-anchor\">createSelector</a>(\n  selectString, // returning a string\n  selectNumber, // returning a number\n  (s, n, <a href=\"api/data/CorrelationIdGenerator#prefix\" class=\"code-anchor\">prefix</a>: string) => {\n    return <a href=\"api/data/CorrelationIdGenerator#prefix\" class=\"code-anchor\">prefix</a> + s.repeat(n);\n  }\n)\n\n// this throws\nselector.projector(1, 'a', true);\n// this does not throw because the arguments have the correct type\nselector.projector(1, 'a', '<a href=\"api/data/CorrelationIdGenerator#prefix\" class=\"code-anchor\">prefix</a>');\n</code-example>\n<h3 id=\"ngrxeffects\">@ngrx/effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#ngrxeffects\"><i class=\"material-icons\">link</i></a></h3>\n<p>The @Effect decorator is removed</p>\n<p>BEFORE:</p>\n<p>Defining an effect is done with @Effect</p>\n<code-example language=\"ts\">\n@Effect()\ndata$ = this.actions$.pipe();\n</code-example>\n<p>A migration was added in the v13 release to upgrade existing codebases to the <code><a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a></code> function.</p>\n<p>AFTER:</p>\n<p>Defining an effect is done with createEffect</p>\n<code-example language=\"ts\">\ndata$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() => this.actions$.pipe());\n</code-example>\n<p>The signature of <code><a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a></code> is changed to expect a\nspreaded array of effects.</p>\n<p>BEFORE:</p>\n<p><code><a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a></code> expected the effects to be passed as an array.</p>\n<code-example language=\"ts\">\n// single <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>\n<a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a>([MyEffect])\n\n// multiple effects\n<a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a>([MyEffect, MySecondEffect])\n```ts\n\nAFTER:\n\n`<a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a>` expects the effects as a spreaded array as argument.\n\n```ts\n// single <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>\n<a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a>(MyEffect)\n\n// multiple effects\n<a href=\"api/effects/provideEffects\" class=\"code-anchor\">provideEffects</a>(MyEffect, MySecondEffect)\n</code-example>\n<h2 id=\"ngrxcomponent\">@ngrx/component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v15#ngrxcomponent\"><i class=\"material-icons\">link</i></a></h2>\n<p> <code>ReactiveComponentModule</code> is removed in favor of <code><a href=\"api/component/LetModule\" class=\"code-anchor\">LetModule</a></code> and <code><a href=\"api/component/PushModule\" class=\"code-anchor\">PushModule</a></code>.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ReactiveComponentModule } from '@ngrx/component';\n\n@NgModule({\n  imports: [\n    // ... other imports\n    ReactiveComponentModule,\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyFeatureModule {}\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/component/LetModule\" class=\"code-anchor\">LetModule</a>, <a href=\"api/component/PushModule\" class=\"code-anchor\">PushModule</a> } from '@ngrx/component';\n\n@NgModule({\n  imports: [\n    // ... other imports\n    <a href=\"api/component/LetModule\" class=\"code-anchor\">LetModule</a>,\n    <a href=\"api/component/PushModule\" class=\"code-anchor\">PushModule</a>,\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyFeatureModule {}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/component/LetModule\n - api/component/PushModule\n - api/data/CorrelationIdGenerator#prefix\n - api/effects/EffectNotification#effect\n - api/effects/createEffect\n - api/effects/provideEffects\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/createSelector\n - api/store/testing/MockSelector#selector\n - guide/migration/v15#angular-cli-update\n - guide/migration/v15#breaking-changes\n - guide/migration/v15#dependencies\n - guide/migration/v15#ngrxcomponent\n - guide/migration/v15#ngrxeffects\n - guide/migration/v15#ngrxstore\n - guide/migration/v15#v15-update-guide\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/migration/v15.md?message=docs%3A%20describe%20your%20change...\n-->"
}