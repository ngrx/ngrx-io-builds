{
  "id": "guide/migration/v4",
  "title": "V4 Update Guide",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/migration/v4.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"v4-update-guide\">V4 Update Guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#v4-update-guide\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"dependencies\">Dependencies<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#dependencies\"><i class=\"material-icons\">link</i></a></h2>\n<p>You need to have the latest versions of TypeScript and RxJS to use NgRx version 4 libraries.</p>\n<p>TypeScript 2.4.x\nRxJS 5.4.x</p>\n<h2 id=\"ngrxcore\">@ngrx/core<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#ngrxcore\"><i class=\"material-icons\">link</i></a></h2>\n<p><code>@ngrx/core</code> is no longer needed and conflicts with @ngrx/store. Remove the dependency from your project.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/compose\" class=\"code-anchor\">compose</a> } from '@ngrx/core/<a href=\"api/store/compose\" class=\"code-anchor\">compose</a>';\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/compose\" class=\"code-anchor\">compose</a> } from '@ngrx/store';\n</code-example>\n<h2 id=\"ngrxstore\">@ngrx/store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#ngrxstore\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"action-interface\">Action interface<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#action-interface\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>payload</code> property has been removed from the <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code> interface. It was a source of type-safety\nissues, especially when used with <code>@ngrx/effects</code>. If your interface/class has a payload, you need to provide\nthe type.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Observable } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map } from 'rxjs/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a> } from '@ngrx/effects';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyEffects {\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  someEffect$: Observable&#x3C;<a href=\"api/store/Action\" class=\"code-anchor\">Action</a>> = this.actions$\n    .ofType(UserActions.LOGIN)\n    .pipe(\n      map(action => action.payload),\n      map(() => new AnotherAction())\n    );\n\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n}\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Observable } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map } from 'rxjs/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a> } from '@ngrx/effects';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Login } from '../actions/auth';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class MyEffects {\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  someEffect$: Observable&#x3C;<a href=\"api/store/Action\" class=\"code-anchor\">Action</a>> = this.actions$\n    .ofType&#x3C;Login>(UserActions.LOGIN)\n    .pipe(\n      map(action => action.payload),\n      map(() => new AnotherAction())\n    );\n\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n}\n</code-example>\n<p>If you prefer to keep the <code>payload</code> interface property, you can provide your own parameterized version.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface ActionWithPayload&#x3C;T> extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  payload: T;\n}\n</code-example>\n<p>And if you need an unsafe version to help with transition.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface UnsafeAction extends <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  payload?: any;\n}\n</code-example>\n<h3 id=\"registering-reducers\">Registering Reducers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#registering-reducers\"><i class=\"material-icons\">link</i></a></h3>\n<p>Previously to be AOT compatible, it was required to pass a function to the <code>provideStore</code> method to compose the reducers into one root reducer. The <code>initialState</code> was also provided to the method as an object in the second argument.</p>\n<p>BEFORE:</p>\n<p><code>reducers/index.ts</code></p>\n<code-example language=\"ts\">\nconst reducers = {\n  auth: fromAuth.reducer,\n  layout: fromLayout.reducer,\n};\n\nconst rootReducer = <a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a>(reducers);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> function <a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a>(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: any, action: any) {\n  return rootReducer(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, action);\n}\n</code-example>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a> } from './reducers';\n\n@NgModule({\n  imports: [\n    StoreModule.provideStore(<a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a>, {\n      auth: {\n        loggedIn: true,\n      },\n    }),\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<p>This has been simplified to only require a map of reducers that will be composed together by the library. A second argument is a configuration object where you provide the <code>initialState</code>.</p>\n<p>AFTER:</p>\n<p><code>reducers/index.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/ActionReducerMap\" class=\"code-anchor\">ActionReducerMap</a> } from '@ngrx/store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  auth: fromAuth.State;\n  layout: fromLayout.State;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const reducers: <a href=\"api/store/ActionReducerMap\" class=\"code-anchor\">ActionReducerMap</a>&#x3C;<a href=\"api/store/State\" class=\"code-anchor\">State</a>> = {\n  auth: fromAuth.reducer,\n  layout: fromLayout.reducer,\n};\n</code-example>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/StoreModule\" class=\"code-anchor\">StoreModule</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { reducers } from './reducers';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers, {\n      initialState: {\n        auth: {\n          loggedIn: true,\n        },\n      },\n    }),\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<h2 id=\"ngrxeffects\">@ngrx/effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#ngrxeffects\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"registering-effects\">Registering Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#registering-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>BEFORE:</p>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [EffectsModule.run(SourceA), EffectsModule.run(SourceB)],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<p>AFTER:</p>\n<p>The <code>EffectsModule.forRoot</code> method is <em>required</em> in your root <code>AppModule</code>. Provide an empty array\nif you don't need to register any root-level effects.</p>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [EffectsModule.forRoot([SourceA, SourceB, SourceC])],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<p>Import <code>EffectsModule.forFeature</code> in any NgModule, whether be the <code>AppModule</code> or a feature module.</p>\n<p><code>feature.module.ts</code></p>\n<code-example language=\"ts\">\n@NgModule({\n  imports: [\n    EffectsModule.forFeature([FeatureSourceA, FeatureSourceB, FeatureSourceC]),\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class FeatureModule {}\n</code-example>\n<h3 id=\"init-action\">Init Action<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#init-action\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>@ngrx/store/init</code> action now fires prior to effects starting. Use defer() for the same behaviour.</p>\n<p>BEFORE:</p>\n<p><code>app.effects.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Dispatcher, <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a> } from '@ngrx/effects';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as auth from '../actions/auth.actions';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppEffects {\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  init$: Observable&#x3C;<a href=\"api/store/Action\" class=\"code-anchor\">Action</a>> = this.actions$\n    .ofType(Dispatcher.INIT)\n    .switchMap(action => {\n      return of(new auth.LoginAction());\n    });\n\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n}\n</code-example>\n<p>AFTER:</p>\n<p><code>app.effects.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a> } from '@ngrx/effects';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { defer } from 'rxjs';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as auth from '../actions/auth.actions';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppEffects {\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>()\n  init$: Observable&#x3C;<a href=\"api/store/Action\" class=\"code-anchor\">Action</a>> = defer(() => {\n    return of(new auth.LoginAction());\n  });\n\n  constructor(private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>) {}\n}\n</code-example>\n<h3 id=\"testing-effects\">Testing Effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#testing-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { EffectsTestingModule, <a href=\"api/effects/EffectsRunner\" class=\"code-anchor\">EffectsRunner</a> } from '@ngrx/effects/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { MyEffects } from './my-effects';\n\ndescribe('My Effects', () => {\n  let effects: MyEffects;\n  let runner: <a href=\"api/effects/EffectsRunner\" class=\"code-anchor\">EffectsRunner</a>;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [EffectsTestingModule],\n      providers: [\n        MyEffects,\n        // other providers\n      ],\n    });\n\n    effects = TestBed.inject(MyEffects);\n    runner = TestBed.inject(<a href=\"api/effects/EffectsRunner\" class=\"code-anchor\">EffectsRunner</a>);\n  });\n\n  it('should work', () => {\n    runner.queue(SomeAction);\n\n    effects.someSource$.subscribe(result => {\n      expect(result).toBe(AnotherAction);\n    });\n  });\n});\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { TestBed } from '@angular/core/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/testing/provideMockActions\" class=\"code-anchor\">provideMockActions</a> } from '@ngrx/effects/testing';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { hot, cold } from 'jasmine-marbles';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { MyEffects } from './my-effects';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ReplaySubject } from 'rxjs/ReplaySubject';\n\ndescribe('My Effects', () => {\n  let effects: MyEffects;\n  let actions: Observable&#x3C;any>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        MyEffects,\n        <a href=\"api/effects/testing/provideMockActions\" class=\"code-anchor\">provideMockActions</a>(() => actions),\n        // other providers\n      ],\n    });\n\n    effects = TestBed.inject(MyEffects);\n  });\n\n  it('should work', () => {\n    actions = hot('--a-', { a: SomeAction, ... });\n\n    const expected = cold('--b', { b: AnotherAction });\n\n    expect(effects.someSource$).toBeObservable(expected);\n  });\n\n  it('should work also', () => {\n    actions = new ReplaySubject(1);\n\n    actions.next(SomeAction);\n\n    effects.someSource$.subscribe(result => {\n      expect(result).toBe(AnotherAction);\n    });\n  });\n});\n</code-example>\n<h2 id=\"ngrxrouter-store\">@ngrx/router-store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#ngrxrouter-store\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"registering-the-module\">Registering the module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#registering-the-module\"><i class=\"material-icons\">link</i></a></h3>\n<p>BEFORE:</p>\n<p><code>reducers/index.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromRouter from '@ngrx/router-store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  router: fromRouter.RouterState;\n}\n\nconst reducers = {\n  router: fromRouter.routerReducer,\n};\n\nconst rootReducer = <a href=\"api/store/combineReducers\" class=\"code-anchor\">combineReducers</a>(reducers);\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> function <a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a>(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>: any, action: any) {\n  return rootReducer(<a href=\"api/store-devtools/StoreDevtools#state\" class=\"code-anchor\">state</a>, action);\n}\n</code-example>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { RouterModule } from '@angular/router';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { RouterStoreModule } from '@ngrx/router-store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a> } from './reducers';\n\n@NgModule({\n  imports: [\n    StoreModule.provideStore(<a href=\"api/store/On#reducer\" class=\"code-anchor\">reducer</a>),\n    RouterModule.forRoot([\n      // some routes\n    ])\n    RouterStoreModule.connectRouter()\n  ]\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<p>AFTER:</p>\n<p><code>reducers/index.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromRouter from '@ngrx/router-store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> interface <a href=\"api/store/State\" class=\"code-anchor\">State</a> {\n  <a href=\"api/router-store/routerReducer\" class=\"code-anchor\">routerReducer</a>: fromRouter.RouterReducerState;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const reducers = {\n  <a href=\"api/router-store/routerReducer\" class=\"code-anchor\">routerReducer</a>: fromRouter.routerReducer,\n};\n</code-example>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/router-store/StoreRouterConnectingModule\" class=\"code-anchor\">StoreRouterConnectingModule</a> } from '@ngrx/router-store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { reducers } from './reducers';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers),\n    RouterModule.forRoot([\n      // some routes\n    ]),\n    <a href=\"api/router-store/StoreRouterConnectingModule\" class=\"code-anchor\">StoreRouterConnectingModule</a>,\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<h3 id=\"navigation-actions\">Navigation actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#navigation-actions\"><i class=\"material-icons\">link</i></a></h3>\n<p>Navigation actions are not provided as part of the V4 package. You provide your own\ncustom navigation actions that use the <code>Router</code> within effects to navigate.</p>\n<p>BEFORE:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { go, back, forward } from '@ngrx/router-store';\n\nstore.dispatch(\n  go(['/path', { routeParam: 1 }], { page: 1 }, { replaceUrl: false })\n);\n\nstore.dispatch(back());\n\nstore.dispatch(forward());\n</code-example>\n<p>AFTER:</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { NavigationExtras } from '@angular/router';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const GO = '[Router] Go';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BACK = '[Router] Back';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const FORWARD = '[Router] Forward';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class Go implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly type = GO;\n\n  constructor(\n    public payload: {\n      path: any[];\n      query?: object;\n      <a href=\"api/data/ChangeSet#extras\" class=\"code-anchor\">extras</a>?: NavigationExtras;\n    }\n  ) {}\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class Back implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly type = BACK;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class Forward implements <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> {\n  readonly type = FORWARD;\n}\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> type <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a> = Go | Back | Forward;\n</code-example>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as RouterActions from './actions/router';\n\nstore.dispatch(new RouterActions.Go({\n  path: ['/path', { routeParam: 1 }],\n  query: { page: 1 },\n  <a href=\"api/data/ChangeSet#extras\" class=\"code-anchor\">extras</a>: { replaceUrl: false }\n});\n\nstore.dispatch(new RouterActions.Back());\n\nstore.dispatch(new RouterActions.Forward());\n</code-example>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Router } from '@angular/router';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Location } from '@angular/common';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>, <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a> } from '@ngrx/effects';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, tap } from 'rxjs/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as RouterActions from './actions/router';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class RouterEffects {\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  navigate$ = this.actions$.ofType(RouterActions.GO).pipe(\n    map((action: RouterActions.Go) => action.payload),\n    tap(({ path, query: <a href=\"api/router-store/MinimalActivatedRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a>, <a href=\"api/data/ChangeSet#extras\" class=\"code-anchor\">extras</a> }) =>\n      this.router.navigate(path, { <a href=\"api/router-store/MinimalActivatedRouteSnapshot#queryParams\" class=\"code-anchor\">queryParams</a>, ...extras })\n    )\n  );\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  navigateBack$ = this.actions$\n    .ofType(RouterActions.BACK)\n    .do(() => this.location.back());\n\n  @<a href=\"api/effects/Effect\" class=\"code-anchor\">Effect</a>({ dispatch: false })\n  navigateForward$ = this.actions$\n    .ofType(RouterActions.FORWARD)\n    .do(() => this.location.forward());\n\n  constructor(\n    private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n</code-example>\n<h2 id=\"ngrxstore-devtools\">@ngrx/store-devtools<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#ngrxstore-devtools\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"instrumentation-method\">Instrumentation method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/migration/v4#instrumentation-method\"><i class=\"material-icons\">link</i></a></h3>\n<p><strong>NOTE:</strong> store-devtools currently causes severe performance problems when\nused with router-store. We are working to\n<a href=\"https://github.com/ngrx/platform/issues/97\">fix this</a>, but for now, avoid\nusing them together.</p>\n<p>BEFORE:</p>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store-devtools/StoreDevtoolsModule\" class=\"code-anchor\">StoreDevtoolsModule</a> } from '@ngrx/store-devtools';\n\n@NgModule({\n  imports: [\n    StoreDevtoolsModule.instrumentStore({ <a href=\"api/store-devtools/StoreDevtoolsConfig#maxAge\" class=\"code-anchor\">maxAge</a>: 50 }),\n    // OR\n    StoreDevtoolsModule.instrumentOnlyWithExtension({\n      <a href=\"api/store-devtools/StoreDevtoolsConfig#maxAge\" class=\"code-anchor\">maxAge</a>: 50,\n    }),\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n<p>AFTER:</p>\n<p><code>app.module.ts</code></p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store-devtools/StoreDevtoolsModule\" class=\"code-anchor\">StoreDevtoolsModule</a> } from '@ngrx/store-devtools';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { environment } from '../environments/environment'; // Angular CLI environment\n\n@NgModule({\n  imports: [\n    !environment.production\n      ? StoreDevtoolsModule.instrument({ <a href=\"api/store-devtools/StoreDevtoolsConfig#maxAge\" class=\"code-anchor\">maxAge</a>: 50 })\n      : [],\n  ],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AppModule {}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/ChangeSet#extras\n - api/effects/Actions\n - api/effects/Effect\n - api/effects/EffectsRunner\n - api/effects/testing/provideMockActions\n - api/router-store/MinimalActivatedRouteSnapshot#queryParams\n - api/router-store/StoreRouterConnectingModule\n - api/router-store/routerReducer\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store-devtools/StoreDevtools#state\n - api/store-devtools/StoreDevtoolsConfig#maxAge\n - api/store-devtools/StoreDevtoolsModule\n - api/store/Action\n - api/store/ActionReducerMap\n - api/store/On#reducer\n - api/store/State\n - api/store/StoreModule\n - api/store/combineReducers\n - api/store/compose\n - guide/migration/v4#action-interface\n - guide/migration/v4#dependencies\n - guide/migration/v4#init-action\n - guide/migration/v4#instrumentation-method\n - guide/migration/v4#navigation-actions\n - guide/migration/v4#ngrxcore\n - guide/migration/v4#ngrxeffects\n - guide/migration/v4#ngrxrouter-store\n - guide/migration/v4#ngrxstore\n - guide/migration/v4#ngrxstore-devtools\n - guide/migration/v4#registering-effects\n - guide/migration/v4#registering-reducers\n - guide/migration/v4#registering-the-module\n - guide/migration/v4#testing-effects\n - guide/migration/v4#v4-update-guide\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/migration/v4.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/ngrx/platform/issues/97\n-->"
}