{
  "id": "guide/effects/operators",
  "title": "Effects operators",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/operators.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"effects-operators\">Effects operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#effects-operators\"><i class=\"material-icons\">link</i></a></h1>\n<p>As part of the <code>Effects</code> library, NgRx provides some useful operators that are frequently\nused. </p>\n<h2 id=\"oftype\"><code><a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#oftype\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a></code> operator filters the stream of actions based on either string\nvalues (that represent <code>type</code>s of actions) or Action Creators.</p>\n<p>The generic for the <code><a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>&#x3C;TypeUnion></code> must be provided in order for type\ninference to work properly with string values. Action Creators that are based on\n<code><a href=\"api/store/createAction\" class=\"code-anchor\">createAction</a></code> function do not have the same limitation.</p>\n<p>The <code><a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a></code> operator takes up to 5 arguments with proper type inference. It can\ntake even more, however the type would be inferred as an <code><a href=\"api/store/Action\" class=\"code-anchor\">Action</a></code> interface.</p>\n<code-example header=\"auth.effects.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>, <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a> } from '@ngrx/effects';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { of } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { catchError, exhaustMap, map } from 'rxjs/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  LoginPageActions,\n  AuthApiActions,\n} from '../actions';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Credentials } from '../models/user';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { AuthService } from '../<a href=\"api/data/EntityDataService#services\" class=\"code-anchor\">services</a>/auth.service';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class AuthEffects {\n  login$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      // Filters by <a href=\"api/store/Action\" class=\"code-anchor\">Action</a> <a href=\"api/store/Creator\" class=\"code-anchor\">Creator</a> 'login'\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(LoginPageActions.login),\n      exhaustMap(action =>\n        this.authService.login(action.credentials).pipe(\n          map(user => AuthApiActions.loginSuccess({ user })),\n          catchError(error => of(AuthApiActions.loginFailure({ error })))\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n    private authService: AuthService\n  ) {}\n}\n</code-example>\n<h2 id=\"concatlatestfrom\"><code><a href=\"api/effects/concatLatestFrom\" class=\"code-anchor\">concatLatestFrom</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/effects/operators#concatlatestfrom\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/effects/concatLatestFrom\" class=\"code-anchor\">concatLatestFrom</a></code> operator functions similarly to <code>withLatestFrom</code> with one important difference-\nit lazily evaluates the provided Observable factory.</p>\n<p>This allows you to utilize the source value when selecting additional sources to concat.</p>\n<p>Additionally, because the factory is not executed until it is needed, it also mitigates the performance impact of creating some kinds of Observables.</p>\n<p>For example, when selecting data from the store with <code>store.select</code>, <code><a href=\"api/effects/concatLatestFrom\" class=\"code-anchor\">concatLatestFrom</a></code> will prevent the\nselector from being evaluated until the source emits a value.</p>\n<p>The <code><a href=\"api/effects/concatLatestFrom\" class=\"code-anchor\">concatLatestFrom</a></code> operator takes an Observable factory function that returns an array of Observables, or a single Observable.</p>\n<code-example header=\"router.effects.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Title } from '@angular/platform-browser';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, tap } from 'rxjs/operators';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {<a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>, <a href=\"api/effects/concatLatestFrom\" class=\"code-anchor\">concatLatestFrom</a>, <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>, <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>} from '@ngrx/effects';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> } from '@ngrx/store';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/router-store/routerNavigatedAction\" class=\"code-anchor\">routerNavigatedAction</a> } from '@ngrx/router-store';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> * as fromRoot from '@example-app/reducers';\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class RouterEffects {\n  updateTitle$ = <a href=\"api/effects/createEffect\" class=\"code-anchor\">createEffect</a>(() =>\n    this.actions$.pipe(\n      <a href=\"api/effects/ofType\" class=\"code-anchor\">ofType</a>(<a href=\"api/router-store/routerNavigatedAction\" class=\"code-anchor\">routerNavigatedAction</a>),\n      <a href=\"api/effects/concatLatestFrom\" class=\"code-anchor\">concatLatestFrom</a>(() => this.store.select(fromRoot.selectRouteData)),\n      map(([, data]) => `Book Collection - ${data['title']}`),\n      tap((title) => this.titleService.setTitle(title))\n    ),\n    {\n      dispatch: false,\n    }\n  );\n\n  constructor(\n    private actions$: <a href=\"api/effects/Actions\" class=\"code-anchor\">Actions</a>,\n    private store: <a href=\"api/store/Store\" class=\"code-anchor\">Store</a><fromroot class=\"state\">,\n    private titleService: Title\n  ) {}\n}\n</fromroot></code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/effects\n-->\n<!-- links from this doc:\n - api/data/EntityDataService#services\n - api/effects/Actions\n - api/effects/concatLatestFrom\n - api/effects/createEffect\n - api/effects/ofType\n - api/router-store/routerNavigatedAction\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/Action\n - api/store/Creator\n - api/store/Store\n - api/store/createAction\n - guide/effects/operators#concatlatestfrom\n - guide/effects/operators#effects-operators\n - guide/effects/operators#oftype\n - https://github.com/ngrx/platform/edit/master/projects/ngrx.io/content/guide/effects/operators.md?message=docs%3A%20describe%20your%20change...\n-->"
}