{
  "id": "guide/signals/rxjs-integration",
  "title": "RxJS Integration",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/rxjs-integration.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"rxjs-integration\">RxJS Integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#rxjs-integration\"><i class=\"material-icons\">link</i></a></h1>\n<p>RxJS is still a major part of NgRx and the Angular ecosystem, and the <code>@ngrx/signals</code> package provides <strong>opt-in</strong> integration with RxJS APIs through the <code><a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a></code> plugin.</p>\n<h2 id=\"rxmethod\">RxMethod<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#rxmethod\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> is a standalone factory function designed for managing side effects by utilizing RxJS APIs.\nIt takes a chain of RxJS operators as input and returns a reactive method.\nThe reactive method can accept a static value, signal, or observable as an input argument.\nInput can be typed by providing a generic argument to the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, pipe, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent {\n  // ðŸ‘‡ This reactive <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> will have an input argument\n  // of <a href=\"api/signals/type\" class=\"code-anchor\">type</a> `number | Signal&#x3C;number> | Observable&#x3C;number>`.\n  readonly logDoubledNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(\n    // ðŸ‘‡ RxJS operators are chained together using the `pipe` function.\n    pipe(\n      map((num) => num * 2),\n      tap(console.log)\n    )\n  );\n}\n</code-example>\n<p>Each invocation of the reactive method pushes the input value through the reactive chain.\nWhen called with a static value, the reactive chain executes once.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, pipe, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent implements OnInit {\n  readonly logDoubledNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(\n    pipe(\n      map((num) => num * 2),\n      tap(console.log)\n    )\n  );\n\n  ngOnInit(): void {\n    this.logDoubledNumber(1);\n    // console output: 2\n    \n    this.logDoubledNumber(2);\n    // console output: 4\n  }\n}\n</code-example>\n<p>When a reactive method is called with a signal, the reactive chain is executed every time the signal value changes.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, OnInit, signal } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { map, pipe, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent implements OnInit {\n  readonly logDoubledNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(\n    pipe(\n      map((num) => num * 2),\n      tap(console.log)\n    )\n  );\n\n  ngOnInit(): void {\n    const num = signal(10);\n    this.logDoubledNumber(num);\n    // console output: 20\n    \n    num.set(20);\n    // console output: 40\n  }\n}\n</code-example>\n<p>When a reactive method is called with an observable, the reactive chain is executed every time the observable emits a new value.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { interval, map, of, pipe, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent implements OnInit {\n  readonly logDoubledNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(\n    pipe(\n      map((num) => num * 2),\n      tap(console.log)\n    )\n  );\n\n  ngOnInit(): void {\n    const num1$ = of(100, 200, 300);\n    this.logDoubledNumber(num1$);\n    // console output: 200, 400, 600\n    \n    const num2$ = interval(2_000);\n    this.logDoubledNumber(num2$);\n    // console output: 0, 2, 4, 6, 8, 10, ... (every 2 seconds)\n  }\n}\n</code-example>\n<p>By default, the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> needs to be executed within an injection context.\nIt's tied to its lifecycle and is automatically cleaned up when the injector is destroyed.</p>\n<h3 id=\"handling-api-calls\">Handling API Calls<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#handling-api-calls\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> is a great choice for handling API calls in a reactive manner.\nThe subsequent example demonstrates how to use <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> to fetch the book by id whenever the <code>selectedBookId</code> signal value changes.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, inject, OnInit, signal } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { concatMap, <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>, pipe } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { tapResponse } from '@ngrx/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksService } from './books.service';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent implements OnInit {\n  readonly #booksService = inject(BooksService);\n  \n  readonly bookMap = signal&#x3C;Record&#x3C;string, Book>>({});\n  readonly selectedBookId = signal&#x3C;string | null>(null);\n\n  readonly loadBookById = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;string | null>(\n    pipe(\n      <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>((<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) => !!<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a> &#x26;&#x26; !this.bookMap()[<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>]),\n      concatMap((<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>) => {\n        return this.#booksService.getById(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>).pipe(\n          tapResponse({\n            next: (book) => this.addBook(book),\n            error: console.error,\n          })\n        );\n      })\n    )\n  );\n  \n  ngOnInit(): void {\n    // ðŸ‘‡ Load book by <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a> whenever the `selectedBookId` <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> changes.\n    this.loadBookById(this.selectedBookId);\n  }\n  \n  addBook(book: Book): void {\n    this.bookMap.update((bookMap) => ({ ...bookMap, [book.id]: book }));\n  }\n}\n</code-example>\n<div class=\"alert is-important\">\n<p>For safe handling of API responses, it is recommended to use the <code>tapResponse</code> operator from the <code>@ngrx/operators</code> package.\nLearn more about it in the <a href=\"guide/operators/operators#tapresponse\">tapResponse</a> guide.</p>\n</div>\n<p>The <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function can also be utilized to define reactive methods for SignalStore.\nFurther details can be found in the <a href=\"guide/signals/signal-store#reactive-store-methods\">Reactive Store Methods</a> guide.</p>\n<h3 id=\"reactive-methods-without-arguments\">Reactive Methods without Arguments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#reactive-methods-without-arguments\"><i class=\"material-icons\">link</i></a></h3>\n<p>To create a reactive method without arguments, the <code>void</code> type should be specified as a generic argument to the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, inject, OnInit, signal } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { exhaustMap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { tapResponse } from '@ngrx/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksService } from './books.service';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent implements OnInit {\n  readonly #booksService = inject(BooksService);\n  readonly books = signal&#x3C;Book[]>([]);\n\n  // ðŸ‘‡ Creating a reactive <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> without arguments.\n  readonly loadAllBooks = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;void>(\n    exhaustMap(() => {\n      return this.#booksService.getAll().pipe(\n        tapResponse({\n          next: (books) => this.books.set(books),\n          error: console.error,\n        })\n      );\n    })\n  );\n  \n  ngOnInit(): void {\n    this.loadAllBooks();\n  }\n}\n</code-example>\n<h3 id=\"manual-cleanup\">Manual Cleanup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#manual-cleanup\"><i class=\"material-icons\">link</i></a></h3>\n<p>If a reactive method needs to be cleaned up before the injector is destroyed, manual cleanup can be performed by calling the <code>unsubscribe</code> method.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { interval, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent implements OnInit {\n  readonly logNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(tap(console.log));\n\n  ngOnInit(): void {\n    const num1$ = interval(500);\n    const num2$ = interval(1_000);\n    \n    this.logNumber(num1$);\n    this.logNumber(num2$);\n    \n    setTimeout(() => {\n      // ðŸ‘‡ Clean up all reactive <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> subscriptions after 3 seconds.\n      this.logNumber.unsubscribe();\n    }, 3_000);\n  }\n}\n</code-example>\n<p>When invoked, the reactive method returns a subscription.\nUsing this subscription allows manual unsubscribing from a specific call, preserving the activity of other reactive method calls until the corresponding injector is destroyed.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { interval, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent implements OnInit {\n  readonly logNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(tap(console.log));\n\n  ngOnInit(): void {\n    const num1$ = interval(500);\n    const num2$ = interval(1_000);\n    \n    const num1Sub = this.logNumber(num1$);\n    this.logNumber(num2$);\n    \n    setTimeout(() => {\n      // ðŸ‘‡ Clean up the first reactive <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> subscription after 2 seconds.\n      num1Sub.unsubscribe();\n    }, 2_000);\n  }\n}\n</code-example>\n<h3 id=\"initialization-outside-of-injection-context\">Initialization Outside of Injection Context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#initialization-outside-of-injection-context\"><i class=\"material-icons\">link</i></a></h3>\n<p>Initialization of the reactive method outside an injection context is possible by providing an injector as the second argument to the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, inject, Injector, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class NumbersComponent implements OnInit {\n  readonly #injector = inject(Injector);\n\n  ngOnInit(): void {\n    const logNumber = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;number>(\n      tap(console.log),\n      { injector: this.#injector }\n    );\n\n    logNumber(10);\n  }\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n-->\n<!-- links from this doc:\n - api/data/EntityCollection#filter\n - api/data/RequestData#method\n - api/data/UpdateResponseData#id\n - api/signals/rxjs-interop\n - api/signals/rxjs-interop/rxMethod\n - api/signals/type\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#value\n - guide/operators/operators#tapresponse\n - guide/signals/rxjs-integration#handling-api-calls\n - guide/signals/rxjs-integration#initialization-outside-of-injection-context\n - guide/signals/rxjs-integration#manual-cleanup\n - guide/signals/rxjs-integration#reactive-methods-without-arguments\n - guide/signals/rxjs-integration#rxjs-integration\n - guide/signals/rxjs-integration#rxmethod\n - guide/signals/signal-store#reactive-store-methods\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/rxjs-integration.md?message=docs%3A%20describe%20your%20change...\n-->"
}