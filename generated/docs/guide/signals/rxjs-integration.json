{
  "id": "guide/signals/rxjs-integration",
  "title": "RxJS Integration",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/rxjs-integration.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"rxjs-integration\">RxJS Integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/rxjs-integration#rxjs-integration\"><i class=\"material-icons\">link</i></a></h1>\n<p>RxJS is still a major part of NgRx and the Angular ecosystem, and the NgRx Signals package provides <strong>opt-in</strong> usage to interact with RxJS observables using the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function.</p>\n<p>The <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function allows you to define a method that can receive a signal or observable, read its latest values, and perform additional operations with an observable.</p>\n<code-example header=\"users.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { debounceTime, distinctUntilChanged, pipe, switchMap, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>,\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n} from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { tapResponse } from '@ngrx/operators';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { User } from './user.model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { UsersService } from './users.service';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> <a href=\"api/store/State\" class=\"code-anchor\">State</a> = { users: User[]; isLoading: boolean; query: string };\n\nconst initialState: <a href=\"api/store/State\" class=\"code-anchor\">State</a> = {\n  users: [],\n  isLoading: false,\n  query: '',\n};\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const UsersStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  { providedIn: 'root' },\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store, usersService = inject(UsersService)) => ({\n    updateQuery(query: string) {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { query });\n    },\n    loadByQuery: <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;;string>(\n      pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        tap(() => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: true })),\n        switchMap((query) =>\n          usersService.getByQuery(query).pipe(\n            tapResponse({\n              next: (users) => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { users }),\n              error: console.error,\n              finalize: () => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: false }),\n            }),\n          ),\n        ),\n      ),\n    ),\n  })),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({\n    onInit({ loadByQuery, query }) {\n      loadByQuery(query);\n    },\n  }),\n);\n</code-example>\n<p>The example <code>UserStore</code> above uses the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> operator to create a method that loads the users on initialization of the store based on a query string.</p>\n<p>The <code>UsersStore</code> can then be used in the component, along with its additional methods, providing a clean, structured way to manage state with signals, combined with the power of RxJS observable streams for asynchronous behavior.</p>\n<code-example header=\"users.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component, inject } from '@angular/core';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { SearchBoxComponent } from './ui/search-box.component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { UserListComponent } from './ui/user-list.component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { UsersStore } from './users.store';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-users',\n  standalone: true,\n  imports: [SearchBoxComponent, UserListComponent],\n  template: `\n    &#x3C;h1>Users (RxJS Integration)&#x3C;/h1>\n\n    &#x3C;app-search-box\n      [query]=\"store.query()\"\n      (queryChange)=\"store.updateQuery($event)\"\n    />\n\n    &#x3C;app-user-list [users]=\"store.users()\" [isLoading]=\"store.isLoading()\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> default class UsersComponent {\n  readonly store = inject(UsersStore);\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n-->\n<!-- links from this doc:\n - api/signals/patchState\n - api/signals/rxjs-interop\n - api/signals/rxjs-interop/rxMethod\n - api/signals/signalStore\n - api/signals/type\n - api/signals/withHooks\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/State\n - api/store/testing/MockSelector#selector\n - guide/signals/rxjs-integration#rxjs-integration\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/rxjs-integration.md?message=docs%3A%20describe%20your%20change...\n-->"
}