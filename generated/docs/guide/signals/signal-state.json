{
  "id": "guide/signals/signal-state",
  "title": "SignalState",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-state.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"signalstate\">SignalState<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#signalstate\"><i class=\"material-icons\">link</i></a></h1>\n<p>SignalState is a lightweight utility designed for managing signal-based state in a concise and minimalistic manner.\nIt's suitable for managing modest-sized states and can be used directly in components, services, or standalone functions.</p>\n<h2 id=\"creating-a-signalstate\">Creating a SignalState<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#creating-a-signalstate\"><i class=\"material-icons\">link</i></a></h2>\n<p>SignalState is instantiated using the <code><a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a></code> function, which accepts an initial state as an input argument.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { User } from './user.model';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> UserState = { user: User; isAdmin: boolean };\n\nconst userState = <a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a>&#x3C;UserState>({\n  user: { firstName: 'Eric', lastName: 'Clapton' },\n  isAdmin: false,\n});\n</code-example>\n<p>The state's type must be a record/object literal. Add arrays or primitive values to properties.</p>\n<p><code><a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a></code> returns an extended version of a signal that possesses all the capabilities of a read-only signal.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed, <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a> } from '@angular/core';\n\n// ðŸ‘‡ Creating computed signals.\nconst userStateStr = computed(() => JSON.stringify(userState()));\n\n// ðŸ‘‡ Performing side effects.\n<a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>(() => console.log('userState', userState()));\n</code-example>\n<p>Additionally, the <code><a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a></code> function generates signals for each state property.</p>\n<code-example language=\"ts\">\nconst user = userState.user; // <a href=\"api/signals/type\" class=\"code-anchor\">type</a>: <a href=\"api/signals/DeepSignal\" class=\"code-anchor\">DeepSignal</a>&#x3C;User>\nconst isAdmin = userState.isAdmin; // <a href=\"api/signals/type\" class=\"code-anchor\">type</a>: Signal&#x3C;boolean>\n\nconsole.log(user()); // logs: { firstName: 'Eric', lastName: 'Clapton' }\nconsole.log(isAdmin()); // logs: false\n</code-example>\n<p>When a state property holds an object as its value, the <code><a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a></code> function generates a <code><a href=\"api/signals/DeepSignal\" class=\"code-anchor\">DeepSignal</a></code>.\nIt can be used as a regular read-only signal, but it also contains signals for each property of the object it refers to.</p>\n<code-example language=\"ts\">\nconst firstName = user.firstName; // <a href=\"api/signals/type\" class=\"code-anchor\">type</a>: Signal&#x3C;string>\nconst lastName = user.lastName; // <a href=\"api/signals/type\" class=\"code-anchor\">type</a>: Signal&#x3C;string>\n\nconsole.log(firstName()); // logs: 'Eric'\nconsole.log(lastName()); // logs: 'Clapton'\n</code-example>\n<div class=\"alert is-helpful\">\n<p>For enhanced performance, deeply nested signals are generated lazily and initialized only upon first access.</p>\n</div>\n<h2 id=\"updating-state\">Updating State<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#updating-state\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code> function provides a type-safe way to perform updates on pieces of state.\nIt takes a SignalState or SignalStore instance as the first argument, followed by a sequence of partial states or partial state updaters as additional arguments.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a> } from '@ngrx/signals';\n\n// ðŸ‘‡ Providing a partial state object.\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(userState, { isAdmin: true });\n\n// ðŸ‘‡ Providing a partial state updater.\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(userState, (state) => ({\n  user: { ...state.user, firstName: 'Jimi' },\n}));\n\n// ðŸ‘‡ Providing a sequence of partial state objects and/or updaters.\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  userState,\n  { isAdmin: false },\n  (state) => ({ user: { ...state.user, lastName: 'Hendrix' } })\n);\n</code-example>\n<div class=\"alert is-critical\">\n<p>Updaters passed to the <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code> function must perform state updates in an immutable manner.\nIf a mutable change occurs to the state object, an error will be thrown in development mode.</p>\n</div>\n<h3 id=\"custom-state-updaters\">Custom State Updaters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#custom-state-updaters\"><i class=\"material-icons\">link</i></a></h3>\n<p>Instead of providing partial states or updaters directly to the <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code> function, it's possible to create custom state updaters.</p>\n<code-example language=\"ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/PartialStateUpdater\" class=\"code-anchor\">PartialStateUpdater</a> } from '@ngrx/signals';\n\nfunction setFirstName(firstName: string): <a href=\"api/signals/PartialStateUpdater\" class=\"code-anchor\">PartialStateUpdater</a>&#x3C;{ user: User }> {\n  return (state) => ({ user: { ...state.user, firstName } });\n}\n\nconst setAdmin = () => ({ isAdmin: true });\n</code-example>\n<p>Custom state updaters are easy to test and can be reused across different parts of the application.</p>\n<code-example language=\"ts\">\n// Before:\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(userState, (state) => ({\n  user: { ...state.user, firstName: 'Stevie' },\n  isAdmin: true,\n}));\n\n// After:\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(userState, setFirstName('Stevie'), setAdmin());\n</code-example>\n<h2 id=\"usage\">Usage<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#usage\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"example-1-signalstate-in-a-component\">Example 1: SignalState in a Component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#example-1-signalstate-in-a-component\"><i class=\"material-icons\">link</i></a></h3>\n<code-example header=\"counter.component.ts\" linenums=\"true\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a>, <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a> } from '@ngrx/signals';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'ngrx-counter',\n  standalone: true,\n  template: `\n    &#x3C;p>Count: {{ state.count() }}&#x3C;/p>\n\n    &#x3C;button (click)=\"increment()\">Increment&#x3C;/button>\n    &#x3C;button (click)=\"decrement()\">Decrement&#x3C;/button>\n    &#x3C;button (click)=\"reset()\">Reset&#x3C;/button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class CounterComponent {\n  readonly state = <a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a>({ count: 0 });\n\n  increment(): void {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.state, (state) => ({ count: state.count + 1 }));\n  }\n\n  decrement(): void {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.state, (state) => ({ count: state.count - 1 }));\n  }\n\n  reset(): void {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.state, { count: 0 });\n  }\n}\n\n</code-example>\n<h3 id=\"example-2-signalstate-in-a-service\">Example 2: SignalState in a Service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#example-2-signalstate-in-a-service\"><i class=\"material-icons\">link</i></a></h3>\n<code-tabs linenums=\"true\">\n<code-pane header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { inject, Injectable } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { exhaustMap, pipe, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a>, <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/operators/tapResponse\" class=\"code-anchor\">tapResponse</a> } from '@ngrx/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksService } from './books.service';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = { books: Book[]; isLoading: boolean };\n\nconst initialState: BooksState = {\n  books: [],\n  isLoading: false,\n};\n\n@Injectable()\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksStore {\n  readonly #booksService = inject(BooksService);\n  readonly #state = <a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a>(initialState);\n\n  readonly books = this.#state.books;\n  readonly isLoading = this.#state.isLoading;\n\n  readonly loadBooks = <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;void>(\n    pipe(\n      tap(() => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.#state, { isLoading: true })),\n      exhaustMap(() => {\n        return this.#booksService.getAll().pipe(\n          <a href=\"api/operators/tapResponse\" class=\"code-anchor\">tapResponse</a>({\n            next: (books) => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.#state, { books }),\n            error: console.error,\n            finalize: () => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.#state, { isLoading: false }),\n          })\n        );\n      })\n    )\n  );\n}\n\n</code-pane>\n\n<code-pane header=\"books.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksStore } from './books.store';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'ngrx-books',\n  standalone: true,\n  template: `\n    &#x3C;h1>Books&#x3C;/h1>\n  \n    @if (store.isLoading()) {\n      &#x3C;p>Loading...&#x3C;/p>\n    } @else {\n      &#x3C;ul>\n        @for (book of store.books(); track book.id) {\n          &#x3C;li>{{ book.title }}&#x3C;/li>\n        }\n      &#x3C;/ul>\n    }\n  `,\n  providers: [BooksStore],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent implements OnInit {\n  readonly store = inject(BooksStore);\n\n  ngOnInit(): void {\n    this.store.loadBooks();\n  }\n}\n\n</code-pane>\n</code-tabs>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n-->\n<!-- links from this doc:\n - api/effects/EffectNotification#effect\n - api/operators/tapResponse\n - api/signals/DeepSignal\n - api/signals/PartialStateUpdater\n - api/signals/patchState\n - api/signals/rxjs-interop\n - api/signals/rxjs-interop/rxMethod\n - api/signals/signalState-0\n - api/signals/type\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#selector\n - guide/signals/signal-state#creating-a-signalstate\n - guide/signals/signal-state#custom-state-updaters\n - guide/signals/signal-state#example-1-signalstate-in-a-component\n - guide/signals/signal-state#example-2-signalstate-in-a-service\n - guide/signals/signal-state#signalstate\n - guide/signals/signal-state#updating-state\n - guide/signals/signal-state#usage\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-state.md?message=docs%3A%20describe%20your%20change...\n-->"
}