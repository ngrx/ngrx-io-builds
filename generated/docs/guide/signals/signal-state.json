{
  "id": "guide/signals/signal-state",
  "title": "SignalState",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-state.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"signalstate\">SignalState<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-state#signalstate\"><i class=\"material-icons\">link</i></a></h1>\n<p>Not every piece of state needs its own store. For this use case, <code>@ngrx/signals</code> comes with a <code><a href=\"api/signals/signalState\" class=\"code-anchor\">signalState</a></code> utility.</p>\n<p>The <code><a href=\"api/signals/signalState\" class=\"code-anchor\">signalState</a></code> function is used: </p>\n<ul>\n<li>To create and operate on small slices of state.</li>\n<li>Directly in your component class, service, or a standalone function.</li>\n<li>Provide a deeply nested signal of the object properties.</li>\n</ul>\n<code-example header=\"counter.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalState\" class=\"code-anchor\">signalState</a>, <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a> } from '@ngrx/signals';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-counter',\n  standalone: true,\n  template: `\n    Count: {{ state.count() }} \n\n    &#x3C;button (click)=\"increment()\">Increment&#x3C;/button>\n    &#x3C;button (click)=\"decrement()\">Decrement&#x3C;/button>\n    &#x3C;button (click)=\"reset()\">Reset&#x3C;/button>\n  `,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class CounterComponent {\n  state = <a href=\"api/signals/signalState\" class=\"code-anchor\">signalState</a>({ count: 0 });\n\n  increment() {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.state, (state) => ({ count: state.count + 1 }));\n  }\n\n  decrement() {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.state, (state) => ({ count: state.count - 1 }));\n  }\n\n  reset() {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.state, { count: 0 });\n  }\n}\n</code-example>\n<p>The <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code> utility function provides a type-safe way to perform immutable updates on pieces of state.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n-->\n<!-- links from this doc:\n - api/signals/patchState\n - api/signals/signalState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#selector\n - guide/signals/signal-state#signalstate\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-state.md?message=docs%3A%20describe%20your%20change...\n-->"
}