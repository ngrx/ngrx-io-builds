{
  "id": "guide/signals/signal-store/entity-management",
  "title": "Entity Management",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/entity-management.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"entity-management\">Entity Management<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#entity-management\"><i class=\"material-icons\">link</i></a></h1>\n<p><code><a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a></code> is an extension to facilitate CRUD operations for managing entities. It shares similarities with @ngrx/entity but is part of the SignalStore.</p>\n<p>It doesn't include methods for backend communication. You have to implement them separately.</p>\n<h2 id=\"creating-the-store\">Creating the Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#creating-the-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>A store implementing a <code>Todo</code> entity can have the following implementation:</p>\n<code-example language=\"typescript\">\ninterface Todo {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number;\n  name: string;\n  finished: boolean;\n}\n\nconst TodoStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(<a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>&#x3C;Todo>());\n</code-example>\n<p><code><a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a></code> adds three properties of type <code>Signal</code> to the <code>TodoStore</code>.</p>\n<ul>\n<li><code><a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a>: Signal&#x3C;<a href=\"api/signals/entities/EntityId\" class=\"code-anchor\">EntityId</a>[]></code>: ids of all entities</li>\n<li><code><a href=\"api/signals/entities\" class=\"code-anchor\">entities</a>: Signal&#x3C;Todo[]></code>: array of all entities</li>\n<li><code>entityMap: Signal&#x3C;EntityMap&#x3C;Todo>></code>: map of entities where the key is the id (<code><a href=\"api/signals/entities/EntityId\" class=\"code-anchor\">EntityId</a></code>)</li>\n</ul>\n<p><code><a href=\"api/signals/entities\" class=\"code-anchor\">entities</a></code> is a computed Signal that derives from the non-computed Signals <code><a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a></code> and <code>entityMap</code>.</p>\n<p>By default, <code><a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a></code> requires your entity to have a property of name <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code>, which serves as a unique identifier. <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code> has to be of type <code><a href=\"api/signals/entities/EntityId\" class=\"code-anchor\">EntityId</a></code>, which is a <code>number</code> or a <code>string</code>.</p>\n<h2 id=\"adding--setting\">Adding &#x26; Setting<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#adding--setting\"><i class=\"material-icons\">link</i></a></h2>\n<p><code><a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a></code> and <code><a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a></code> add entries to the store. They act as updater functions for <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code>.</p>\n<p>Here is an example on how to use them inside a component.</p>\n<code-example language=\"typescript\">\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'ngrx-todos',\n  template: `\n    &#x3C;ul>\n      @for (todo of todoStore.entities(); track todo.id) {\n        &#x3C;li>{{ todo.name }}&#x3C;/li>\n      }\n    &#x3C;/ul>\n  `,\n  standalone: true,\n  providers: [TodoStore],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class TodosComponent implements OnInit {\n  todoStore = inject(TodoStore);\n\n  ngOnInit() {\n    // add a single entity\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a>({ <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Car Washing', finished: false }));\n\n    // add multiple <a href=\"api/signals/entities\" class=\"code-anchor\">entities</a>\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n      this.todoStore,\n      <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>([\n        { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Car Washing', finished: false },\n        { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Room Cleaning', finished: false },\n      ])\n    );\n  }\n}\n</code-example>\n<p>If you add an entity with an existing id, the original entity is not overwritten, and no error is thrown.</p>\n<p>In this example, the todo remains as \"Cat Feeding\".</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a>({ <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Cat Feeding', finished: false }));\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a>({ <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Dog Feeding', finished: false }));\n</code-example>\n<hr>\n<p>Updaters <code><a href=\"api/signals/entities/setEntity\" class=\"code-anchor\">setEntity</a></code> and <code><a href=\"api/signals/entities/setEntities\" class=\"code-anchor\">setEntities</a></code> are used to add new or replace existing entities from a collection.</p>\n<p>In this example, we add a new <code>Todo</code> entity with \"Cat Feeding\" and replace it with \"Dog Feeding\".</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/setEntity\" class=\"code-anchor\">setEntity</a>({<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Cat Feeding', finished: false}));\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/setEntity\" class=\"code-anchor\">setEntity</a>({<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Dog Feeding', finished: false}));\n\n// version with <a href=\"api/signals/entities/setEntities\" class=\"code-anchor\">setEntities</a> and two different <a href=\"api/signals/entities\" class=\"code-anchor\">entities</a>\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/setEntities\" class=\"code-anchor\">setEntities</a>([\n  {<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Cat Feeding', finished: false},\n  {<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Dog Feeding', finished: false}\n]));\n</code-example>\n<p>In addition to the <code><a href=\"api/signals/entities/setEntity\" class=\"code-anchor\">setEntity</a></code> and <code><a href=\"api/signals/entities/setEntities\" class=\"code-anchor\">setEntities</a></code> updaters, the entities plugin also provides the <code><a href=\"api/signals/entities/setAllEntities\" class=\"code-anchor\">setAllEntities</a></code> updater which replaces the current collection with the provided one.</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/setAllEntities\" class=\"code-anchor\">setAllEntities</a>([\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 1, name: 'Room Cleaning', finished: false },\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Car Washing', finished: false },\n  ])\n);\n</code-example>\n<h2 id=\"updating--removing\">Updating &#x26; Removing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#updating--removing\"><i class=\"material-icons\">link</i></a></h2>\n<p>Updating and removing entities follow the same patterns as adding or setting them. The following functions are available:</p>\n<ul>\n<li>Updating: <code><a href=\"api/signals/entities/updateEntity\" class=\"code-anchor\">updateEntity</a></code>, <code><a href=\"api/signals/entities/updateEntities\" class=\"code-anchor\">updateEntities</a></code></li>\n<li>Removing: <code><a href=\"api/signals/entities/removeEntity\" class=\"code-anchor\">removeEntity</a></code>, <code><a href=\"api/signals/entities/removeEntities\" class=\"code-anchor\">removeEntities</a></code></li>\n</ul>\n<p>No error is thrown If an entity does not exist. This rule applies to all update and remove functions.</p>\n<p>The following example shows how to add, update, and remove an entity.</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>([\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Car Washing', finished: false },\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Cat Feeding', finished: false },\n  ])\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/updateEntity\" class=\"code-anchor\">updateEntity</a>({ <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, changes: { finished: true } }));\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/removeEntity\" class=\"code-anchor\">removeEntity</a>(3));\n</code-example>\n<p><code><a href=\"api/signals/entities/updateEntity\" class=\"code-anchor\">updateEntity</a></code> requires both parameters the <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code> to update and its <code>changes</code> (<code>Partial&#x3C;Todo></code>). <code><a href=\"api/signals/entities/removeEntity\" class=\"code-anchor\">removeEntity</a></code> only requires the <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code>.</p>\n<hr>\n<p>Here is the version for updating or removing all entities.</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>([\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Car Washing', finished: false },\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Cat Feeding', finished: false },\n  ])\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/updateAllEntities\" class=\"code-anchor\">updateAllEntities</a>((todo) => ({ finished: !todo.finished }))\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/updateAllEntities\" class=\"code-anchor\">updateAllEntities</a>({ finished: true }));\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/removeAllEntities\" class=\"code-anchor\">removeAllEntities</a>());\n</code-example>\n<p>For obvious reasons, no id is necessary for operations on all entities.</p>\n<hr>\n<p>There is also an option to update or remove entities conditionally. We can provide an array of ids or a predicate. The predicate gets the entity as a parameter and needs to return a <code>boolean</code>.</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>([\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Car Washing', finished: false },\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Cat Feeding', finished: false },\n  ])\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/updateEntities\" class=\"code-anchor\">updateEntities</a>({\n    <a href=\"api/store-devtools/StoreDevtoolsConfig#predicate\" class=\"code-anchor\">predicate</a>: (todo) => Boolean(todo.name.match(/cat/i)),\n    changes: { finished: true },\n  })\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/removeEntities\" class=\"code-anchor\">removeEntities</a>((todo) => todo.finished)\n);\n</code-example>\n<p>For the predicate version, <code><a href=\"api/signals/entities/updateEntities\" class=\"code-anchor\">updateEntities</a></code> requires an object literal with <code><a href=\"api/store-devtools/StoreDevtoolsConfig#predicate\" class=\"code-anchor\">predicate</a></code> and <code>changes</code>. <code><a href=\"api/signals/entities/removeEntities\" class=\"code-anchor\">removeEntities</a></code> works with the simple predicate function.</p>\n<p>Note that the predicate function needs to <strong>explicitly</strong> return <code>true</code> or <code>false</code>. A truthy or falsy value is incorrect.</p>\n<p>The alternative version with an array of ids goes like this:</p>\n<code-example language=\"typescript\">\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>([\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Car Washing', finished: false },\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Cat Feeding', finished: false },\n    { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 4, name: 'Dog Feeding', finished: false },\n  ])\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/updateEntities\" class=\"code-anchor\">updateEntities</a>({\n    <a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a>: [2, 3],\n    changes: { finished: true },\n  })\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/removeEntities\" class=\"code-anchor\">removeEntities</a>([2, 4]));\n</code-example>\n<h2 id=\"customized-id-property\">Customized Id property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#customized-id-property\"><i class=\"material-icons\">link</i></a></h2>\n<p>The default property name for an identifier is <code><a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a></code> and is of type <code>string</code> or <code>number</code>.</p>\n<p>It is possible to specify a custom ID selector, but the return type must still be a <code>string</code> or <code>number</code>. Custom ID selectors should be provided when adding, setting, or updating an entity. It is not possible to define it via <code><a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a></code>.</p>\n<p>Therefore, all variations of the <code>add*</code>, <code>set*</code>, and <code>update*</code> functions have an optional (last) parameter, which is a config object that allows to specify the <code>selectId</code> function.</p>\n<p>For example:</p>\n<code-example language=\"typescript\">\ninterface Todo {\n  key: number;\n  name: string;\n  finished: boolean;\n}\n\nconst selectId: <a href=\"api/signals/entities/SelectEntityId\" class=\"code-anchor\">SelectEntityId</a>&#x3C;Todo> = (todo) => todo.key;\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>(\n    [\n      { key: 2, name: 'Car Washing', finished: false },\n      { key: 3, name: 'Cat Feeding', finished: false },\n    ],\n    { selectId }\n  )\n);\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/setEntity\" class=\"code-anchor\">setEntity</a>({ key: 4, name: 'Dog Feeding', finished: false }, { selectId }));\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(this.todoStore, <a href=\"api/signals/entities/updateAllEntities\" class=\"code-anchor\">updateAllEntities</a>({ finished: true }, { selectId }));\n</code-example>\n<p>The <code>remove*</code> methods, which expect an id value, automatically pick the right one. That is possible because every entity belongs to a map with its id as the key.</p>\n<p>Theoretically, adding the same entity twice with different id names would be possible. For obvious reasons, we discourage you from doing that.</p>\n<h2 id=\"multiple-entity-types--named-entities\">Multiple Entity Types / Named Entities<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#multiple-entity-types--named-entities\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you don't want to have the property names <code><a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a></code>, <code><a href=\"api/signals/entities\" class=\"code-anchor\">entities</a></code> and <code>entityMap</code> in the state, you can define others by providing a collection name.</p>\n<p>Another use case is to have multiple entity types in one store. For example, <code>Todo</code> and <code>User</code>. In that case, you also have to come up with collections.</p>\n<p>The following example shows a store that already has an <code><a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a></code> property in its state before applying <code><a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a></code>. Therefore, we provide the collection name <code>todo</code>.</p>\n<code-example language=\"typescript\">\ninterface Todo {\n  <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number;\n  name: string;\n  finished: boolean;\n}\n\nconst TodoStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ <a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a>: [] }), // <a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a> property already exists\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>({ entity: <a href=\"api/signals/type\" class=\"code-anchor\">type</a>&#x3C;Todo>(), collection: 'todo' })\n);\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'ngrx-todos',\n  template: `\n    &#x3C;ul>\n      @for (todo of todoStore.todoEntities(); track todo.id) {\n        &#x3C;li>{{ todo.name }}&#x3C;/li>\n      }\n    &#x3C;/ul>\n  `,\n  standalone: true,\n  providers: [TodoStore],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class TodosComponent implements OnInit {\n  todoStore = inject(TodoStore);\n\n  ngOnInit() {\n    <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n      this.todoStore,\n      <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>(\n        [\n          { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 2, name: 'Car Washing', finished: false },\n          { <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: 3, name: 'Cat Feeding', finished: false },\n        ],\n        { collection: 'todo' }\n      )\n    );\n  }\n}\n</code-example>\n<p>The names of the state properties changed from:</p>\n<ul>\n<li><code><a href=\"api/entity/EntityState#ids\" class=\"code-anchor\">ids</a></code> -> <code>todoIds</code></li>\n<li><code><a href=\"api/signals/entities\" class=\"code-anchor\">entities</a></code> -> <code>todoEntities</code></li>\n<li><code>entityMap</code> -> <code>todoEntityMap</code></li>\n</ul>\n<p>All functions that operate on entities require a collection parameter. Those are <code>add*</code>, <code>set*</code>, <code>update*</code>, and <code>remove*</code>. They are type-safe because you need to provide the collection to avoid getting a compilation error.</p>\n<p>If you have a customized id property, you need to include the <code>selectId</code> function in the object literal, too:</p>\n<code-example language=\"typescript\">\nconst selectId: <a href=\"api/signals/entities/SelectEntityId\" class=\"code-anchor\">SelectEntityId</a>&#x3C;Todo> = (todo) => todo.key;\n\n<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(\n  this.todoStore,\n  <a href=\"api/signals/entities/addEntities\" class=\"code-anchor\">addEntities</a>(\n    [\n      { key: 2, name: 'Car Washing', finished: false },\n      { key: 3, name: 'Cat Feeding', finished: false },\n    ],\n    { selectId, collection: 'todo' }\n  )\n);\n</code-example>\n<p>To add multiple entity collections to a store, execute <code><a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a></code> multiple times:</p>\n<code-example language=\"typescript\">\nconst <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>({ entity: <a href=\"api/signals/type\" class=\"code-anchor\">type</a>&#x3C;Todo>(), collection: 'todo' }),\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>({\n    entity: <a href=\"api/signals/type\" class=\"code-anchor\">type</a>&#x3C;User>(),\n    collection: 'user',\n  }),\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>({ entity: <a href=\"api/signals/type\" class=\"code-anchor\">type</a>&#x3C;Category>(), collection: 'category' })\n);\n</code-example>\n<p>Try to avoid multiple entity types in one store. It is better to have multiple stores, each with a single entity type.</p>\n<hr>\n<p>To avoid repetitive code, it's recommended to use the <code><a href=\"api/signals/entities/entityConfig\" class=\"code-anchor\">entityConfig</a></code> function when defining a custom entity configuration:</p>\n<code-example language=\"typescript\">\nconst todoConfig = <a href=\"api/signals/entities/entityConfig\" class=\"code-anchor\">entityConfig</a>({\n  entity: <a href=\"api/signals/type\" class=\"code-anchor\">type</a>&#x3C;Todo>(),\n  collection: 'todo',\n  selectId: (todo) => todo.key,\n});\n\nconst userConfig = <a href=\"api/signals/entities/entityConfig\" class=\"code-anchor\">entityConfig</a>({\n  entity: <a href=\"api/signals/type\" class=\"code-anchor\">type</a>&#x3C;User>(),\n  collection: 'user',\n});\n\nconst <a href=\"api/store/Store\" class=\"code-anchor\">Store</a> = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>(todoConfig),\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>(userConfig),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => ({\n    addTodo(todo: Todo): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a>(todo, todoConfig));\n    },\n    addUser(user: User): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a>(user, userConfig));\n    },\n  }))\n);\n</code-example>\n<h2 id=\"extending-and-integrating\">Extending and Integrating<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/entity-management#extending-and-integrating\"><i class=\"material-icons\">link</i></a></h2>\n<p>You will usually want to persist your entities to a backend. Therefore, you must additionally implement <code><a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a></code> and add the necessary methods.</p>\n<code-example language=\"typescript\">\nconst TodoStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/entities/withEntities\" class=\"code-anchor\">withEntities</a>&#x3C;Todo>(),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => {\n    const todoService = inject(TodoService);\n\n    return {\n      async load() {\n        const todos = await todoService.findAll();\n        <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/setAllEntities\" class=\"code-anchor\">setAllEntities</a>(todos));\n      },\n\n      async add(name: string) {\n        const todo = await todoService.add(name);\n        <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/addEntity\" class=\"code-anchor\">addEntity</a>(todo));\n      },\n\n      async remove(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number) {\n        await todoService.remove(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>);\n        <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/removeEntity\" class=\"code-anchor\">removeEntity</a>(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>));\n      },\n\n      async setFinished(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number) {\n        await todoService.setFinished(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>);\n        <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/updateEntity\" class=\"code-anchor\">updateEntity</a>({ <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>, changes: { finished: true } }));\n      },\n      async setUnfinished(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>: number) {\n        await todoService.setUnfinished(<a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>);\n        <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, <a href=\"api/signals/entities/updateEntity\" class=\"code-anchor\">updateEntity</a>({ <a href=\"api/data/UpdateResponseData#id\" class=\"code-anchor\">id</a>, changes: { finished: false } }));\n      },\n    };\n  }),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({ onInit: (store) => store.load() })\n);\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n - guide/signals/signal-store\n - guide/signals/signal-store/custom-store-features\n-->\n<!-- links from this doc:\n - api/data/UpdateResponseData#id\n - api/entity/EntityState#ids\n - api/signals/entities\n - api/signals/entities/EntityId\n - api/signals/entities/SelectEntityId\n - api/signals/entities/addEntities\n - api/signals/entities/addEntity\n - api/signals/entities/entityConfig\n - api/signals/entities/removeAllEntities\n - api/signals/entities/removeEntities\n - api/signals/entities/removeEntity\n - api/signals/entities/setAllEntities\n - api/signals/entities/setEntities\n - api/signals/entities/setEntity\n - api/signals/entities/updateAllEntities\n - api/signals/entities/updateEntities\n - api/signals/entities/updateEntity\n - api/signals/entities/withEntities\n - api/signals/patchState\n - api/signals/signalStore\n - api/signals/type\n - api/signals/withHooks\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/StoreDevtoolsConfig#predicate\n - api/store/Store\n - api/store/testing/MockSelector#selector\n - guide/signals/signal-store/entity-management#adding--setting\n - guide/signals/signal-store/entity-management#creating-the-store\n - guide/signals/signal-store/entity-management#customized-id-property\n - guide/signals/signal-store/entity-management#entity-management\n - guide/signals/signal-store/entity-management#extending-and-integrating\n - guide/signals/signal-store/entity-management#multiple-entity-types--named-entities\n - guide/signals/signal-store/entity-management#updating--removing\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/entity-management.md?message=docs%3A%20describe%20your%20change...\n-->"
}