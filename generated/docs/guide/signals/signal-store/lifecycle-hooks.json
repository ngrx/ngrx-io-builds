{
  "id": "guide/signals/signal-store/lifecycle-hooks",
  "title": "Lifecycle Hooks",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/lifecycle-hooks.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lifecycle-hooks\">Lifecycle Hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/lifecycle-hooks#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h1>\n<p>The <code>@ngrx/signals</code> package provides the <code><a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a></code> feature for incorporating lifecycle hooks into a SignalStore.\nThis feature enables performing additional logic when the store is initialized or destroyed.</p>\n<p>The <code><a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a></code> feature has two signatures.\nThe first signature expects an object with <code>onInit</code> and/or <code>onDestroy</code> methods.\nBoth methods receive the store instance as input arguments.</p>\n<code-example header=\"counter.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { takeUntilDestroyed } from '@angular/core/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { interval } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>, <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>, <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>, <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a> } from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => ({\n    increment(): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, (state) => ({ count: state.count + 1 }));\n    },\n  })),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({\n    onInit(store) {\n      // ðŸ‘‡ Increment the `count` every 2 seconds.\n      interval(2_000)\n        // ðŸ‘‡ Automatically unsubscribe when the store is destroyed.\n        .pipe(takeUntilDestroyed())\n        .subscribe(() => store.increment());\n    },\n    onDestroy(store) {\n      console.log('count <a href=\"api/store/on\" class=\"code-anchor\">on</a> destroy', store.count());\n    },\n  }),\n);\n\n</code-example>\n<p>The <code>onInit</code> hook is executed within the injection context, enabling the injection of dependencies or the utilization of functions that must be invoked within the injection context, such as <code>takeUntilDestroyed</code>.</p>\n<p>If there is a need to share code between lifecycle hooks or use injected dependencies within the <code>onDestroy</code> hook, the second signature can be utilized.\nSimilar to the <code><a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a></code> and <code><a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a></code> features, the second signature of the <code><a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a></code> feature expects a factory function.\nThis function receives a store instance as an input argument, returns an object with <code>onInit</code> and/or <code>onDestroy</code> methods, and is executed within the injection context.</p>\n<code-example header=\"counter.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  /* ... */\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>((store) => {\n    const logger = inject(<a href=\"api/data/Logger\" class=\"code-anchor\">Logger</a>);\n    let interval = 0;\n\n    return {\n      onInit() {\n        interval = setInterval(() => store.increment(), 2_000);\n      },\n      onDestroy() {\n        logger.info('count <a href=\"api/store/on\" class=\"code-anchor\">on</a> destroy', store.count());\n        clearInterval(interval);\n      },\n    };\n  }),\n);\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/Logger\n - api/signals/patchState\n - api/signals/rxjs-interop\n - api/signals/signalStore\n - api/signals/withComputed\n - api/signals/withHooks\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/on\n - guide/signals/signal-store/lifecycle-hooks#lifecycle-hooks\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/lifecycle-hooks.md?message=docs%3A%20describe%20your%20change...\n-->"
}