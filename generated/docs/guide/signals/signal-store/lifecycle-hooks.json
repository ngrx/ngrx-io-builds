{
  "id": "guide/signals/signal-store/lifecycle-hooks",
  "title": "Lifecycle Hooks",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/lifecycle-hooks.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lifecycle-hooks\">Lifecycle Hooks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/lifecycle-hooks#lifecycle-hooks\"><i class=\"material-icons\">link</i></a></h1>\n<p>You can also create lifecycle hooks that are called when the store is created or destroyed.\nLifecycle hooks can be used to initialize fetching data, updating state, and more.</p>\n<code-example header=\"counter.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { takeUntilDestroyed } from '@angular/core/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { interval } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>,\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>,\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>,\n} from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>(({ count, ...store }) => ({\n    increment() {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { count: count() + 1 });\n    },\n  })),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({\n    onInit({ increment }) {\n      interval(2_000)\n        .pipe(takeUntilDestroyed())\n        .subscribe(() => increment());\n    },\n    onDestroy({ count }) {\n      console.log('count <a href=\"api/store/on\" class=\"code-anchor\">on</a> destroy', count());\n    },\n  }),\n);\n</code-example>\n<p>In the example above, the <code>onInit</code> hook subscribes to an interval observable, and calls the <code>increment</code> method on the store to increment the count every 2 seconds. The lifecycle methods also have access to the injection context for automatic cleanup using the <code>takeUntilDestroyed()</code> function from Angular.</p>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/signals/patchState\n - api/signals/rxjs-interop\n - api/signals/signalStore\n - api/signals/withComputed\n - api/signals/withHooks\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/on\n - guide/signals/signal-store/lifecycle-hooks#lifecycle-hooks\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/lifecycle-hooks.md?message=docs%3A%20describe%20your%20change...\n-->"
}