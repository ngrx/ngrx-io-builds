{
  "id": "guide/signals/signal-store/state-tracking",
  "title": "State Tracking",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/state-tracking.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"state-tracking\">State Tracking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/state-tracking#state-tracking\"><i class=\"material-icons\">link</i></a></h1>\n<p>State tracking enables the implementation of custom SignalStore features such as logging, state undo/redo, and storage synchronization.</p>\n<h2 id=\"using-getstate-and-effect\">Using <code><a href=\"api/signals/getState\" class=\"code-anchor\">getState</a></code> and <code><a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/state-tracking#using-getstate-and-effect\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/signals/getState\" class=\"code-anchor\">getState</a></code> function is used to get the current state value of the SignalStore.\nWhen used within a reactive context, state changes are automatically tracked.</p>\n<code-example header=\"counter.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a> } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/getState\" class=\"code-anchor\">getState</a>,\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>,\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n} from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => ({\n    increment(): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { count: store.count() + 1 });\n    },\n  })),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({\n    onInit(store) {\n      <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>(() => {\n        // ðŸ‘‡ The <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a> is re-executed <a href=\"api/store/on\" class=\"code-anchor\">on</a> state change.\n        const state = <a href=\"api/signals/getState\" class=\"code-anchor\">getState</a>(store);\n        console.log('counter state', state);\n      });\n\n      setInterval(() => store.increment(), 1_000);\n    },\n  })\n);\n\n</code-example>\n<p>Due to the <code><a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a></code> glitch-free behavior, if the state is changed multiple times in the same tick, the effect function will be executed only once with the final state value.\nWhile the asynchronous effect execution is beneficial for performance reasons, functionalities such as state undo/redo require tracking all SignalStore's state changes without coalescing state updates in the same tick.</p>\n<h2 id=\"using-watchstate\">Using <code><a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/state-tracking#using-watchstate\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a></code> function allows for synchronous tracking of SignalStore's state changes.\nIt accepts a SignalStore instance as the first argument and a watcher function as the second argument.</p>\n<p>By default, the <code><a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a></code> function needs to be executed within an injection context.\nIt is tied to its lifecycle and is automatically cleaned up when the injector is destroyed.</p>\n<code-example header=\"counter.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a> } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/getState\" class=\"code-anchor\">getState</a>,\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a>,\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n} from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => ({\n    increment(): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { count: store.count() + 1 });\n    },\n  })),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({\n    onInit(store) {\n      <a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a>(store, (state) => {\n        console.log('[<a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a>] counter state', state);\n      }); // logs: { count: 0 }, { count: 1 }, { count: 2 }\n      \n      <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>(() => {\n        console.log('[<a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>] counter state', <a href=\"api/signals/getState\" class=\"code-anchor\">getState</a>(store));\n      }); // logs: { count: 2 }\n\n      store.increment();\n      store.increment();\n    },\n  })\n);\n\n</code-example>\n<p>In the example above, the <code><a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a></code> function will execute the provided watcher 3 times: once with the initial counter state value and two times after each increment.\nConversely, the <code><a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a></code> function will be executed only once with the final counter state value.</p>\n<h3 id=\"manual-cleanup\">Manual Cleanup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/state-tracking#manual-cleanup\"><i class=\"material-icons\">link</i></a></h3>\n<p>If a state watcher needs to be cleaned up before the injector is destroyed, manual cleanup can be performed by calling the <code>destroy</code> method.</p>\n<code-example header=\"counter.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a>,\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>,\n  witMethods,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n} from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => ({\n    increment(): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { count: store.count() + 1 });\n    },\n  })),\n  <a href=\"api/signals/withHooks\" class=\"code-anchor\">withHooks</a>({\n    onInit(store) {\n      const { destroy } = <a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a>(store, console.log);\n\n      setInterval(() => store.increment(), 1_000);\n\n      // ðŸ‘‡ Stop watching after 5 seconds.\n      setTimeout(() => destroy(), 5_000);\n    },\n  })\n);\n\n</code-example>\n<h3 id=\"usage-outside-of-injection-context\">Usage Outside of Injection Context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store/state-tracking#usage-outside-of-injection-context\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a></code> function can be used outside an injection context by providing an injector as the second argument.</p>\n<code-example header=\"counter.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, inject, Injector, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { CounterStore } from './counter.store';\n\n@Component({\n  /* ... */\n  providers: [CounterStore],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class CounterComponent implements OnInit {\n  readonly #injector = inject(Injector);\n  readonly store = inject(CounterStore);\n\n  ngOnInit(): void {\n    <a href=\"api/signals/watchState\" class=\"code-anchor\">watchState</a>(this.store, console.log, {\n      injector: this.#injector,\n    });\n\n    setInterval(() => this.store.increment(), 2_000);\n  }\n}\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/effects/EffectNotification#effect\n - api/signals/getState\n - api/signals/patchState\n - api/signals/signalStore\n - api/signals/watchState\n - api/signals/withHooks\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/on\n - guide/signals/signal-store/state-tracking#manual-cleanup\n - guide/signals/signal-store/state-tracking#state-tracking\n - guide/signals/signal-store/state-tracking#usage-outside-of-injection-context\n - guide/signals/signal-store/state-tracking#using-getstate-and-effect\n - guide/signals/signal-store/state-tracking#using-watchstate\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/state-tracking.md?message=docs%3A%20describe%20your%20change...\n-->"
}