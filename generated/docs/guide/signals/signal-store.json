{
  "id": "guide/signals/signal-store",
  "title": "SignalStore",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"signalstore\">SignalStore<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#signalstore\"><i class=\"material-icons\">link</i></a></h1>\n<p>NgRx SignalStore is a fully-featured state management solution that offers a robust way to manage application state.\nWith its native support for Signals, it provides the ability to define stores in a clear and declarative manner.\nThe simplicity and flexibility of SignalStore, coupled with its opinionated and extensible design, establish it as a versatile solution for effective state management in Angular.</p>\n<h2 id=\"creating-a-store\">Creating a Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#creating-a-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>A SignalStore is created using the <code><a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a></code> function. This function accepts a sequence of store features.\nThrough the combination of store features, the SignalStore gains state, computed signals, and methods, allowing for a flexible and extensible store implementation.\nBased on the utilized features, the <code><a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a></code> function returns an injectable service that can be provided and injected where needed.</p>\n<p>The <code><a href=\"api/signals/withState\" class=\"code-anchor\">withState</a></code> feature is used to add state properties to the SignalStore.\nThis feature accepts initial state as an input argument. As with <code><a href=\"api/signals/signalState-0\" class=\"code-anchor\">signalState</a></code>, the state's type must be a record/object literal.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = {\n  books: Book[];\n  isLoading: boolean;\n  <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { query: string; order: 'asc' | 'desc' };\n};\n\nconst initialState: BooksState = {\n  books: [],\n  isLoading: false,\n  <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { query: '', order: 'asc' },\n};\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState)\n);\n\n</code-example>\n<p>For each state property, a corresponding signal is automatically created.\nThe same applies to nested state properties, with all deeply nested signals being generated lazily on demand.</p>\n<p>The <code>BooksStore</code> instance will contain the following properties:</p>\n<ul>\n<li><code>books: Signal&#x3C;Book[]></code></li>\n<li><code>isLoading: Signal&#x3C;boolean></code></li>\n<li><code><a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: <a href=\"api/signals/DeepSignal\" class=\"code-anchor\">DeepSignal</a>&#x3C;{ query: string; order: 'asc' | 'desc' }></code></li>\n<li><code>filter.query: Signal&#x3C;string></code></li>\n<li><code>filter.order: Signal&#x3C;'asc' | 'desc'></code></li>\n</ul>\n<div class=\"alert alert is-helpful\">\n<p>The <code><a href=\"api/signals/withState\" class=\"code-anchor\">withState</a></code> feature also has a signature that takes the initial state factory as an input argument.\nThe factory is executed within the injection context, allowing initial state to be obtained from a service or injection token.</p>\n<code-example language=\"ts\">\nconst BOOKS_STATE = new InjectionToken&#x3C;BooksState>('BooksState', {\n  factory: () => initialState,\n});\n\nconst BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(() => inject(BOOKS_STATE))\n);\n</code-example>\n</div>\n<h2 id=\"providing-and-injecting-the-store\">Providing and Injecting the Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#providing-and-injecting-the-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>SignalStore can be provided locally and globally.\nBy default, a SignalStore is not registered with any injectors and must be included in a providers array at the component, route, or root level before injection.</p>\n<code-example header=\"books.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksStore } from './books.store';\n\n@Component({\n  /* ... */\n  // ðŸ‘‡ Providing `BooksStore` at the component level.\n  providers: [BooksStore],\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent {\n  readonly store = inject(BooksStore);\n}\n\n</code-example>\n<p>When provided at the component level, the store is tied to the component lifecycle, making it useful for managing local/component state.\nAlternatively, a SignalStore can be globally registered by setting the <code>providedIn</code> property to <code>root</code> when defining the store.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = { /* ... */ };\n\nconst initialState: BooksState = { /* ... */ };\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  // ðŸ‘‡ Providing `BooksStore` at the root level.\n  { providedIn: 'root' },\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState)\n);\n\n</code-example>\n<p>When provided globally, the store is registered with the root injector and becomes accessible anywhere in the application.\nThis is beneficial for managing global state, as it ensures a single shared instance of the store across the entire application.</p>\n<h2 id=\"consuming-state\">Consuming State<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#consuming-state\"><i class=\"material-icons\">link</i></a></h2>\n<p>Signals generated for state properties can be utilized to access state values, as demonstrated below.</p>\n<code-example header=\"books.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component, inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { JsonPipe } from '@angular/common';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksStore } from './books.store';\n\n@Component({\n  standalone: true,\n  imports: [JsonPipe],\n  template: `\n    &#x3C;p>Books: {{ store.books() | json }}&#x3C;/p>\n    &#x3C;p>Loading: {{ store.isLoading() }}&#x3C;/p>\n\n    &#x3C;!-- ðŸ‘‡ The `<a href=\"api/signals/DeepSignal\" class=\"code-anchor\">DeepSignal</a>` <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> can be read in the same way as `Signal`. -->\n    &#x3C;p>Pagination: {{ store.filter() | json }}&#x3C;/p>\n\n    &#x3C;!-- ðŸ‘‡ Nested signals are created as `<a href=\"api/signals/DeepSignal\" class=\"code-anchor\">DeepSignal</a>` properties. -->\n    &#x3C;p>Query: {{ store.filter.query() }}&#x3C;/p>\n    &#x3C;p>Order: {{ store.filter.order() }}&#x3C;/p>\n  `,\n  providers: [BooksStore],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent {\n  readonly store = inject(BooksStore);\n}\n\n</code-example>\n<p>The <code>@ngrx/signals</code> package also offers the <code><a href=\"api/signals/getState\" class=\"code-anchor\">getState</a></code> function to get the current state value of the SignalStore.\nWhen used within the reactive context, state changes are automatically tracked.</p>\n<code-example header=\"books.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Component, <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>, inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/getState\" class=\"code-anchor\">getState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksStore } from './books.store';\n\n@Component({ /* ... */ })\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent {\n  readonly store = inject(BooksStore);\n\n  constructor() {\n    <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a>(() => {\n      // ðŸ‘‡ The <a href=\"api/effects/EffectNotification#effect\" class=\"code-anchor\">effect</a> will be re-executed whenever the state changes.\n      const state = <a href=\"api/signals/getState\" class=\"code-anchor\">getState</a>(this.store);\n      console.log('books state <a href=\"api/data/UpdateResponseData#changed\" class=\"code-anchor\">changed</a>', state);\n    });\n  }\n}\n\n</code-example>\n<h2 id=\"defining-computed-signals\">Defining Computed Signals<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#defining-computed-signals\"><i class=\"material-icons\">link</i></a></h2>\n<p>Computed signals can be added to the store using the <code><a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a></code> feature.\nThis feature accepts a factory function as an input argument, which is executed within the injection context.\nThe factory should return a dictionary of computed signals, utilizing previously defined state and computed signals that are accessible through its input argument.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a> } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = { /* ... */ };\n\nconst initialState: BooksState = { /* ... */ };\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState),\n  // ðŸ‘‡ Accessing previously defined state and computed signals.\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(({ books, <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a> }) => ({\n    booksCount: computed(() => books().length),\n    sortedBooks: computed(() => {\n      const direction = filter.order() === 'asc' ? 1 : -1;\n\n      return books().toSorted((a, b) =>\n        direction * a.title.localeCompare(b.title)\n      );\n    }),\n  }))\n);\n\n</code-example>\n<h2 id=\"defining-store-methods\">Defining Store Methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#defining-store-methods\"><i class=\"material-icons\">link</i></a></h2>\n<p>Methods can be added to the store using the <code><a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a></code> feature.\nThis feature takes a factory function as an input argument and returns a dictionary of methods.\nSimilar to <code><a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a></code>, the <code><a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a></code> factory is also executed within the injection context.\nThe store instance, including previously defined state, computed signals, and methods, is accessible through the factory input.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>,\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n} from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = { /* ... */ };\n\nconst initialState: BooksState = { /* ... */ };\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState),\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(/* ... */),\n  // ðŸ‘‡ Accessing a store instance with previously defined state,\n  // computed signals, and methods.\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store) => ({\n    updateQuery(query: string): void {\n      // ðŸ‘‡ Updating state using the `<a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>` function.\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, (state) => ({ <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { ...state.filter, query } }));\n    },\n    updateOrder(order: 'asc' | 'desc'): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, (state) => ({ <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { ...state.filter, order } }));\n    },\n  }))\n);\n\n</code-example>\n<div class=\"alert alert is-important\">\n<p>The state of the SignalStore is updated using the <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code> function.\nFor more details on the <code><a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a></code> function, refer to the <a href=\"/guide/signals/signal-state#updating-state\">Updating State</a> guide.</p>\n</div>\n<p>In addition to methods for updating state, the <code><a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a></code> feature can also be used to create methods for performing side effects.\nAsynchronous side effects can be executed using Promise-based APIs, as demonstrated below.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed, inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>, <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, /* ... */ } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksService } from './books.service';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = { /* ... */ };\n\nconst initialState: BooksState = { /* ... */ };\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState),\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(/* ... */),\n  // ðŸ‘‡ `BooksService` can be injected within the `<a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>` factory.\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store, booksService = inject(BooksService)) => ({\n    /* ... */\n    // ðŸ‘‡ Defining a <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> to load all books.\n    async loadAll(): Promise&#x3C;void> {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: true });\n\n      const books = await booksService.getAll();\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { books, isLoading: false });\n    },\n  }))\n);\n\n</code-example>\n<h3 id=\"reactive-store-methods\">Reactive Store Methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#reactive-store-methods\"><i class=\"material-icons\">link</i></a></h3>\n<p>In more complex scenarios, opting for RxJS to handle asynchronous side effects is advisable.\nTo create a reactive SignalStore method that harnesses RxJS APIs, use the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function from the <code><a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a></code> plugin.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed, inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { debounceTime, distinctUntilChanged, pipe, switchMap, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>, <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, /* ... */ } from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/operators/tapResponse\" class=\"code-anchor\">tapResponse</a> } from '@ngrx/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksService } from './books.service';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = { /* ... */ };\n\nconst initialState: BooksState = { /* ... */ };\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState),\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(/* ... */),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store, booksService = inject(BooksService)) => ({\n    /* ... */\n    // ðŸ‘‡ Defining a <a href=\"api/data/RequestData#method\" class=\"code-anchor\">method</a> to load books by query.\n    loadByQuery: <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;string>(\n      pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        tap(() => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: true })),\n        switchMap((query) => {\n          return booksService.getByQuery(query).pipe(\n            <a href=\"api/operators/tapResponse\" class=\"code-anchor\">tapResponse</a>({\n              next: (books) => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { books, isLoading: false }),\n              error: (err) => {\n                <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: false });\n                console.error(err);\n              },\n            })\n          );\n        })\n      )\n    ),\n  }))\n);\n\n</code-example>\n<div class=\"alert alert is-helpful\">\n<p>To learn more about the <code><a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a></code> function, visit the <a href=\"/guide/signals/rxjs-integration\">RxJS Integration</a> page.</p>\n</div>\n<h2 id=\"putting-it-all-together\">Putting It All Together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#putting-it-all-together\"><i class=\"material-icons\">link</i></a></h2>\n<p>The final <code>BooksStore</code> implementation with state, computed signals, and methods from this guide is shown below.</p>\n<code-example header=\"books.store.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed, inject } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { debounceTime, distinctUntilChanged, pipe, switchMap, tap } from 'rxjs';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> {\n  <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>,\n  <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>,\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>,\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>,\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>,\n} from '@ngrx/signals';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a> } from '@ngrx/signals/<a href=\"api/signals/rxjs-interop\" class=\"code-anchor\">rxjs-interop</a>';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/operators/tapResponse\" class=\"code-anchor\">tapResponse</a> } from '@ngrx/operators';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { Book } from './book.model';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksService } from './books.service';\n\n<a href=\"api/signals/type\" class=\"code-anchor\">type</a> BooksState = {\n  books: Book[];\n  isLoading: boolean;\n  <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { query: string; order: 'asc' | 'desc' };\n};\n\nconst initialState: BooksState = {\n  books: [],\n  isLoading: false,\n  <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { query: '', order: 'asc' },\n};\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const BooksStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>(initialState),\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(({ books, <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a> }) => ({\n    booksCount: computed(() => books().length),\n    sortedBooks: computed(() => {\n      const direction = filter.order() === 'asc' ? 1 : -1;\n\n      return books().toSorted((a, b) =>\n        direction * a.title.localeCompare(b.title)\n      );\n    }), \n  })),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>((store, booksService = inject(BooksService)) => ({\n    updateQuery(query: string): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, (state) => ({ <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { ...state.filter, query } }));\n    },\n    updateOrder(order: 'asc' | 'desc'): void {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, (state) => ({ <a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: { ...state.filter, order } }));\n    },\n    loadByQuery: <a href=\"api/signals/rxjs-interop/rxMethod\" class=\"code-anchor\">rxMethod</a>&#x3C;string>(\n      pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        tap(() => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: true })),\n        switchMap((query) => {\n          return booksService.getByQuery(query).pipe(\n            <a href=\"api/operators/tapResponse\" class=\"code-anchor\">tapResponse</a>({\n              next: (books) => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { books }),\n              error: console.error,\n              finalize: () => <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { isLoading: false }),\n            })\n          );\n        })\n      )\n    ),\n  }))\n);\n\n</code-example>\n<p>The <code>BooksStore</code> instance will contain the following properties and methods:</p>\n<ul>\n<li>\n<p>State properties:</p>\n<ul>\n<li><code>books: Signal&#x3C;Book[]></code></li>\n<li><code>isLoading: Signal&#x3C;boolean></code></li>\n<li><code><a href=\"api/data/EntityCollection#filter\" class=\"code-anchor\">filter</a>: <a href=\"api/signals/DeepSignal\" class=\"code-anchor\">DeepSignal</a>&#x3C;{ query: string; order: 'asc' | 'desc' }></code></li>\n<li><code>filter.query: Signal&#x3C;string></code></li>\n<li><code>filter.order: Signal&#x3C;'asc' | 'desc'></code></li>\n</ul>\n</li>\n<li>\n<p>Computed properties:</p>\n<ul>\n<li><code>booksCount: Signal&#x3C;number></code></li>\n<li><code>sortedBooks: Signal&#x3C;Book[]></code></li>\n</ul>\n</li>\n<li>\n<p>Methods:</p>\n<ul>\n<li><code>updateQuery(query: string): void</code></li>\n<li><code>updateOrder(order: 'asc' | 'desc'): void</code></li>\n<li><code>loadByQuery: RxMethod&#x3C;string></code></li>\n</ul>\n</li>\n</ul>\n<div class=\"alert alert is-helpful\">\n<p>The <code>BooksStore</code> implementation can be enhanced further by utilizing the <code><a href=\"api/signals/entities\" class=\"code-anchor\">entities</a></code> plugin and creating custom SignalStore features.\nFor more details, refer to the <a href=\"guide/signals/signal-store/entity-management\">Entity Management</a> and <a href=\"guide/signals/signal-store/custom-store-features\">Custom Store Features</a> guides.</p>\n</div>\n<p>The <code>BooksComponent</code> can use the <code>BooksStore</code> to manage the state, as demonstrated below.</p>\n<code-example header=\"books.component.ts\">\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksFilterComponent } from './books-filter.component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BookListComponent } from './book-list.component';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { BooksStore } from './books.store';\n\n@Component({\n  standalone: true,\n  imports: [BooksFilterComponent, BookListComponent],\n  template: `\n    &#x3C;h1>Books ({{ store.booksCount() }})&#x3C;/h1>\n\n    &#x3C;ngrx-books-filter\n      [query]=\"store.filter.query()\"\n      [order]=\"store.filter.order()\"\n      (queryChange)=\"store.updateQuery($event)\"\n      (orderChange)=\"store.updateOrder($event)\"\n    />\n\n    &#x3C;ngrx-book-list\n      [books]=\"store.sortedBooks()\"\n      [isLoading]=\"store.isLoading()\"\n    />\n  `,\n  providers: [BooksStore],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> class BooksComponent implements OnInit {\n  readonly store = inject(BooksStore);\n\n  ngOnInit(): void {\n    const query = this.store.filter.query;\n    // ðŸ‘‡ Re-fetch books whenever the <a href=\"api/store/testing/MockSelector#value\" class=\"code-anchor\">value</a> of query signal changes.\n    this.store.loadByQuery(query);\n  }\n}\n\n</code-example>\n<div class=\"alert alert is-helpful\">\n<p>In addition to component lifecycle hooks, SignalStore also offers the ability to define them at the store level.\nLearn more about SignalStore lifecycle hooks <a href=\"/guide/signals/signal-store/lifecycle-hooks\">here</a>.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n - guide/signals/rxjs-integration\n-->\n<!-- links from this doc:\n - /guide/signals/rxjs-integration\n - /guide/signals/signal-state#updating-state\n - /guide/signals/signal-store/lifecycle-hooks\n - api/data/EntityCollection#filter\n - api/data/RequestData#method\n - api/data/UpdateResponseData#changed\n - api/effects/EffectNotification#effect\n - api/operators/tapResponse\n - api/signals/DeepSignal\n - api/signals/entities\n - api/signals/getState\n - api/signals/patchState\n - api/signals/rxjs-interop\n - api/signals/rxjs-interop/rxMethod\n - api/signals/signalState-0\n - api/signals/signalStore\n - api/signals/type\n - api/signals/withComputed\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#value\n - guide/signals/signal-store#consuming-state\n - guide/signals/signal-store#creating-a-store\n - guide/signals/signal-store#defining-computed-signals\n - guide/signals/signal-store#defining-store-methods\n - guide/signals/signal-store#providing-and-injecting-the-store\n - guide/signals/signal-store#putting-it-all-together\n - guide/signals/signal-store#reactive-store-methods\n - guide/signals/signal-store#signalstore\n - guide/signals/signal-store/custom-store-features\n - guide/signals/signal-store/entity-management\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/index.md?message=docs%3A%20describe%20your%20change...\n-->"
}