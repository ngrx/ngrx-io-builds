{
  "id": "guide/signals/signal-store",
  "title": "SignalStore",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"signalstore\">SignalStore<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#signalstore\"><i class=\"material-icons\">link</i></a></h1>\n<p>For managing larger stores with more complex pieces of state, you can use the <code><a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a></code> utility function, along with patchState, and other functions to manage the state.</p>\n<h2 id=\"creating-a-store\">Creating a Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#creating-a-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>To create a signal store, use the <code><a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a></code> function and the <code><a href=\"api/signals/withState\" class=\"code-anchor\">withState</a></code> function:</p>\n<code-example header=\"counter.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a> } from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 })\n);\n</code-example>\n<p>The <code><a href=\"api/signals/withState\" class=\"code-anchor\">withState</a></code> function takes the initial state of the store and defines the shape of the state. </p>\n<div class=\"callout is-critical\">\n<p>  This store is not registered with <em>any</em> injectors, and must be provided in a <code>providers</code> array at the component, route, or root level before injected.</p>\n</div>\n<h2 id=\"defining-computed-values\">Defining Computed Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#defining-computed-values\"><i class=\"material-icons\">link</i></a></h2>\n<p>Computed properties can also be derived from existing pieces of state in the store using the <code><a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a></code> function.</p>\n<code-example header=\"counter.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>, <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a> } from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(({ count }) => ({\n    doubleCount: computed(() => count() * 2),\n  })),\n);\n</code-example>\n<p>The <code>doubleCount</code> computed signal reacts to changes to the <code>count</code> signal.</p>\n<h2 id=\"defining-store-methods\">Defining Store Methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#defining-store-methods\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can also define methods that are exposed publicly to operate on the store with a well-defined API.</p>\n<code-example header=\"counter.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { computed } from '@angular/core';\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>, <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>, <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a> } from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 }),\n  <a href=\"api/signals/withComputed\" class=\"code-anchor\">withComputed</a>(({ count }) => ({\n    doubleCount: computed(() => count() * 2),\n  })),\n  <a href=\"api/signals/withMethods\" class=\"code-anchor\">withMethods</a>(({ count, ...store }) => ({\n    increment() {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { count: count() + 1 });\n    },\n    decrement() {\n      <a href=\"api/signals/patchState\" class=\"code-anchor\">patchState</a>(store, { count: count() - 1 });\n    },\n  }))\n);\n</code-example>\n<h2 id=\"providing-and-injecting-the-store\">Providing and Injecting the Store<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#providing-and-injecting-the-store\"><i class=\"material-icons\">link</i></a></h2>\n<p>Stores can be used locally and globally.</p>\n<h3 id=\"providing-a-component-level-signalstore\">Providing a Component-Level SignalStore<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#providing-a-component-level-signalstore\"><i class=\"material-icons\">link</i></a></h3>\n<p>To provide a store and tie it to a component's lifecycle, add it to the <code>providers</code> array of your component, and inject it using dependency injection.</p>\n<code-example header=\"counter.component.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component, inject } from '@angular/core';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { CounterStore } from './counter.store';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-counter',\n  standalone: true,\n  template: `\n    &#x3C;h1>Counter (<a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>)&#x3C;/h1>\n\n    &#x3C;p>Count: {{ store.count() }}&#x3C;/p>\n    &#x3C;p>Double Count: {{ store.doubleCount() }}&#x3C;/p>\n\n    &#x3C;button (click)=\"store.increment()\">Increment&#x3C;/button>\n    &#x3C;button (click)=\"store.decrement()\">Decrement&#x3C;/button>\n  `,\n  providers: [CounterStore],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> default class CounterComponent {\n  readonly store = inject(CounterStore);\n}\n</code-example>\n<h3 id=\"providing-a-global-level-signalstore\">Providing a Global-Level SignalStore<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/signals/signal-store#providing-a-global-level-signalstore\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can also define a signal store to be used a global level. When defining the signal store, use the <code>providedIn</code> syntax:</p>\n<code-example header=\"counter.store.ts\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>, <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a> } from '@ngrx/signals';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> const CounterStore = <a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>(\n  { providedIn: 'root' },\n  <a href=\"api/signals/withState\" class=\"code-anchor\">withState</a>({ count: 0 })\n);\n</code-example>\n<p>Now the store can be used globally across the application using a singleton instance.</p>\n<code-example header=\"counter.component.ts\" linenumbers=\"false\">\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { ChangeDetectionStrategy, Component, inject } from '@angular/core';\n\n<a href=\"api/store-devtools/DevToolsFeatureOptions#import\" class=\"code-anchor\">import</a> { CounterStore } from './counter.store';\n\n@Component({\n  <a href=\"api/store/testing/MockSelector#selector\" class=\"code-anchor\">selector</a>: 'app-counter',\n  standalone: true,\n  template: `\n    &#x3C;h1>Counter (<a href=\"api/signals/signalStore\" class=\"code-anchor\">signalStore</a>)&#x3C;/h1>\n\n    &#x3C;p>Count: {{ store.count() }}&#x3C;/p>\n    &#x3C;p>Double Count: {{ store.doubleCount() }}&#x3C;/p>\n\n    &#x3C;button (click)=\"store.increment()\">Increment&#x3C;/button>\n    &#x3C;button (click)=\"store.decrement()\">Decrement&#x3C;/button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n<a href=\"api/store-devtools/DevToolsFeatureOptions#export\" class=\"code-anchor\">export</a> default class CounterComponent {\n  readonly store = inject(CounterStore);\n}\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/signals\n-->\n<!-- links from this doc:\n - api/signals/patchState\n - api/signals/signalStore\n - api/signals/withComputed\n - api/signals/withMethods\n - api/signals/withState\n - api/store-devtools/DevToolsFeatureOptions#export\n - api/store-devtools/DevToolsFeatureOptions#import\n - api/store/testing/MockSelector#selector\n - guide/signals/signal-store#creating-a-store\n - guide/signals/signal-store#defining-computed-values\n - guide/signals/signal-store#defining-store-methods\n - guide/signals/signal-store#providing-a-component-level-signalstore\n - guide/signals/signal-store#providing-a-global-level-signalstore\n - guide/signals/signal-store#providing-and-injecting-the-store\n - guide/signals/signal-store#signalstore\n - https://github.com/ngrx/platform/edit/main/projects/ngrx.io/content/guide/signals/signal-store/index.md?message=docs%3A%20describe%20your%20change...\n-->"
}