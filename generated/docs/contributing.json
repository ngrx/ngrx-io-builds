{
  "id": "contributing",
  "title": "Contributing",
  "contents": "\n\n\n\n<div class=\"content\">\n<h1 id=\"contributing\">Contributing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#contributing\"><i class=\"material-icons\">link</i></a></h1>\n<p>NgRx is a community-maintained project that thrives due to the contributions of fellow developers. Whether it be documentation, issues, features, or tests, all contributions help this project in a meaningful way. This page serves as a \"Getting Started Guide\" on how to contribute to NgRx in different areas. If you also want to donate or sponsor this project, visit our <a href=\"https://opencollective.com/ngrx\">Open Collective</a> page.</p>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li><code>yarn</code> - The NgRx library utilizes the <code>yarn</code> CLI tool. Please make sure that you have the latest stable release of <code>yarn</code> installed. For more information, visit the <a href=\"https://yarnpkg.com/en/docs/install\">Yarn Install Docs</a></li>\n</ul>\n<h2 id=\"contributing-to-the-docs-and-ngrxio-website\">Contributing to the Docs and NgRx.io Website<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#contributing-to-the-docs-and-ngrxio-website\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"learn-how-to-contribute\">Learn How to Contribute<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#learn-how-to-contribute\"><i class=\"material-icons\">link</i></a></h3>\n<p>Watch as Brandon Roberts and Jan-Niklas Wortmann walk through how to contribute to RxJS and NgRx through the docs. They will cover finding issues, making changes, and submitting a pull request.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ug0c1tUegm4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h3 id=\"folder-structure\">Folder Structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#folder-structure\"><i class=\"material-icons\">link</i></a></h3>\n<p>Source code for the NgRx docs and the ngrx.io website exist under the <code>projects/ngrx.io/content</code> folder. If you are planning to contribute features and/or bug fixes relating to the docs or the website, the code is there. The structure is split up between the following subfolders and key files:</p>\n<ul>\n<li><code>projects/ngrx.io/content/examples</code> - Code examples referenced on the website and in the docs should be placed under this folder</li>\n<li><code>projects/ngrx.io/content/guide</code> - The majority of official NgRx documentation exists under this folder. There are sub-folders for each module.</li>\n<li><code>projects/ngrx.io/content/marketing</code> - The majority of the additional website pages such as resources, events, about the NgRx team exist under this folder.</li>\n<li><code>projects/ngrx/io/content/events.json</code> - The Events page dynamically displays two tables, one for Past Events and one for Present events based on the contents of this file.</li>\n<li><code>projects/ngrx/io/content/resources.json</code> - The Resources page dynamically displays a list of NgRx resources based on the contents of this file.</li>\n<li><code>projects/ngrx/io/content/navigation.json</code> - All of the navigation and menus on the website and docs are populated from this JSON file. If a new page is being added or adjusted make sure to update this file as well.</li>\n</ul>\n<h3 id=\"submission-guidelines\">Submission Guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#submission-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<p>The NgRx team values quality documentation as a way to help new and existing users understand and use features of the platform. The guidelines below help to ensure that quality for our users.</p>\n<ul>\n<li>Documentation should be free of typos, grammatical errors, slang, and vagueness. </li>\n<li>When contributing, please take special care to ensure that all new copy has been spell-checked and run through a third-party grammar checking service. This will speed up the time to merge, as well as, save time for the maintainers reviewing the PR.</li>\n<li>Confirm that all commit messages adhere to the <a href=\"contributing#commit-message-guidelines\">Commit Message Guidelines</a></li>\n</ul>\n<h3 id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#setup\"><i class=\"material-icons\">link</i></a></h3>\n<p>To ensure the correct project dependencies are installed, please run the following command before each new pull request (PR) is submitted. This command should be run from the <code>projects/ngrx.io</code> folder.</p>\n<code-example language=\"sh\">\nyarn setup\n</code-example>\n<h3 id=\"running-locally\">Running Locally<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#running-locally\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is recommended to run the docs and website locally before pushing commits to PR's. A <code>yarn</code> script is provided to launch the docs locally, watch for changes and reload automatically. The following command will do this all at once:</p>\n<code-example language=\"sh\">\nyarn serve-and-sync\n</code-example>\n<p>After running this command, an instance of the website and docs will be available at <code>http://localhost:4200</code></p>\n<h3 id=\"adding-live-examples\">Adding live examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#adding-live-examples\"><i class=\"material-icons\">link</i></a></h3>\n<p>Live examples is the best way to provide code snippets in the guide, for the following reasons:</p>\n<ul>\n<li>it's easier to maintain them</li>\n<li>they prove that the code example is working</li>\n<li>a developer can open the full example in the StackBlitz to follow along</li>\n<li>the formatting of all of the examples is kept consistent</li>\n</ul>\n<p>To keep the formatting consistent, run the following command after any of the live examples are added or modified: </p>\n<code-example language=\"sh\">\nyarn prettier\n</code-example>\n<h2 id=\"contributing-to-the-library-modules\">Contributing to the Library Modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#contributing-to-the-library-modules\"><i class=\"material-icons\">link</i></a></h2>\n<h3 id=\"folder-structure-1\">Folder Structure<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#folder-structure-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>Source code for the NgRx library exists under the <code>modules/</code> project folder. If you are planning to contribute features and/or bug fixes relating to the library, the code is in one of the <code>modules</code> sub-folders. These sub-folders mirror, for the most part, the <code>npm</code> packages for <code>@ngrx/*</code>:</p>\n<ul>\n<li><code>modules/data</code> > <code>@ngrx/data</code></li>\n<li><code>modules/effects</code> > <code>@ngrx/effects</code></li>\n<li><code>modules/entity</code> > <code>@ngrx/entity</code></li>\n<li><code>modules/router-store</code> > <code>@ngrx/router-store</code></li>\n<li><code>modules/schematics</code> > <code>@ngrx/schematics</code></li>\n<li><code>modules/store</code> > <code>@ngrx/store</code></li>\n<li><code>modules/store-devtools</code> > <code>@ngrx/store-devtools</code></li>\n</ul>\n<p>Within each of these <code>modules/*</code> folders exists a standard and pertinent set of files and folders:</p>\n<ul>\n<li><code>migrations</code> - With new releases come new features and occasional breaking changes. We strive to create migrations, whenever possible for users to easily migrate to new versions. This folder will contain those version specific migration utility scripts.</li>\n<li><code>schematics</code> - NgRx provides a fully featured set of schematics. This folder will contain those schematics specific to each module for use with <code>ng add</code> and <code>ng generate</code>.</li>\n<li><code>spec</code> - All unit tests for the given module will exist under this folder. </li>\n<li><code>src</code> - This folder contains the actual module API features including private utility functions. </li>\n<li><code>src\\index.ts</code> - This file is responsible for providing the public API surface layer. Only public API methods and models are exported from here.</li>\n</ul>\n<h3 id=\"setup-1\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#setup-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>To ensure the correct project dependencies are installed, please run the following command before each new pull request (PR) is submitted. This command should be run from the root project folder.</p>\n<code-example language=\"sh\">\nyarn\n</code-example>\n<h3 id=\"build\">Build<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#build\"><i class=\"material-icons\">link</i></a></h3>\n<p>NgRx uses <code>Bazel</code> for builds. In order to build locally, please run the following command:</p>\n<code-example language=\"sh\">\nyarn build\n</code-example>\n<h3 id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#testing\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is good practice to run the following command from the root project folder before pushing new commits.</p>\n<code-example language=\"sh\">\nyarn test\n</code-example>\n<h2 id=\"submitting-pull-requests\">Submitting Pull Requests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#submitting-pull-requests\"><i class=\"material-icons\">link</i></a></h2>\n<p><strong>Please follow these basic steps to simplify pull request reviews. If you don't you'll probably just be asked to anyway.</strong></p>\n<ul>\n<li>Please rebase your branch against the current master.</li>\n<li>Run the <code>Setup</code> instructions to make sure your development dependencies are up-to-date.</li>\n<li>Please ensure the test suite passes before submitting a PR.</li>\n<li>If you've added new functionality, <strong>please</strong> include tests which validate its behavior.</li>\n<li>Make reference to possible <a href=\"https://github.com/ngrx/platform/issues\">issues</a> on PR comment.</li>\n</ul>\n<h2 id=\"submitting-bug-reports\">Submitting bug reports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#submitting-bug-reports\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Search through issues to see if a previous issue has already been reported and/or fixed.</li>\n<li>Provide a <em>small</em> reproduction using a <a href=\"https://stackblitz.com/edit/ngrx-seed\">StackBlitz project</a> or a GitHub repository.</li>\n<li>Please detail the affected browser(s) and operating system(s).</li>\n<li>Please be sure to state which version of Angular, node and npm you're using.</li>\n</ul>\n<h2 id=\"submitting-new-features\">Submitting new features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#submitting-new-features\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>We value keeping the API surface small and concise, which factors into whether new features are accepted.</li>\n<li>Submit an issue with the prefix <code>RFC:</code> with your feature request.</li>\n<li>The feature will be discussed and considered.</li>\n<li>If the feature is large in scope, the <a href=\"https://hackmd.io/-l58MEAIT9qJKpm0su3Kow?view\">Design Doc</a> might be requested.</li>\n<li>Once the Design Doc is approved, small-sized PRs could be submitted.</li>\n<li>Finally, they will be reviewed and merged once approved.</li>\n</ul>\n<h2 id=\"commit-message-guidelines\">Commit Message Guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#commit-message-guidelines\"><i class=\"material-icons\">link</i></a></h2>\n<p>We have very precise rules over how our git commit messages can be formatted. This leads to <strong>more\nreadable messages</strong> that are easy to follow when looking through the <strong>project history</strong>. But also,\nwe use the git commit messages to <strong>generate the NgRx changelog</strong>.</p>\n<h3 id=\"commit-message-format\">Commit Message Format<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#commit-message-format\"><i class=\"material-icons\">link</i></a></h3>\n<p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>. The header has a special\nformat that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p>\n<code-example>\n&#x3C;type>(&#x3C;scope>): &#x3C;subject>\n&#x3C;BLANK LINE>\n&#x3C;body>\n&#x3C;BLANK LINE>\n&#x3C;footer>\n</code-example>\n<p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p>\n<p>Any line of the commit message cannot be longer 100 characters! This allows the message to be easier\nto read on GitHub as well as in various git tools.</p>\n<p>The footer should contain a <a href=\"https://help.github.com/articles/closing-issues-via-commit-messages/\">closing reference to an issue</a> if any.</p>\n<code-example>\nfeat(router-store): add <a href=\"api/router-store/StoreRouterConfig#routerState\" class=\"code-anchor\">routerState</a> <a href=\"api/data/DefaultDataServiceFactory#config\" class=\"code-anchor\">config</a> option\n\nCloses #1834\n</code-example>\n<p>Samples: (even more <a href=\"https://github.com/ngrx/platform/commits/master\">samples</a>)</p>\n<code-example>\ndocs: add new example to selectors guide\n</code-example>\n<code-example>\nfix(store): adjust mock store to handle selectors with <a href=\"api/store/props\" class=\"code-anchor\">props</a>\n</code-example>\n<h3 id=\"revert\">Revert<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#revert\"><i class=\"material-icons\">link</i></a></h3>\n<p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &#x3C;hash>.</code>, where the hash is the SHA of the commit being reverted.</p>\n<h3 id=\"type\">Type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#type\"><i class=\"material-icons\">link</i></a></h3>\n<p>Must be one of the following:</p>\n<ul>\n<li><strong>build</strong>: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)</li>\n<li><strong>ci</strong>: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)</li>\n<li><strong>docs</strong>: Documentation only changes</li>\n<li><strong>feat</strong>: A new feature</li>\n<li><strong>fix</strong>: A bug fix</li>\n<li><strong>perf</strong>: A code change that improves performance</li>\n<li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li>\n<li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</li>\n<li><strong>test</strong>: Adding missing tests or correcting existing tests</li>\n</ul>\n<h3 id=\"scope\">Scope<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#scope\"><i class=\"material-icons\">link</i></a></h3>\n<p>The scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from commit messages.</p>\n<p>The following is the list of supported scopes:</p>\n<ul>\n<li><strong>data</strong></li>\n<li><strong>effects</strong></li>\n<li><strong>entity</strong></li>\n<li><strong>example</strong></li>\n<li><strong>router-store</strong></li>\n<li><strong>schematics</strong></li>\n<li><strong>store</strong></li>\n<li><strong>store-devtools</strong></li>\n</ul>\n<h3 id=\"subject\">Subject<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#subject\"><i class=\"material-icons\">link</i></a></h3>\n<p>The subject contains a succinct description of the change:</p>\n<ul>\n<li>use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"</li>\n<li>don't capitalize the first letter</li>\n<li>no dot (.) at the end</li>\n</ul>\n<h3 id=\"body\">Body<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#body\"><i class=\"material-icons\">link</i></a></h3>\n<p>Just as in the <strong>subject</strong>, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\".\nThe body should include the motivation for the change and contrast this with previous behavior.</p>\n<h3 id=\"footer\">Footer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"contributing#footer\"><i class=\"material-icons\">link</i></a></h3>\n<p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to\nreference GitHub issues that this commit <strong>Closes</strong>.</p>\n<p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p>\n<p>Example:</p>\n<code-example>\nfeat(scope): commit message\n\nBREAKING CHANGES:\n\nDescribe breaking changes here\n\nBEFORE:\n\nPrevious code example here\n\nAFTER:\n\nNew code example here\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/data/DefaultDataServiceFactory#config\n - api/router-store/StoreRouterConfig#routerState\n - api/store/props\n - contributing#adding-live-examples\n - contributing#body\n - contributing#build\n - contributing#commit-message-format\n - contributing#commit-message-guidelines\n - contributing#contributing\n - contributing#contributing-to-the-docs-and-ngrxio-website\n - contributing#contributing-to-the-library-modules\n - contributing#folder-structure\n - contributing#folder-structure-1\n - contributing#footer\n - contributing#learn-how-to-contribute\n - contributing#prerequisites\n - contributing#revert\n - contributing#running-locally\n - contributing#scope\n - contributing#setup\n - contributing#setup-1\n - contributing#subject\n - contributing#submission-guidelines\n - contributing#submitting-bug-reports\n - contributing#submitting-new-features\n - contributing#submitting-pull-requests\n - contributing#testing\n - contributing#type\n - https://github.com/ngrx/platform/commits/master\n - https://github.com/ngrx/platform/issues\n - https://hackmd.io/-l58MEAIT9qJKpm0su3Kow?view\n - https://help.github.com/articles/closing-issues-via-commit-messages/\n - https://opencollective.com/ngrx\n - https://stackblitz.com/edit/ngrx-seed\n - https://yarnpkg.com/en/docs/install\n-->"
}