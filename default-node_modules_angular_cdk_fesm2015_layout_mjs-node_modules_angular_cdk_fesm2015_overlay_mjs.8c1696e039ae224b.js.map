{"version":3,"mappings":"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","names":["mediaQueryStyleNode","mediaQueriesForWebkitCompatibility","Set","MediaMatcher","_platform","this","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","createEmptyStyleRule","ɵfac","i0","i1","ɵprov","factory","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","Subject","next","complete","value","splitQueries","coerceArray","some","X","_registerQuery","mediaQuery","mql","observables","map","observable","stateObservable","combineLatest","concat","pipe","take","skip","debounceTime","response","breakpoints","breakpointStates","forEach","V","get","output","Observable","observer","handler","run","startWith","D","takeUntil","set","queries","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","TakeWhileOperator","predicate","inclusive","p","subscriber","source","subscribe","TakeWhileSubscriber","destination","s","index","result","err","nextOrComplete","predicateResult","Boolean","Subscriber","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","r","disable","_overlayRef","hasAttached","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","t","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","element","scrollContainers","bottom","containerBounds","right","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","close","config","block","reposition","DOCUMENT","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","key","i","undefined","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","event","f","_keydownEvents","_outsidePointerEvents","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","_disposeBackdrop","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","addEventListener","requestAnimationFrame","runOutsideAngular","nextSibling","parentNode","backdropToDetach","timeoutId","finishDetach","removeEventListener","clearTimeout","setTimeout","cssClasses","isAdd","filter","c","length","a","subscription","merge","children","backdrop","OverlayContainer","_containerElement","_createContainer","containerClass","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","i1$1","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","h","originRect","viewportRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","push","position","origin","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","rt","Z","bestFit","bestScore","R","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","indexOf","margin","flexibleDimensions","arguments","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","originX","startX","_isRtl","endX","y","originY","overlayStartX","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","nativeElement","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","hasOwnProperty","input","units","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","u","parent","OverlayPositionBuilder","BaseOverlayDispatcher","_attachedOverlays","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","j","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","type","slice","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","i5","i6","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","ɵdir","selectors","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","EventEmitter","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","coerceBooleanProperty","changes","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","outsidePointerEvents","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","withPositions","withFlexibleDimensions","withPush","withGrowAfterOpen","withViewportMargin","withLockedPosition","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","lift","takeWhile","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","ɵmod","ɵinj","imports","BidiModule","PortalModule","ScrollingModule"],"sources":["./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js","./node_modules/@angular/cdk/fesm2015/overlay.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n    constructor(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n}\nclass TakeWhileSubscriber extends Subscriber {\n    constructor(destination, predicate, inclusive) {\n        super(destination);\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        let result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    }\n    nextOrComplete(value, predicateResult) {\n        const destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    }\n}\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, ApplicationRef, InjectionToken, Directive, EventEmitter, Optional, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        const finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                this._disposeBackdrop(backdropToDetach);\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer\n            .getContainerElement()\n            .getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('pointerdown', this._pointerDownListener, true);\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_cdk_fesm2015_layout_mjs-node_modules_angular_cdk_fesm2015_overlay_mjs.8c1696e039ae224b.js"}