{"version":3,"sources":["./src/app/custom-elements/contributor/contributor.service.ts","./src/app/custom-elements/contributor/contributor.component.ts","./src/app/custom-elements/contributor/contributor-list.component.ts","./src/app/custom-elements/contributor/contributor-list.module.ts"],"names":["contributorsPath","knownGroups","http","this","contributors","getContributors","get","pipe","map","contribs","contribMap","Object","keys","forEach","key","contributor","group","contribGroup","push","cmap","order","indexOf","name","length","sort","compareContributors","compareGroups","publishLast","connect","ContributorService","l","r","toUpperCase","$event","stopPropagation","noPicture","pictureBase","flipCard","person","isFlipped","ContributorComponent","contributorService","locationService","ngOnInit","groupName","search","subscribe","grps","groups","groupNames","g","selectGroup","toLowerCase","selectedGroup","find","setSearch","ContributorListComponent","customElementComponent","ContributorListModule"],"mappings":"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","file":"src_app_custom-elements_contributor_contributor-list_module_ts.da0fb4001f62733e8e86.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { map, publishLast } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Core', 'Contributor'];\n\n@Injectable()\nexport class ContributorService {\n    contributors: Observable<ContributorGroup[]>;\n\n    constructor(private http: HttpClient) {\n        this.contributors = this.getContributors();\n    }\n\n    private getContributors() {\n        const contributors = this.http\n            .get<{ [key: string]: Contributor }>(contributorsPath)\n            .pipe(\n                // Create group map\n                map(contribs => {\n                    const contribMap: { [name: string]: Contributor[] } = {};\n                    Object.keys(contribs).forEach(key => {\n                        const contributor = contribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    return contribMap;\n                }),\n\n                // Flatten group map into sorted group array of sorted contributors\n                map(cmap => {\n                    return Object.keys(cmap)\n                        .map(key => {\n                            const order = knownGroups.indexOf(key);\n                            return {\n                                name: key,\n                                order: order === -1 ? knownGroups.length : order,\n                                contributors: cmap[key].sort(compareContributors),\n                            } as ContributorGroup;\n                        })\n                        .sort(compareGroups);\n                }),\n\n                publishLast()\n            );\n\n        (contributors as ConnectableObservable<ContributorGroup[]>).connect();\n        return contributors;\n    }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n    return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n    return l.order === r.order\n        ? l.name > r.name\n            ? 1\n            : -1\n        : l.order > r.order\n            ? 1\n            : -1;\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n    selector: 'aio-contributor',\n    template: `\n    <div [ngClass]=\"{ 'flipped': person.isFlipped }\" class=\"contributor-card\">\n\n        <div class=\"card-front\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n\n            <div class=\"contributor-image\" [style.background-image]=\"'url('+pictureBase+(person.picture || noPicture)+')'\">\n                <div class=\"contributor-info\">\n                    <a *ngIf=\"person.bio\" mat-button>\n                        View Bio\n                    </a>\n                    <a *ngIf=\"person.twitter\" mat-button class=\"icon\"\n                        href=\"https://twitter.com/{{person.twitter}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-twitter fa-2x\"></span>\n                    </a>\n                    <a *ngIf=\"person.website\" mat-button class=\"icon\"\n                        href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-link fa-2x\"></span>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-back\" *ngIf=\"person.isFlipped\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n            <p class=\"contributor-bio\">{{person.bio}}</p>\n        </div>\n    </div>\n  `\n})\nexport class ContributorComponent {\n    @Input() person: Contributor;\n    noPicture = '_no-one.png';\n    pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n\n    flipCard(person: Contributor) {\n        person.isFlipped = !person.isFlipped;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\n\n@Component({\n    selector: 'aio-contributor-list',\n    template: `\n  <div class=\"flex-center group-buttons\">\n    <a *ngFor=\"let name of groupNames\"\n       [class.selected]=\"name == selectedGroup.name\"\n       class=\"button mat-button filter-button\"\n       (click)=\"selectGroup(name)\">{{name}}</a>\n  </div>\n  <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n    <div class=\"contributor-group\">\n      <aio-contributor *ngFor=\"let person of selectedGroup.contributors\" [person]=\"person\"></aio-contributor>\n    </div>\n  </section>`\n})\nexport class ContributorListComponent implements OnInit {\n    private groups: ContributorGroup[];\n    groupNames: string[];\n    selectedGroup: ContributorGroup;\n\n    constructor(\n        private contributorService: ContributorService,\n        private locationService: LocationService) { }\n\n    ngOnInit() {\n        const groupName =  this.locationService.search()['group'] || '';\n        // no need to unsubscribe because `contributors` completes\n        this.contributorService.contributors\n            .subscribe(grps => {\n                this.groups = grps;\n                this.groupNames = grps.map(g => g.name);\n                this.selectGroup(groupName);\n            });\n    }\n\n    selectGroup(name: string) {\n        name = name.toLowerCase();\n        this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n        this.locationService.setSearch('', {group: this.selectedGroup.name});\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n    imports: [ CommonModule ],\n    declarations: [ ContributorListComponent, ContributorComponent ],\n    entryComponents: [ ContributorListComponent ],\n    providers: [ ContributorService ]\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorListComponent;\n}\n"],"sourceRoot":"webpack:///"}