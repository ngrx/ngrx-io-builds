{"version":3,"mappings":"0WAEEA,iBACEA,sBACFA,+CAEAA,oBAA4DA,kDAASC,QAAO,KAK1ED,sBACAA,sBACFA,+BAHEA,qCAE+DA,oEAK7DA,oBAEEA,gBACFA,+DAFEA,eAAsBA,kEAAoE,4BAD/EA,uBAERA,oCAAiB,uDAHxBA,SACEA,wBAIFA,2CAJsCA,kGAOxCA,qBAA4DA,kDAASE,WAKrEF,+BAJiDA,iCAG/CA,+DA5BJA,iBAEEA,uBAIAA,0BASAA,gBACEA,gCAMFA,QAEAA,0BAMFA,4BA9BwDA,iCAEhDA,iDAIGA,qDASYA,+CACWA,oCAQvBA,sDCVJ,IAAMG,EAAb,eAAaA,EAAb,WAWI,WACYC,EACRC,EACQC,IAAsB,eAFtBC,qBAEAA,kBAZZA,iBAA6B,KAC7BA,UAAgB,OAChBA,kBAAc,EACdA,iBAAa,EAELA,eAAY,IAAIC,IAChBD,gBAAa,EAOjBA,KAAKE,YAAwE,IAA3DJ,EAAWK,cAAcC,UAAUC,QAAQ,YAfrE,uCAkBI,WAAQ,WACJL,KAAKD,WAAWO,QACXC,QAAKC,KAAUR,KAAKS,YACpBC,UAAU,YACPC,EAAKL,QAAUA,EACf,IAAMM,EAwDtB,SAAkBC,EAAYC,GAC1B,OAAOD,EAAME,OAAO,SAACC,EAAQC,GAAT,MAzDqD,OAyDhCA,EAzDsBC,MAyDdF,EAAS,EAAIA,GAAQ,GAzDxCG,CAAMR,EAAKL,SAE7BK,EAAKS,KAAQR,EAAY,EACrBD,EAAKT,WACAU,EAAYD,EAAKU,WACd,qBACA,iBACJ,WACJ,WA/BpB,6BAmCI,WAAe,WACNrB,KAAKE,aAINoB,OAAc,CAACtB,KAAKD,WAAWwB,gBAAgBhB,QAAKiB,KAAYC,MAAQzB,KAAK0B,MAAMC,QAAQpB,MAAKqB,OAAU5B,KAAK0B,UAC1GnB,QAAKC,KAAUR,KAAKS,YACpBC,UAAU,YAAmB,mBAAjBmB,EAAiBC,KAAVJ,EAAUI,KAE1B,GADAnB,EAAKoB,YAAcF,IACL,OAAVA,GAAkBA,GAASH,EAAMM,QAIrC,KAAMC,EAAIP,EAAMQ,UAAUL,GAAO1B,cAC3BgC,EAAIF,EAAEG,aAENC,EAAQJ,EAAEK,wBACVC,EAAQJ,EAAEG,wBAEMD,EAAMG,KAAOD,EAAMC,KAASH,EAAMI,QAAUF,EAAME,SAGpEN,EAAEO,WAAcL,EAAMG,IAAMD,EAAMC,IAAQL,EAAEQ,aAAe,QAzDnF,yBA+DI,WACI3C,KAAKS,UAAUmC,SAhEvB,oBAmEI,WAAuB,IAAhBC,IAAgBC,yDACnB9C,KAAK+C,aAAe/C,KAAK+C,YACrBF,GAAa7C,KAAK+C,aAClB/C,KAAKgD,UAtEjB,mBA0EI,WACIhD,KAAKH,cAAcoD,kBA3E3BC,kDAAatD,GAAYH,6DAAZG,EAAYuD,6lCDdzB1D,4BAAMA,6ECcOG,EAAb,GCHawD,EAAb,eAAaA,KAAbC,KALA,6BAMIrD,4BAAoCJ,iDAD3BwD,4DAJA,CAAEE,KAAcC,SAIhBH,EAAb","names":["i0","ctx_r5","ctx_r12","TocComponent","scrollService","elementRef","tocService","this","Subject","isEmbedded","nativeElement","className","indexOf","tocList","pipe","takeUntil","onDestroy","subscribe","o","itemCount","array","fn","reduce","result","item","level","count","type","primaryMax","combineLatest","activeItemIndex","subscribeOn","asap","items","changes","startWith","index","s","activeIndex","length","e","toArray","p","offsetParent","eRect","getBoundingClientRect","pRect","top","bottom","scrollTop","clientHeight","next","canScroll","arguments","isCollapsed","toTop","scrollToTop","i","selectors","TocModule","v","CommonModule","MatIconModule"],"sources":["./src/app/custom-elements/toc/toc.component.html","./src/app/custom-elements/toc/toc.component.ts","./src/app/custom-elements/toc/toc.module.ts"],"sourcesContent":["<div *ngIf=\"type !== 'None'\" class=\"toc-inner no-print\" [class.collapsed]=\"isCollapsed\">\n\n  <div *ngIf=\"type === 'EmbeddedSimple'\" class=\"toc-heading embedded\">\n    Contents\n  </div>\n\n  <button *ngIf=\"type === 'EmbeddedExpandable'\" type=\"button\" (click)=\"toggle(false)\"\n    class=\"toc-heading embedded secondary\"\n    title=\"Expand/collapse contents\"\n    aria-label=\"Expand/collapse contents\"\n    [attr.aria-pressed]=\"!isCollapsed\">\n    Contents\n    <mat-icon class=\"rotating-icon\" svgIcon=\"keyboard_arrow_right\" [class.collapsed]=\"isCollapsed\"></mat-icon>\n  </button>\n\n  <ul class=\"toc-list\" [class.embedded]=\"type !== 'Floating'\">\n    <ng-container *ngFor=\"let toc of tocList; let i = index\">\n      <li #tocItem title=\"{{toc.title}}\" *ngIf=\"type === 'Floating' || toc.level !== 'h1'\"\n        class=\"{{toc.level}}\" [class.secondary]=\"type === 'EmbeddedExpandable' && i >= primaryMax\" [class.active]=\"i === activeIndex\">\n        <a [href]=\"toc.href\" [innerHTML]=\"toc.content\"></a>\n      </li>\n    </ng-container>\n  </ul>\n\n  <button *ngIf=\"type === 'EmbeddedExpandable'\" type=\"button\" (click)=\"toggle()\"\n    class=\"toc-more-items embedded material-icons\" [class.collapsed]=\"isCollapsed\"\n    title=\"Expand/collapse contents\"\n    aria-label=\"Expand/collapse contents\"\n    [attr.aria-pressed]=\"!isCollapsed\">\n  </button>\n</div>\n","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { asapScheduler as asap, combineLatest, Subject } from 'rxjs';\nimport { startWith, subscribeOn, takeUntil } from 'rxjs/operators';\n\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { TocItem, TocService } from 'app/shared/toc.service';\n\ntype TocType = 'None' | 'Floating' | 'EmbeddedSimple' | 'EmbeddedExpandable';\n\n@Component({\n    selector: 'aio-toc',\n    templateUrl: 'toc.component.html',\n    styles: []\n})\nexport class TocComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    activeIndex: number | null = null;\n    type: TocType = 'None';\n    isCollapsed = true;\n    isEmbedded = false;\n    @ViewChildren('tocItem') private items: QueryList<ElementRef>;\n    private onDestroy = new Subject<void>();\n    private primaryMax = 4;\n    tocList: TocItem[];\n\n    constructor(\n        private scrollService: ScrollService,\n        elementRef: ElementRef,\n        private tocService: TocService) {\n        this.isEmbedded = elementRef.nativeElement.className.indexOf('embedded') !== -1;\n    }\n\n    ngOnInit() {\n        this.tocService.tocList\n            .pipe(takeUntil(this.onDestroy))\n            .subscribe(tocList => {\n                this.tocList = tocList;\n                const itemCount = count(this.tocList, item => item.level !== 'h1');\n\n                this.type = (itemCount > 0) ?\n                    this.isEmbedded ?\n                        (itemCount > this.primaryMax) ?\n                            'EmbeddedExpandable' :\n                            'EmbeddedSimple' :\n                        'Floating' :\n                    'None';\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.isEmbedded) {\n            // We use the `asap` scheduler because updates to `activeItemIndex` are triggered by DOM changes,\n            // which, in turn, are caused by the rendering that happened due to a ChangeDetection.\n            // Without asap, we would be updating the model while still in a ChangeDetection handler, which is disallowed by Angular.\n            combineLatest([this.tocService.activeItemIndex.pipe(subscribeOn(asap)), this.items.changes.pipe(startWith(this.items))])\n                .pipe(takeUntil(this.onDestroy))\n                .subscribe(([index, items]) => {\n                    this.activeIndex = index;\n                    if (index === null || index >= items.length) {\n                        return;\n                    }\n\n                    const e = items.toArray()[index].nativeElement;\n                    const p = e.offsetParent;\n\n                    const eRect = e.getBoundingClientRect();\n                    const pRect = p.getBoundingClientRect();\n\n                    const isInViewport = (eRect.top >= pRect.top) && (eRect.bottom <= pRect.bottom);\n\n                    if (!isInViewport) {\n                        p.scrollTop += (eRect.top - pRect.top) - (p.clientHeight / 2);\n                    }\n                });\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy.next();\n    }\n\n    toggle(canScroll = true) {\n        this.isCollapsed = !this.isCollapsed;\n        if (canScroll && this.isCollapsed) {\n            this.toTop();\n        }\n    }\n\n    toTop() {\n        this.scrollService.scrollToTop();\n    }\n}\n\nfunction count<T>(array: T[], fn: (item: T) => boolean) {\n    return array.reduce((result, item) => fn(item) ? result + 1 : result, 0);\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { TocComponent } from './toc.component';\n\n@NgModule({\n    imports: [ CommonModule, MatIconModule ],\n    declarations: [ TocComponent ],\n    entryComponents: [ TocComponent ],\n})\nexport class TocModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = TocComponent;\n}\n"],"sourceRoot":"webpack:///","file":"src_app_custom-elements_toc_toc_module_ts.df7a77049858cfa3.js"}