{"version":3,"mappings":"kSASMA,EAAgBC,KAAqB,iBAG9BC,EAAb,eAAaA,EAAb,WAGI,WAAoBC,MAAgBC,aAAhBC,YAChBA,KAAKC,WAAaD,KAAKE,gBAJ/B,4CAOY,WAEJ,IAAMD,EAAaD,KAAKF,KAAKK,IAASR,GAAeS,MACjDC,OAAI,YAAI,OAUpB,SAAsBC,GAClB,OAAOC,OAAOC,KAAKF,GAAcD,IAAI,YACjC,IAAMI,EAAMH,EAAaI,GACzB,MAAO,CACHC,GAAIC,EAAOF,GACXG,MAAOH,EACPI,MAAOL,EAAIK,MACXC,cAAeC,EAAgBP,EAAIM,cAAeL,MAGrDO,KAAKC,GApBUC,CAAaC,QACzBC,QAGHpB,SAAiDqB,UAC3CrB,MAffsB,kDAAa1B,GAAe2B,wCAAf3B,EAAe4B,QAAf5B,EAAe,YAAfA,EAAb,GAkCA,WAAyB6B,EAAsBhB,GAC3C,OAAOH,OAAOC,KAAKkB,GAAiBrB,IAAI,YACpC,IAAMsB,EAAMD,EAAgBE,GAC5B,MAAO,CACHjB,GAAIC,EAAOgB,GACXf,MAAOe,EACPd,MAAOa,EAAIb,MACXe,UAAWC,EAAYH,EAAIE,UAAWD,EAAQlB,MAGjDO,KAAKC,GAId,WAAqBa,EAAmBH,EAAgBlB,GACpD,OAAOH,OAAOC,KAAKuB,GAAc1B,IAAI,YACjC,IAAM2B,EAAMD,EAAaE,GACzBD,SAAIE,SAAWxB,EACfsB,EAAIG,YAAcP,EAClBI,EAAIrB,GAAKC,EAAOqB,GACTD,IAENf,KAAKmB,GAGd,WAAqBC,EAA2Bd,GAC5C,OAAOc,EAAEvB,QAAUS,EAAET,MAAQsB,EAAcC,EAAGd,GAAKc,EAAEvB,MAAQS,EAAET,MAAQ,GAAI,EAG/E,WAAuBuB,EAAoBd,GACvC,OAAOc,EAAExB,MAAMyB,cAAgBf,EAAEV,MAAMyB,cAAgB,GAAI,EAG/D,WAAgBzB,GACZ,OAAOA,EAAM0B,cAAcC,QAAQ,OAAQ,8BClEjChB,kBACEA,gBACEA,eACEA,cAAIA,SAAkBA,QACtBA,gBAAgCA,SAAqCA,QACvEA,QACFA,QACFA,sCAN8DA,mCAEpDA,wBAC4BA,mEALxCA,eACEA,uBAQFA,gCAR2BA,uDAL7BA,eACEA,eACAA,gBAA8BA,SAAqBA,QAEnDA,uBAUFA,gCAb6BA,0BACGA,wBAEJA,gEAXhCA,iBACEA,oBACEA,eACAA,cAAIA,SAAkBA,QACxBA,QAEAA,iBACEA,uBAeFA,QACFA,gCArB+BA,0BACvBA,wBAIyBA,2CCChC,IAAMiB,EAAb,eAAaA,EAAb,WAMI,WACIC,EACQC,IAAgC,eAAhC3C,uBAJZA,eAAY,EAKRA,KAAK0C,SAAWA,EAASE,SAASJ,QAAQ,OAAQ,IAT1D,mCAYI,SAAK/B,GACD,OAAOT,KAAK0C,SAAW,IAAMjC,EAAIE,KAbzC,sBAgBI,WAAQ,WAGJX,KAAK2C,gBAAgB1C,WAAW4C,UAAU,YAAI,OAAIC,EAAK7C,WAAa8C,MAnB5E,sBAuBI,SAASC,GACLhD,KAAKiD,UAAYD,IAASA,EAAOE,WAAaF,EAAOG,KAAKD,YAAc,MAxBhF3B,kDAAakB,GAAqBjB,+CAArBiB,EAAqBW,oGAArBC,uBAAuB,waDVpC7B,iBACIA,iBACEA,uBAwBFA,QACJA,eAzBiDA,kFCQpCiB,EAAb,GCEaa,EAAb,eAAaA,EANb,6BAOItD,4BAAoCyC,gDAD3Ba,6DAFE,CAAEzD,GAAiB0D,SAHrB,CAAEC,SAKFF,EAAb","names":["resourcesPath","CONTENT_URL_PREFIX","ResourceService","http","u","this","categories","getCategories","get","pipe","map","categoryJson","Object","keys","cat","catKey","id","makeId","title","order","subCategories","mkSubCategories","sort","compareCats","mkCategories","data","publishLast","connect","r","i0","factory","subCategoryJson","sub","subKey","resources","mkResources","resourceJson","res","resKey","category","subCategory","compareTitles","l","toUpperCase","toLowerCase","replace","ResourceListComponent","location","resourceService","pathname","subscribe","i","cats","target","scrollPos","scrollTop","body","selectors","ctx","ResourceListModule","imports","CommonModule"],"sources":["./src/app/custom-elements/resource/resource.service.ts","./src/app/custom-elements/resource/resource-list.component.html","./src/app/custom-elements/resource/resource-list.component.ts","./src/app/custom-elements/resource/resource-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { map, publishLast } from 'rxjs/operators';\n\nimport { Category, Resource, SubCategory } from './resource.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst resourcesPath = CONTENT_URL_PREFIX + 'resources.json';\n\n@Injectable()\nexport class ResourceService {\n    categories: Observable<Category[]>;\n\n    constructor(private http: HttpClient) {\n        this.categories = this.getCategories();\n    }\n\n    private getCategories(): Observable<Category[]> {\n\n        const categories = this.http.get<any>(resourcesPath).pipe(\n            map(data => mkCategories(data)),\n            publishLast(),\n        );\n\n        (categories as ConnectableObservable<Category[]>).connect();\n        return categories;\n    };\n}\n\n// Extract sorted Category[] from resource JSON data\nfunction mkCategories(categoryJson: any): Category[] {\n    return Object.keys(categoryJson).map(catKey => {\n        const cat = categoryJson[catKey];\n        return {\n            id: makeId(catKey),\n            title: catKey,\n            order: cat.order,\n            subCategories: mkSubCategories(cat.subCategories, catKey)\n        } as Category;\n    })\n        .sort(compareCats);\n}\n\n// Extract sorted SubCategory[] from JSON category data\nfunction mkSubCategories(subCategoryJson: any, catKey: string): SubCategory[] {\n    return Object.keys(subCategoryJson).map(subKey => {\n        const sub = subCategoryJson[subKey];\n        return {\n            id: makeId(subKey),\n            title: subKey,\n            order: sub.order,\n            resources: mkResources(sub.resources, subKey, catKey)\n        } as SubCategory;\n    })\n        .sort(compareCats);\n}\n\n// Extract sorted Resource[] from JSON subcategory data\nfunction mkResources(resourceJson: any, subKey: string, catKey: string): Resource[] {\n    return Object.keys(resourceJson).map(resKey => {\n        const res = resourceJson[resKey];\n        res.category = catKey;\n        res.subCategory = subKey;\n        res.id = makeId(resKey);\n        return res as Resource;\n    })\n        .sort(compareTitles);\n}\n\nfunction compareCats(l: Category | SubCategory, r: Category | SubCategory) {\n    return l.order === r.order ? compareTitles(l, r) : l.order > r.order ? 1 : -1;\n}\n\nfunction compareTitles(l: {title: string}, r: {title: string}) {\n    return l.title.toUpperCase() > r.title.toUpperCase() ? 1 : -1;\n}\n\nfunction makeId(title: string) {\n    return title.toLowerCase().replace(/\\s+/g, '-');\n}\n","<div class=\"resources-container\">\n    <div class=\"l-flex--column\">\n      <div class=\"showcase\" *ngFor=\"let category of categories\">\n        <header class=\"c-resource-header\">\n          <a class=\"h-anchor-offset\" id=\"{{category.id}}\"></a>\n          <h2>{{category.title}}</h2>\n        </header>\n\n        <div class=\"shadow-1\">\n          <div *ngFor=\"let subCategory of category.subCategories\">\n            <a class=\"h-anchor-offset\" id=\"{{subCategory.id}}\"></a>\n            <h3 class=\"subcategory-title\">{{subCategory.title}}</h3>\n\n            <div *ngFor=\"let resource of subCategory.resources\">\n              <div class=\"c-resource\" *ngIf=\"resource.rev\">\n                <a class=\"l-flex--column resource-row-link\" target=\"_blank\" [href]=\"resource.url\">\n                  <div>\n                    <h4>{{resource.title}}</h4>\n                    <p class=\"resource-description\">{{resource.desc || 'No Description'}}</p>\n                  </div>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n</div>\n","import { Component, HostListener, OnInit } from '@angular/core';\nimport { PlatformLocation } from '@angular/common';\n\nimport { Category } from './resource.model';\nimport { ResourceService } from './resource.service';\n\n@Component({\n    selector: 'aio-resource-list',\n    templateUrl: 'resource-list.component.html'\n})\nexport class ResourceListComponent implements OnInit {\n\n    categories: Category[];\n    location: string;\n    scrollPos = 0;\n\n    constructor(\n        location: PlatformLocation,\n        private resourceService: ResourceService) {\n        this.location = location.pathname.replace(/^\\/+/, '');\n    }\n\n    href(cat: {id: string}) {\n        return this.location + '#' + cat.id;\n    }\n\n    ngOnInit() {\n    // Not using async pipe because cats appear twice in template\n    // No need to unsubscribe because categories observable completes.\n        this.resourceService.categories.subscribe(cats => this.categories = cats);\n    }\n\n    @HostListener('window:scroll', ['$event.target'])\n    onScroll(target: any) {\n        this.scrollPos = target ? target.scrollTop || target.body.scrollTop ||  0 : 0;\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResourceListComponent } from './resource-list.component';\nimport { ResourceService } from './resource.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n    imports: [ CommonModule ],\n    declarations: [ ResourceListComponent ],\n    entryComponents: [ ResourceListComponent ],\n    providers: [ ResourceService ]\n})\nexport class ResourceListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ResourceListComponent;\n}\n"],"sourceRoot":"webpack:///","file":"src_app_custom-elements_resource_resource-list_module_ts.aa83435139d75faa.js"}