{"version":3,"file":"src_app_custom-elements_contributor_contributor-list_module_ts.7a21d961d4021dcc.js","mappings":"ghBA8MwGA,MA2jCwlC,YA3jCxlCA,MA2jC0qC,GA3jC1qCA,oCA2jC0qC,GA3jC1qCA,MA2jC0qCC,0CA3jC1qCD,MA2jC2yC,aA3jC3yCA,MA2jCg2C,GA3jCh2CA,qCA2jCg2C,GA3jCh2CA,MA2jCg2CC,uCA3jCh2CD,MA2jC+3C,wDA3jC/3CA,MA2jCssC,YA3jCtsCA,MA2jC2yC,oBA3jC3yCA,MA2jC+3C,0BA3jC/3CA,oCA2jCowC,8BA3jCpwCA,MA2jC06C,GA3jC16CA,MA2jC06C,qDA3jC16CA,cA2jCyrE,WA3jCzrEA,CA2jCyrE,eA3jCzrEA,MA2jCiqF,mCA3jCjqFA,MA2jCiqFC,WA3jCjqFD,QA2jCiqF,OA3jCjqFA,MA2jC0rFE,8CA3jC1rFF,CA2jCiqF,sBA3jCjqFA,MA2jCiqFC,WA3jCjqFD,QA2jCiqF,OA3jCjqFA,MA2jCm2FE,uBA3jCn2FF,MA2jCo4F,KA3jCp4FA,wCA2jC8tE,8BA3jC9tEA,MA2jCm0E,GA3jCn0EA,MA2jCm0E,2CA3jCn0EA,MA2jCkvF,sCA3jClvFA,CA2jCkvF,qCA3jClvFA,MA2jC0jF,uBA3jC1jFA,CA2jC0jF,2DA3jC1jFA,MA2jC43E,mBA3jC53EA,CA2jC43E,kCA3jC53EA,CA2jC43E,+BA3jC53EA,CA2jC43E,sHAnuC99EG,EAAsB,CAMxBC,sBAAoBC,MAAQ,qBAAsB,IAC9CC,MAAW,eAAaC,MAAM,kBAAmB,IAACC,SAAiB,CAAEC,UAAU,OAWnFC,kBAAgBL,MAAQ,iBAAkB,IACtCM,MAAM,UAAQC,MAAM,CAChBC,UAAW,cACXC,SAAU,OACVC,QAAS,QAEbJ,MAAM,aAAWC,MAAM,CACnBG,QAAS,EACTD,SAAU,oBACVD,UAAW,kBAEfF,MAAM,sBAAoBC,MAAM,CAC5BG,QAAS,EACTD,SAAU,oBACVD,UAAW,kBAEfP,MAAW,eAAaU,MAAQ,wCAChCV,MAAW,eAAaU,MAAQ,uBAAqBJ,MAAM,CAAEG,QAAS,SA4C9E,IAAIE,EAAe,EAOnB,MAAMC,EAA0B,IAwB1BC,EAA6B,IAAIC,MAAe,8BAMhDC,GAAoB,IAAID,MAAe,qBAEvCE,GAAsC,CACxCC,QAASJ,EACTK,KAAM,CAACC,MACPC,WATJ,YAAqDC,GACjD,MAAO,IAAMA,EAAQC,iBAAiBC,eAW1C,MAAMC,GACFC,YAEAC,EAEAC,GACIC,KAAKF,OAASA,EACdE,KAAKD,MAAQA,GAKrB,MAAME,MAAsBC,SAAmBC,SAAcC,SAAcC,MAAgB,MACvFR,YAAYS,EAAaC,EAA2BC,EAAaC,EAMjEC,GACIV,KAAKM,YAAcA,EACnBN,KAAKO,0BAA4BA,EACjCP,KAAKQ,YAAcA,EACnBR,KAAKS,iBAAmBA,EACxBT,KAAKU,UAAYA,EAMjBV,KAAKW,aAAe,IAAIC,UAQ1BC,GAAqB,IAAI3B,MAAe,wBAgBxC4B,SAAN,MAAMA,UAAuBb,GACzBJ,YAAYkB,EAAgBC,EAAoBC,EAASV,EAA2BW,EAAYC,EAAMX,EAAaC,EAAkBW,EAAkBV,EAAWW,EAAUC,EAAuBC,GAAgBC,GAAiB,UAChOC,MAAMP,EAAYX,EAA2BC,EAAaC,EAAkBC,GAC5EV,KAAKe,eAAiBA,EACtBf,KAAKgB,mBAAqBA,EAC1BhB,KAAKiB,QAAUA,EACfjB,KAAKmB,KAAOA,EACZnB,KAAKoB,iBAAmBA,EACxBpB,KAAKuB,eAAiBA,GACtBvB,KAAKwB,gBAAkBA,EAEvBxB,KAAK0B,YAAa,EAElB1B,KAAK2B,aAAe,CAACC,EAAIC,IAAOD,IAAOC,EAEvC7B,KAAK8B,KAAQ,cAAa/C,IAE1BiB,KAAK+B,uBAAyB,KAE9B/B,KAAKgC,SAAW,IAAIpB,IAEpBZ,KAAKiC,UAAY,OAEjBjC,KAAKkC,WAAa,OAElBlC,KAAKmC,SAAY,oBAAmBpD,IAEpCiB,KAAKoC,0BAA4B,IAAIxB,IACrCZ,KAAKqC,oBAAqB,eAAKb,uBAAL,eAAsBc,oBAAqB,GACrEtC,KAAKuC,UAAW,EAEhBvC,KAAKwC,YAAc,aACnBxC,KAAKyC,WAAY,EACjBzC,KAAK0C,wBAAL,oBAA+B1C,KAAKwB,uBAApC,aAA+BmB,EAAsBC,8BAArD,SAEA5C,KAAK6C,UAAY,GAEjB7C,KAAK8C,wBAAyBC,QAAM,KAChC,MAAMC,EAAUhD,KAAKgD,QACrB,OAAIA,EACOA,EAAQC,QAAQC,MAAKC,OAAUH,IAAUI,OAAU,KAAMC,UAASL,EAAQM,IAAIC,GAAUA,EAAOC,sBAEnGxD,KAAKiB,QAAQwC,SAASP,MAAKQ,OAAK,IAAIN,OAAU,IAAMpD,KAAK8C,2BAGpE9C,KAAK2D,aAAe,IAAIC,MAExB5D,KAAK6D,cAAgB7D,KAAK2D,aAAaT,MAAKY,OAAOC,GAAKA,IAAIT,OAAI,SAEhEtD,KAAKgE,cAAgBhE,KAAK2D,aAAaT,MAAKY,OAAOC,IAAMA,IAAIT,OAAI,SAEjEtD,KAAKiE,gBAAkB,IAAIL,MAM3B5D,KAAKkE,YAAc,IAAIN,MACnB5D,KAAKU,YAGLV,KAAKU,UAAUyD,cAAgBnE,MAIe,MAA9CwB,GAAiB4C,4BACjBpE,KAAKqE,2BAA6B7C,EAAgB4C,2BAEtDpE,KAAKsE,uBAAyBhD,EAC9BtB,KAAKuE,gBAAkBvE,KAAKsE,yBAC5BtE,KAAKqB,SAAWmD,SAASnD,IAAa,EAEtCrB,KAAKyE,GAAKzE,KAAKyE,GAGfC,cACA,OAAO1E,KAAKuC,UAAYvC,KAAK0B,WAG7BiD,kBACA,OAAO3E,KAAK4E,aAEZD,gBAAY5E,GACZC,KAAK4E,aAAe7E,EACpBC,KAAKW,aAAakE,OAGlBC,eAAW,YACX,2BAAO9E,KAAK+E,iBAAZ,kBAAyB/E,KAAKU,iBAA9B,iBAAyBqD,EAAgBiB,eAAzC,aAAyBhH,EAAyBiH,aAAaC,sBAA/D,SAEAJ,aAAS/E,GACTC,KAAK+E,WAAYI,QAAsBpF,GACvCC,KAAKW,aAAakE,OAGlBO,eACA,OAAOpF,KAAKyC,UAEZ2C,aAASrF,GAITC,KAAKyC,WAAY0C,QAAsBpF,GAGvC6C,6BACA,OAAO5C,KAAK0C,wBAEZE,2BAAuB7C,GACvBC,KAAK0C,yBAA0ByC,QAAsBpF,GAOrDsF,kBACA,OAAOrF,KAAK2B,aAEZ0D,gBAAYC,GAIZtF,KAAK2B,aAAe2D,EAChBtF,KAAKuF,iBAELvF,KAAKwF,uBAITzF,YACA,OAAOC,KAAKyF,OAEZ1F,UAAM2F,GAEFC,KADqBC,aAAaF,IAElC1F,KAAKiC,UAAUyD,GAInBtB,gCACA,OAAOpE,KAAKqE,2BAEZD,8BAA0BrE,GAC1BC,KAAKqE,4BAA6BwB,QAAqB9F,GAGvD0E,SACA,OAAOzE,KAAK8F,IAEZrB,OAAG1E,GACHC,KAAK8F,IAAM/F,GAASC,KAAK8B,KACzB9B,KAAKW,aAAakE,OAEtBkB,WACI/F,KAAKuF,gBAAkB,IAAIS,MAAehG,KAAKoF,UAC/CpF,KAAKW,aAAakE,OAIlB7E,KAAKoC,0BACAc,MAAK+C,WAAwBC,OAAUlG,KAAKgC,WAC5CmE,UAAU,IAAMnG,KAAKoG,oBAAoBpG,KAAKqG,YAEvDC,qBACItG,KAAKuG,kBACLvG,KAAKuF,gBAAgBiB,QAAQtD,MAAKgD,OAAUlG,KAAKgC,WAAWmE,UAAUM,IAClEA,EAAMC,MAAMC,QAAQpD,GAAUA,EAAOqD,UACrCH,EAAMI,QAAQF,QAAQpD,GAAUA,EAAOuD,cAE3C9G,KAAKgD,QAAQC,QAAQC,MAAKC,OAAU,OAAO+C,OAAUlG,KAAKgC,WAAWmE,UAAU,KAC3EnG,KAAK+G,gBACL/G,KAAKwF,yBAGbwB,YACI,MAAMC,EAAoBjH,KAAKkH,4BACzBxG,EAAYV,KAAKU,UAIvB,GAAIuG,IAAsBjH,KAAK+B,uBAAwB,CACnD,MAAMoF,EAAUnH,KAAKM,YAAY8G,cACjCpH,KAAK+B,uBAAyBkF,EAC9BlJ,EACIoJ,EAAQE,aAAa,kBAAmBJ,GAGxCE,EAAQG,gBAAgB,mBAG5B5G,IAEIV,KAAKuH,mBAAqB7G,EAAUsE,eACNwC,IAA1BxH,KAAKuH,kBACkB,OAAvB7G,EAAU+G,UACV/G,EAAU+G,WAAazH,KAAKyH,WAC5BzH,KAAKyH,SAAW/G,EAAU+G,UAE9BzH,KAAKuH,iBAAmB7G,EAAUsE,SAEtChF,KAAK0H,oBAGbC,YAAY1E,IAGJA,EAAQwE,UAAexE,EAAQ2E,sBAC/B5H,KAAKW,aAAakE,OAElB5B,EAAQmB,2BAAgCpE,KAAK6H,aAC7C7H,KAAK6H,YAAYC,cAAc9H,KAAKqE,4BAG5C0D,cACI/H,KAAKgC,SAAS6C,OACd7E,KAAKgC,SAASgG,WACdhI,KAAKW,aAAaqH,WAGtBC,SACIjI,KAAKqG,UAAYrG,KAAKkI,QAAUlI,KAAKmI,OAGzCA,OACQnI,KAAKoI,aACLpI,KAAK0B,YAAa,EAClB1B,KAAK6H,YAAYQ,0BAA0B,MAC3CrI,KAAKsI,0BACLtI,KAAKgB,mBAAmBuH,gBAIhCL,QACQlI,KAAK0B,aACL1B,KAAK0B,YAAa,EAClB1B,KAAK6H,YAAYQ,0BAA0BrI,KAAKwI,SAAW,MAAQ,OACnExI,KAAKgB,mBAAmBuH,eACxBvI,KAAKkC,cASbuG,WAAW1I,GACPC,KAAK4F,aAAa7F,GAStB2I,iBAAiBpD,GACbtF,KAAKiC,UAAYqD,EASrBqD,kBAAkBrD,GACdtF,KAAKkC,WAAaoD,EAQtBsD,iBAAiBC,GACb7I,KAAKyH,SAAWoB,EAChB7I,KAAKgB,mBAAmBuH,eACxBvI,KAAKW,aAAakE,OAGlBwB,gBACA,OAAOrG,KAAK0B,WAGZoH,eAAW,QACX,OAAO9I,KAAKoF,UAAW,eAAKG,uBAAL,eAAsBuD,WAAY,GAAlD,UAAuD9I,KAAKuF,uBAA5D,aAAuDwD,EAAsBD,SAAS,GAG7FE,mBACA,GAAIhJ,KAAKiJ,MACL,MAAO,GAEX,GAAIjJ,KAAKyC,UAAW,CAChB,MAAMyG,EAAkBlJ,KAAKuF,gBAAgBuD,SAASxF,IAAIC,GAAUA,EAAO4F,WAC3E,OAAInJ,KAAKwI,UACLU,EAAgBE,UAGbF,EAAgBG,KAAK,MAEhC,OAAOrJ,KAAKuF,gBAAgBuD,SAAS,GAAGK,UAG5CX,SACI,QAAOxI,KAAKmB,MAA2B,QAApBnB,KAAKmB,KAAKpB,MAGjCuJ,eAAe7C,GACNzG,KAAKyH,WACNzH,KAAKqG,UAAYrG,KAAKuJ,mBAAmB9C,GAASzG,KAAKwJ,qBAAqB/C,IAIpF+C,qBAAqB/C,GACjB,MAAMgD,EAAUhD,EAAMgD,QAChBC,EAAaD,IAAYE,MAC3BF,IAAYG,MACZH,IAAYI,MACZJ,IAAYK,KACVC,EAAYN,IAAYO,MAASP,IAAYQ,KAC7CC,EAAUlK,KAAK6H,YAErB,IAAMqC,EAAQC,YAAcJ,KAAcK,QAAe3D,KACnDzG,KAAKoF,UAAYqB,EAAM4D,SAAWX,EACpCjD,EAAM6D,iBACNtK,KAAKmI,YAAL,IAEMnI,KAAKoF,SAAU,CACrB,MAAMmF,EAA2BvK,KAAK8I,SACtCoB,EAAQM,UAAU/D,GAClB,MAAMgE,EAAiBzK,KAAK8I,SAExB2B,GAAkBF,IAA6BE,GAG/CzK,KAAKuB,eAAemJ,SAASD,EAAetB,UAAW,MAKnEI,mBAAmB9C,GACf,MAAMyD,EAAUlK,KAAK6H,YACf4B,EAAUhD,EAAMgD,QAChBC,EAAaD,IAAYE,MAAcF,IAAYG,KACnDO,EAAWD,EAAQC,WACzB,GAAIT,GAAcjD,EAAM4D,OAEpB5D,EAAM6D,iBACNtK,KAAKkI,aAAL,GAIMiC,GACLV,IAAYO,MAASP,IAAYQ,OAClCC,EAAQS,aACPP,QAAe3D,GAEhB,IAEM0D,GAAYnK,KAAKyC,WAAagH,IAAYmB,KAAKnE,EAAMoE,QAAS,CACpEpE,EAAM6D,iBACN,MAAMQ,EAAuB9K,KAAKgD,QAAQ+H,KAAKC,IAAQA,EAAIvD,WAAauD,EAAIlC,UAC5E9I,KAAKgD,QAAQ2D,QAAQpD,IACZA,EAAOkE,WACRqD,EAAuBvH,EAAOqD,SAAWrD,EAAOuD,kBAIvD,CACD,MAAMmE,EAAyBf,EAAQgB,gBACvChB,EAAQM,UAAU/D,GACdzG,KAAKyC,WACLiH,GACAjD,EAAM0E,UACNjB,EAAQS,YACRT,EAAQgB,kBAAoBD,GAC5Bf,EAAQS,WAAWS,6BApBvB3E,EAAM6D,iBACNJ,EAAQS,WAAWS,wBAuB3BC,WACSrL,KAAKyH,WACNzH,KAAKuC,UAAW,EAChBvC,KAAKW,aAAakE,QAO1ByG,UACItL,KAAKuC,UAAW,GACXvC,KAAKyH,WAAazH,KAAKqG,YACxBrG,KAAKkC,aACLlC,KAAKgB,mBAAmBuH,eACxBvI,KAAKW,aAAakE,QAM1B0G,cACIvL,KAAKwL,YAAYC,eAAevI,MAAKQ,OAAK,IAAIyC,UAAU,KACpDnG,KAAKgB,mBAAmB0K,gBACxB1L,KAAK2L,wBAIbC,iBACI,OAAO5L,KAAKoB,iBAAoB,OAAMpB,KAAKoB,iBAAiByK,QAAU,GAGtE5C,YACA,OAAQjJ,KAAKuF,iBAAmBvF,KAAKuF,gBAAgBuG,UAEzDtG,uBAGIuG,QAAQC,UAAUC,KAAK,KACfjM,KAAKU,YACLV,KAAKyF,OAASzF,KAAKU,UAAUX,OAEjCC,KAAKkM,qBAAqBlM,KAAKyF,QAC/BzF,KAAKW,aAAakE,SAO1BqH,qBAAqBnM,GAGjB,GAFAC,KAAKuF,gBAAgBuD,SAASnC,QAAQpD,GAAUA,EAAO4I,qBACvDnM,KAAKuF,gBAAgB6G,QACjBpM,KAAKoF,UAAYrF,EACZsM,MAAMC,QAAQvM,GAGnBA,EAAM4G,QAAS4F,GAAiBvM,KAAKwM,qBAAqBD,IAC1DvM,KAAKyM,kBAEJ,CACD,MAAMC,EAAsB1M,KAAKwM,qBAAqBzM,GAGlD2M,EACA1M,KAAK6H,YAAY8E,iBAAiBD,GAE5B1M,KAAKqG,WAGXrG,KAAK6H,YAAY8E,kBAAiB,GAG1C3M,KAAKgB,mBAAmBuH,eAM5BiE,qBAAqBzM,GACjB,MAAM2M,EAAsB1M,KAAKgD,QAAQ4J,KAAMrJ,IAG3C,GAAIvD,KAAKuF,gBAAgBsH,WAAWtJ,GAChC,OAAO,EAEX,IAEI,OAAuB,MAAhBA,EAAOxD,OAAiBC,KAAK2B,aAAa4B,EAAOxD,MAAOA,GAClE,MAMG,OAAO,KAGf,OAAI2M,GACA1M,KAAKuF,gBAAgBqB,OAAO8F,GAEzBA,EAGX9G,aAAaF,GAET,SAAIA,IAAa1F,KAAKyF,QAAWzF,KAAKyC,WAAa4J,MAAMC,QAAQ5G,MACzD1F,KAAKgD,SACLhD,KAAKkM,qBAAqBxG,GAE9B1F,KAAKyF,OAASC,GACP,GAKfa,kBACIvG,KAAK6H,YAAc,IAAIiF,KAA2B9M,KAAKgD,SAClD8E,cAAc9H,KAAKqE,4BACnB0I,0BACA1E,0BAA0BrI,KAAKwI,SAAW,MAAQ,OAClDwE,iBACAC,wBAAwB,CAAC,aAC9BjN,KAAK6H,YAAYqF,OAAOhK,MAAKgD,OAAUlG,KAAKgC,WAAWmE,UAAU,KACzDnG,KAAKqG,aAGArG,KAAKoF,UAAYpF,KAAK6H,YAAY8C,YACnC3K,KAAK6H,YAAY8C,WAAWS,wBAIhCpL,KAAKmN,QACLnN,KAAKkI,WAGblI,KAAK6H,YAAYuF,OAAOlK,MAAKgD,OAAUlG,KAAKgC,WAAWmE,UAAU,KACzDnG,KAAK0B,YAAc1B,KAAKqN,MACxBrN,KAAKsN,sBAAsBtN,KAAK6H,YAAYqD,iBAAmB,IAEzDlL,KAAK0B,aAAe1B,KAAKoF,UAAYpF,KAAK6H,YAAY8C,YAC5D3K,KAAK6H,YAAY8C,WAAWS,0BAKxCrE,gBACI,MAAMwG,GAAqBlK,OAAMrD,KAAKgD,QAAQC,QAASjD,KAAKgC,UAC5DhC,KAAK8C,uBAAuBI,MAAKgD,OAAUqH,IAAqBpH,UAAUM,IACtEzG,KAAKwN,UAAU/G,EAAM3G,OAAQ2G,EAAMgH,aAC/BhH,EAAMgH,cAAgBzN,KAAKoF,UAAYpF,KAAK0B,aAC5C1B,KAAKkI,QACLlI,KAAKmN,YAKb9J,UAASrD,KAAKgD,QAAQM,IAAIC,GAAUA,EAAOmK,gBACtCxK,MAAKgD,OAAUqH,IACfpH,UAAU,KACXnG,KAAKgB,mBAAmBuH,eACxBvI,KAAKW,aAAakE,SAI1B2I,UAAUjK,EAAQkK,GACd,MAAME,EAAc3N,KAAKuF,gBAAgBsH,WAAWtJ,GAChC,MAAhBA,EAAOxD,OAAkBC,KAAKyC,WAQ1BkL,IAAgBpK,EAAOuF,WACvBvF,EAAOuF,SACD9I,KAAKuF,gBAAgBqB,OAAOrD,GAC5BvD,KAAKuF,gBAAgBuB,SAASvD,IAEpCkK,GACAzN,KAAK6H,YAAY+F,cAAcrK,GAE/BvD,KAAKoF,WACLpF,KAAKyM,cACDgB,GAKAzN,KAAKmN,WAtBb5J,EAAOuD,WACP9G,KAAKuF,gBAAgB6G,QACH,MAAdpM,KAAKD,OACLC,KAAK6N,kBAAkBtK,EAAOxD,QAuBlC4N,IAAgB3N,KAAKuF,gBAAgBsH,WAAWtJ,IAChDvD,KAAK6N,oBAET7N,KAAKW,aAAakE,OAGtB4H,cACI,GAAIzM,KAAKoF,SAAU,CACf,MAAMpC,EAAUhD,KAAKgD,QAAQ8K,UAC7B9N,KAAKuF,gBAAgBwI,KAAK,CAACC,EAAGC,IACnBjO,KAAKkO,eACNlO,KAAKkO,eAAeF,EAAGC,EAAGjL,GAC1BA,EAAQmL,QAAQH,GAAKhL,EAAQmL,QAAQF,IAE/CjO,KAAKW,aAAakE,QAI1BgJ,kBAAkBO,GACd,IAAIC,EAAc,KAEdA,EADArO,KAAKoF,SACSpF,KAAK8I,SAASxF,IAAIC,GAAUA,EAAOxD,OAGnCC,KAAK8I,SAAW9I,KAAK8I,SAAS/I,MAAQqO,EAExDpO,KAAKyF,OAAS4I,EACdrO,KAAKkE,YAAYoK,KAAKD,GACtBrO,KAAKiC,UAAUoM,GACfrO,KAAKiE,gBAAgBqK,KAAKtO,KAAKuO,gBAAgBF,IAC/CrO,KAAKgB,mBAAmBuH,eAM5BD,0BACQtI,KAAK6H,cACD7H,KAAKiJ,MACLjJ,KAAK6H,YAAY2G,qBAGjBxO,KAAK6H,YAAY+F,cAAc5N,KAAKuF,gBAAgBuD,SAAS,KAKzEV,WAAW,MACP,OAAQpI,KAAK0B,aAAe1B,KAAKyH,WAAY,eAAKzE,eAAL,eAAcyL,QAAS,EAGxEtB,MAAMnK,GACFhD,KAAKM,YAAY8G,cAAc+F,MAAMnK,GAGzC0L,0BAA0B,MACtB,GAAI1O,KAAK6C,UACL,OAAO,KAEX,MAAM8L,EAAO,UAAG3O,KAAKoB,wBAAR,aAAGrD,EAAuB6Q,aAEvC,OAAO5O,KAAK6O,gBADYF,EAAUA,EAAU,IAAM,IACH3O,KAAK6O,eAAiBF,EAGzEG,2BACI,OAAI9O,KAAKqG,WAAarG,KAAK6H,aAAe7H,KAAK6H,YAAY8C,WAChD3K,KAAK6H,YAAY8C,WAAWlG,GAEhC,KAGXyC,4BAA4B,MACxB,GAAIlH,KAAK6C,UACL,OAAO,KAEX,MAAM8L,EAAO,UAAG3O,KAAKoB,wBAAR,aAAGrD,EAAuB6Q,aACvC,IAAI7O,GAAS4O,EAAUA,EAAU,IAAM,IAAM3O,KAAKmC,SAClD,OAAInC,KAAK6O,iBACL9O,GAAS,IAAMC,KAAK6O,gBAEjB9O,EAGXqG,oBAAoB2I,GAChB/O,KAAK2D,aAAa2K,KAAKS,GAM3BC,kBAAkBC,GACVA,EAAIR,OACJzO,KAAKM,YAAY8G,cAAcC,aAAa,mBAAoB4H,EAAI5F,KAAK,MAGzErJ,KAAKM,YAAY8G,cAAcE,gBAAgB,oBAOvD4H,mBACIlP,KAAKmN,QACLnN,KAAKmI,OAMLgH,uBACA,OAAOnP,KAAK0B,aAAe1B,KAAKiJ,OAAUjJ,KAAKuC,YAAcvC,KAAK4E,cAG1E9D,SAAesO,UAAf,0BAAgHtO,GA5rBRhD,MA4rBwCuR,MA5rBxCvR,MA4rBqEA,OA5rBrEA,MA4rBsGA,OA5rBtGA,MA4rB4HwR,MA5rB5HxR,MA4rB6JA,OA5rB7JA,MA4rBuLyR,KAA/R,GA5rBwGzR,MA4rBqO0R,IAA7U,GA5rBwG1R,MA4rB2Q0R,KAAnX,GA5rBwG1R,MA4rB6T2R,KAAra,GA5rBwG3R,MA4rBwW0R,KAAhd,IA5rBwG1R,MA4rB6Z,YA5rB7ZA,MA4rBqcmB,GA5rBrcnB,MA4rB4e4R,MA5rB5e5R,MA4rBygBqB,GAAjnB,KACA2B,EAAe6O,UA7rByF7R,MA6rBxG,MAAoGgD,EAApG8O,iCA7rBwG9R,KA6rBxG+R,MA7rBwG/R,KA6rBxGgS,MA7rBwGhS,KA6rB64BiS,KAAr/B,eA7rBwGjS,MA6rBxGiG,EA7rBwGjG,WA6rBxGiL,mBA7rBwGjL,MA6rBxGiG,EA7rBwGjG,WA6rBxGiL,iBA7rBwGjL,MA6rBxGiG,EA7rBwGjG,WA6rBxGiL,0oBA7rBwGjL,eAUlGgD,MAqwBAkP,SAAN,MAAMA,UAAkBlP,GACpBjB,cACI4B,SAASwO,WAETjQ,KAAKkQ,WAAa,EAElBlQ,KAAKmQ,iBAAmB,EAExBnQ,KAAKoQ,iBAAmB,MAMxBpQ,KAAKqQ,SAAW,EAChBrQ,KAAKsQ,WAAa,CACd,CACIC,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,OAEd,CACIH,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,WAWtBC,wBAAwBC,EAAeC,EAAcC,GACjD,MAAMC,EAAa/Q,KAAKgR,iBAQxB,OAAOC,KAAKC,IAAID,KAAKE,IAAI,EAPSJ,EAAaH,EAMWC,EALjCE,EAAa,GAMcD,GAExD/K,WACItE,MAAMsE,WACN/F,KAAKe,eACAqM,SACAlK,MAAKgD,OAAUlG,KAAKgC,WACpBmE,UAAU,KACPnG,KAAKqG,YACLrG,KAAKoR,aAAepR,KAAK7B,QAAQiJ,cAAciK,wBAC/CrR,KAAKgB,mBAAmBuH,kBAIpCJ,OACQ1G,MAAM2G,aACN3G,MAAM0G,OACNnI,KAAKoR,aAAepR,KAAK7B,QAAQiJ,cAAciK,wBAG/CrR,KAAKmQ,iBAAmB3L,SAAS8M,iBAAiBtR,KAAK7B,QAAQiJ,eAAemK,UAAY,KAC1FvR,KAAKwR,4BAELxR,KAAKiB,QAAQwC,SAASP,MAAKQ,OAAK,IAAIyC,UAAU,KACtCnG,KAAKmQ,kBACLnQ,KAAKwL,YAAYiG,YACjBzR,KAAKwL,YAAYiG,WAAWC,iBAC5B1R,KAAKwL,YAAYiG,WAAWC,eAAehT,MAAM6S,SAAY,GAAEvR,KAAKmQ,yBAMpF7C,sBAAsBqE,GAClB,MAAMC,GAAaC,QAA8BF,EAAO3R,KAAKgD,QAAShD,KAAK8R,cACrEf,EAAa/Q,KAAKgR,iBAKpBhR,KAAKqN,MAAMjG,cAAc2K,UAJf,IAAVJ,GAA8B,IAAfC,EAIsB,GAGAI,SAA0BL,EAAQC,GAAcb,EAAYA,EAAY/Q,KAAKqN,MAAMjG,cAAc2K,UAAW/S,GAGzJ2M,sBACI3L,KAAKiS,2BACLjS,KAAKqN,MAAMjG,cAAc2K,UAAY/R,KAAKkQ,WAE9C9J,oBAAoB2I,GACZ/O,KAAKqG,UACLrG,KAAKkQ,WAAa,GAGlBlQ,KAAKwL,YAAY0G,QAAU,EAC3BlS,KAAKgB,mBAAmBuH,gBAE5B9G,MAAM2E,oBAAoB2I,GAE9BR,gBAAgBxO,GACZ,OAAO,IAAIH,GAAgBI,KAAMD,GASrCkS,2BACI,MAAME,EAAcnS,KAAKwL,YAAYiG,WAAWC,eAAeL,wBACzDe,EAAepS,KAAKe,eAAesR,kBACnCC,EAAQtS,KAAKwI,SACb+J,EAAevS,KAAKoF,SACpBoN,GACAC,GACN,IAAIP,EAEJ,GAAIlS,KAAKoF,SACL8M,EA98B4BO,QA88BlBD,GAELxS,KAAK4C,uBACVsP,EAh+BmB,OAk+BlB,CACD,IAAIpJ,EAAW9I,KAAKuF,gBAAgBuD,SAAS,IAAM9I,KAAKgD,QAAQ0P,MAChER,EAAUpJ,GAAYA,EAAS6J,MAl+BLF,GAFP,GAu+BlBH,IACDJ,IAAW,GAGf,MAAMU,EAAe,GAAKT,EAAYU,KAAOX,GAAWI,EAAQC,EAAe,IACzEO,EAAgBX,EAAYY,MAAQb,EAAUE,EAAaY,OAASV,EAAQ,EAAIC,GAElFK,EAAe,EACfV,GAAWU,EA39Be,EA69BrBE,EAAgB,IACrBZ,GAAWY,EA99Be,GAm+B9B9S,KAAKwL,YAAY0G,QAAUjB,KAAKgC,MAAMf,GACtClS,KAAKwL,YAAYiG,WAAWyB,iBAOhCC,yBAAyBvC,EAAeC,EAAcC,GAClD,MAAMC,EAAa/Q,KAAKgR,iBAClBoC,GAA0BrC,EAAa/Q,KAAKoR,aAAaiC,QAAU,EACnEC,EAAsBrC,KAAKsC,MAAMvU,EAA0B+R,GACjE,IAAIyC,EAEJ,OAAIxT,KAAK4C,uBACE,GAGP4Q,EADoB,IAApBxT,KAAKkQ,WACsBU,EAAgBG,EAEtC/Q,KAAKkQ,aAAeY,GAEIF,GADD5Q,KAAKyT,gBAAkBH,IASDvC,GAL1BA,GAAe/Q,KAAKyT,gBAAkB1C,EAAa/R,GAA2B+R,GAW3EF,EAAeE,EAAa,EAKpDE,KAAKgC,OAAiC,EAA3BO,EAAgCJ,IAQtDM,4BAA4B5C,GACxB,MAAMC,EAAa/Q,KAAKgR,iBAClBoB,EAAepS,KAAKe,eAAesR,kBACnCsB,EAAoB3T,KAAKoR,aAAawC,IAvhCd,EAwhCxBC,EAAuBzB,EAAaiB,OAASrT,KAAKoR,aAAa0C,OAxhCvC,EAyhCxBC,EAAiB9C,KAAK+C,IAAIhU,KAAKqQ,UAE/B4D,EAAoBC,KADIhD,IAAIlR,KAAKyT,gBAAkB1C,EAAY/R,GACxB+U,EAAiB/T,KAAKoR,aAAaiC,OAC5EY,EAAoBJ,EACpB7T,KAAKmU,eAAeF,EAAmBJ,GAEtCO,EAAqBT,EACtB3T,KAAKqU,iBAAiBN,EAAgBJ,EAAmB7C,GAGzD9Q,KAAKoQ,iBAAmBpQ,KAAKsU,0BAIrCH,eAAeF,EAAmBJ,GAE9B,MAAMU,EAAwBtD,KAAKgC,MAAMgB,EAAoBJ,GAG7D7T,KAAKkQ,YAAcqE,EACnBvU,KAAKqQ,UAAYkE,EACjBvU,KAAKoQ,iBAAmBpQ,KAAKsU,0BAIzBtU,KAAKkQ,YAAc,IACnBlQ,KAAKkQ,WAAa,EAClBlQ,KAAKqQ,SAAW,EAChBrQ,KAAKoQ,iBAAoB,kBAIjCiE,iBAAiBN,EAAgBJ,EAAmB7C,GAEhD,MAAM0D,EAAwBvD,KAAKgC,MAAMc,EAAiBJ,GAS1D,GANA3T,KAAKkQ,YAAcsE,EACnBxU,KAAKqQ,UAAYmE,EACjBxU,KAAKoQ,iBAAmBpQ,KAAKsU,0BAIzBtU,KAAKkQ,YAAcY,EAInB,OAHA9Q,KAAKkQ,WAAaY,EAClB9Q,KAAKqQ,SAAW,OAChBrQ,KAAKoQ,iBAAoB,eAKjCoB,4BACI,MAAMT,EAAa/Q,KAAKgR,iBAClByD,EAAQzU,KAAKyT,gBACbiB,EAAczD,KAAKC,IAAIuD,EAAQ1D,EAAY/R,GAG3C8R,EAAY6D,EAFoB5D,EAEI2D,EAE1C,IAAIE,EAEAA,EADA5U,KAAKiJ,MACkB,EAGAgI,KAAKE,IAAInR,KAAKgD,QAAQ8K,UAAUK,QAAQnO,KAAKuF,gBAAgBuD,SAAS,IAAK,GAEtG8L,IAAwB/C,QAA8B+C,EAAsB5U,KAAKgD,QAAShD,KAAK8R,cAG/F,MAAMjB,EAAe6D,EAAc,EACnC1U,KAAKkQ,WAAalQ,KAAK2Q,wBAAwBiE,EAAsB/D,EAAcC,GACnF9Q,KAAKqQ,SAAWrQ,KAAKmT,yBAAyByB,EAAsB/D,EAAcC,GAClF9Q,KAAK0T,4BAA4B5C,GAGrCwD,0BACI,MAAMvD,EAAa/Q,KAAKgR,iBAClBoC,GAA0BrC,EAAa/Q,KAAKoR,aAAaiC,QAAU,EAEzE,MAAQ,OADQpC,KAAK+C,IAAIhU,KAAKqQ,UAAY+C,EAAyBrC,EAAa,UAIpFC,iBACI,OA5nCsB,EA4nCfhR,KAAKmQ,iBAGhBsD,gBACI,OAAOzT,KAAKgD,QAAQyL,OAASzO,KAAK8R,aAAarD,QAGvDuB,SAAUZ,UAAV,iDAvjCwGtR,MAujCGkS,KAA3GjH,GAA2GiH,IAA3G,GACAA,EAAU6E,UAxjC8F/W,MAwjCxG,MAA+FkS,EAA/F8E,mEAxjCwGhX,MAwjCxGiG,EAG0ElD,GAH1E,GAxjCwG/C,MAwjCxGiG,EAGyJgR,KAHzJ,GAxjCwGjX,MAwjCxGiG,EAGoOiR,KAHpO,eAxjCwGlX,MAwjCxGE,EAxjCwGF,WAwjCxGiL,yBAxjCwGjL,MAwjCxGE,EAxjCwGF,WAwjCxGiL,aAxjCwGjL,MAwjCxGE,EAxjCwGF,WAwjCxGiL,sCAAwP,WAAxP,oBAAyR,OAAzR,gBAAkT,OAAlT,4DAxjCwGjL,MAwjCxG,6BAA+FiL,qBAxjCSjL,CAwjCxG,0BAA+FiL,cAxjCSjL,CAwjCxG,yBAA+FiL,cAA/F,MAxjCwGjL,MAwjCxG,UAxjCwGA,CAwjCxG,sBAxjCwGA,CAwjCxG,+CAxjCwGA,CAwjCxG,4BAxjCwGA,CAwjCxG,+BAxjCwGA,CAwjCxG,sCAxjCwGA,CAwjCxG,sCAxjCwGA,CAwjCxG,4BAxjCwGA,CAwjCxG,sDAxjCwGA,MAwjCxG,iCAxjCwGA,CAwjCxG,kCAxjCwGA,CAwjCxG,iCAxjCwGA,CAwjCxG,2BAxjCwGA,CAwjCxG,oJAxjCwGA,MAwjCq6B,CACrgC,CAAEuB,QAAS4V,KAAqBC,YAAalF,GAC7C,CAAE3Q,QAAS8V,KAA6BD,YAAalF,KA1jC2ClS,OAwjCxGsX,0lCAxjCwGtX,MAwjCxGuX,IAxjCwGvX,MA2jC8zB,aA3jC9zBA,MA2jC27B,0BAAUiL,aA3jCr8BjL,MA2jCsgC,WA3jCtgCA,MA2jCwlC,mBA3jCxlCA,MA2jCssC,mBA3jCtsCA,cA2jC0+C,WA3jC1+CA,MA2jCkhD,WA3jClhDA,gBA2jC0kD,2BA3jC1kDA,MA2jCmmE,kCAAkBiL,WA3jCrnEjL,CA2jCmmE,2BAA0CiL,iBA3jC7oEjL,CA2jCmmE,2BAAwEiL,aAHnxE,aAxjCwGjL,MAwjCxG,GAxjCwGA,MA2jC41B,4CA3jC51BA,MA2jCsiC,GA3jCtiCA,MA2jCsiC,oBA3jCtiCA,MA2jC2jC,iBA3jC3jCA,MA2jCopC,GA3jCppCA,MA2jCopC,mBA3jCppCA,MA2jC6uC,GA3jC7uCA,MA2jC6uC,mBA3jC7uCA,MA2jCiwD,GA3jCjwDA,MA2jCiwD,qDA3jCjwDA,CA2jCiwD,sDA3jCjwDA,CA2jCiwD,8BA3jCjwDA,CA2jCiwD,sCA3jCjwDA,CA2jCiwD,4CA3jCjwDA,CA2jCiwD,6EA3jCjwDA,CA2jCiwD,2CAHz2DwX,cAG05KC,KAA8FA,KAAwFA,KAAoGA,KAAgFC,KAAw9BA,MAH5tNC,41EAGw2N,CAACxX,EAAoBC,mBAAoBD,EAAoBO,iBAHr6NkX,oBAzSM1F,MA8VA2F,SAAN,MAAMA,GAENA,SAAgBvG,UAAhB,0BAAiHuG,IACjHA,EAAgBC,UAhnCwF9X,MAgnCxG,MAAkH6X,IAMlHA,EAAgBE,UAtnCwF/X,MAsnCxG,WAA8I,CAACsB,IAA/I0W,SAA+LC,KAAcC,KAAeC,KAAiBC,KAAiBC,KACtPC,KACAH,KACAC,QAZFP,8DCpxCAU,EAAc,gBAEdC,MAAyBC,MAAgC,CAAEC,SAAS,IAcpEC,GAA8B,IAAIvX,MAAe,+BAMjDwX,GAA+C,CACjDrX,QAASoX,GACTnX,KAAM,CAACC,MACPC,WAPJ,YAA6CC,GACzC,MAAO,IAAMA,EAAQC,iBAAiBC,WAAW,CAAEgX,eA1B5B,OAmCrBC,GAA8B,IAAI1X,MAAe,8BAA+B,CAClF2X,WAAY,OACZC,QAGJ,cACI,MAAO,CACHC,UAAW,EACXC,UAAW,EACXC,kBAAmB,aAGrBC,SAAN,MAAMA,EACFrX,YAAYsX,EAAU7W,EAAa8W,EAAmBC,EAAmBpW,EAASqW,EAAWC,EAAgBC,EAAeC,EAAgBtW,EAAMK,EAAiBkW,GAC/J1X,KAAKmX,SAAWA,EAChBnX,KAAKM,YAAcA,EACnBN,KAAKoX,kBAAoBA,EACzBpX,KAAKqX,kBAAoBA,EACzBrX,KAAKiB,QAAUA,EACfjB,KAAKsX,UAAYA,EACjBtX,KAAKuX,eAAiBA,EACtBvX,KAAKwX,cAAgBA,EACrBxX,KAAKmB,KAAOA,EACZnB,KAAKwB,gBAAkBA,EACvBxB,KAAK2X,UAAY,QACjB3X,KAAK4X,WAAY,EACjB5X,KAAK6X,kBAAmB,EACxB7X,KAAK8X,+BAAgC,EACrC9X,KAAK+X,gBAAkB,EACvB/X,KAAKgY,gBAAkB,MACvBhY,KAAKiY,WAAajY,KAAKwB,gBAAgBuV,UACvC/W,KAAKkY,WAAalY,KAAKwB,gBAAgBwV,UAevChX,KAAKmY,cAAgB,OACrBnY,KAAKoY,SAAW,GAEhBpY,KAAKqY,kBAAoB,GAEzBrY,KAAKsY,WAAa,IAAI1X,IACtBZ,KAAKuE,gBAAkBkT,EACvBzX,KAAK0X,UAAYA,EACblW,IACIA,EAAgB+W,WAChBvY,KAAKuY,SAAW/W,EAAgB+W,UAEhC/W,EAAgB2W,gBAChBnY,KAAKmY,cAAgB3W,EAAgB2W,gBAG7ChX,EAAKiM,OAAOlK,MAAKgD,OAAUlG,KAAKsY,aAAanS,UAAU,KAC/CnG,KAAKwY,aACLxY,KAAKyY,gBAAgBzY,KAAKwY,eAKlCD,eACA,OAAOvY,KAAK2X,UAEZY,aAASxY,GAGiB,MAFtBA,IAAUC,KAAK2X,YACf3X,KAAK2X,UAAY5X,EACbC,KAAKwY,eACLxY,KAAKyY,gBAAgBzY,KAAKwY,aAC1B,eAAKE,wBAAL,SAAuBC,KAAK,GAC5B3Y,KAAKwY,YAAYtF,kBAKzBzL,eACA,OAAOzH,KAAK4X,UAEZnQ,aAAS1H,GACTC,KAAK4X,WAAYzS,QAAsBpF,GAEvCC,KAAS4X,UACL5X,KAAK4Y,KAAK,GAGV5Y,KAAK6Y,mCAIT9B,gBACA,OAAO/W,KAAKiY,WAEZlB,cAAUhX,GACVC,KAAKiY,YAAapS,QAAqB9F,GAGvCiX,gBACA,OAAOhX,KAAKkY,WAEZlB,cAAUjX,GACVC,KAAKkY,YAAarS,QAAqB9F,GACnCC,KAAK0Y,mBACL1Y,KAAK0Y,iBAAiBI,qBAAuB9Y,KAAKkY,YAItDa,cACA,OAAO/Y,KAAKoY,SAEZW,YAAQhZ,GACRC,KAAKuX,eAAeyB,kBAAkBhZ,KAAKM,YAAY8G,cAAepH,KAAKoY,SAAU,WAIrFpY,KAAKoY,SAAoB,MAATrY,EAAgBkZ,OAAOlZ,GAAOmZ,OAAS,IAClDlZ,KAAKoY,UAAYpY,KAAKmZ,oBACvBnZ,KAAK4Y,KAAK,IAGV5Y,KAAK6Y,mCACL7Y,KAAKoZ,wBACLpZ,KAAKiB,QAAQoY,kBAAkB,KAK3BtN,QAAQC,UAAUC,KAAK,KACnBjM,KAAKuX,eAAe+B,SAAStZ,KAAKM,YAAY8G,cAAepH,KAAK+Y,QAAS,gBAMvFQ,mBACA,OAAOvZ,KAAKwZ,cAEZD,iBAAaxZ,GACbC,KAAKwZ,cAAgBzZ,EACjBC,KAAK0Y,kBACL1Y,KAAKyZ,iBAAiBzZ,KAAKwZ,eAGnCE,kBAEI1Z,KAAK6X,kBAAmB,EACxB7X,KAAK6Y,mCACL7Y,KAAKwX,cACAmC,QAAQ3Z,KAAKM,aACb4C,MAAKgD,OAAUlG,KAAKsY,aACpBnS,UAAUyT,IAENA,EAGe,aAAXA,GACL5Z,KAAKiB,QAAQ4Y,IAAI,IAAM7Z,KAAK2Y,QAH5B3Y,KAAKiB,QAAQ4Y,IAAI,IAAM7Z,KAAK4Y,KAAK,MAU7C7Q,cACI,MAAMX,EAAgBpH,KAAKM,YAAY8G,cACvC0S,aAAa9Z,KAAK+Z,oBACd/Z,KAAKwY,cACLxY,KAAKwY,YAAYwB,UACjBha,KAAK0Y,iBAAmB,MAG5B1Y,KAAKqY,kBAAkB1R,QAAQ,EAAEF,EAAOwT,MACpC7S,EAAc8S,oBAAoBzT,EAAOwT,EAAU3D,MAEvDtW,KAAKqY,kBAAkB5J,OAAS,EAChCzO,KAAKsY,WAAWzT,OAChB7E,KAAKsY,WAAWtQ,WAChBhI,KAAKuX,eAAeyB,kBAAkB5R,EAAepH,KAAK+Y,QAAS,WACnE/Y,KAAKwX,cAAc2C,eAAe/S,GAGtCuR,KAAKyB,EAAQpa,KAAK+W,WACd,GAAI/W,KAAKyH,WACJzH,KAAK+Y,SACL/Y,KAAKmZ,sBACDnZ,KAAK0Y,iBAAiB2B,iBACtBra,KAAK0Y,iBAAiB4B,eAC3B,OAEJ,MAAM7I,EAAazR,KAAKua,iBACxBva,KAAKwa,UACLxa,KAAKya,QACDza,KAAKya,SAAW,IAAIC,MAAgB1a,KAAK2a,kBAAmB3a,KAAKqX,mBACrE,MAAMuD,EAAY5a,KAAK0Y,iBAAmBjH,EAAWoJ,OAAO7a,KAAKya,SAASG,SAC1EA,EAASE,gBAAkB9a,KAAKM,YAAY8G,cAC5CwT,EAAS9B,qBAAuB9Y,KAAKkY,WACrC0C,EACKG,cACA7X,MAAKgD,OAAUlG,KAAKsY,aACpBnS,UAAU,IAAMnG,KAAKwa,WAC1Bxa,KAAKyZ,iBAAiBzZ,KAAKwZ,eAC3BxZ,KAAKoZ,wBACLwB,EAASjC,KAAKyB,GAGlBxB,KAAKwB,EAAQpa,KAAKgX,WACVhX,KAAK0Y,kBACL1Y,KAAK0Y,iBAAiBE,KAAKwB,GAInCnS,SACIjI,KAAKmZ,oBAAsBnZ,KAAK4Y,OAAS5Y,KAAK2Y,OAGlDQ,oBACI,QAASnZ,KAAK0Y,kBAAoB1Y,KAAK0Y,iBAAiBsC,YAG5DT,iBAAiB,MACb,GAAIva,KAAKwY,YACL,OAAOxY,KAAKwY,YAEhB,MAAMyC,EAAsBjb,KAAKoX,kBAAkB8D,4BAA4Blb,KAAKM,aAE9E6a,EAAWnb,KAAKmX,SACjBoB,WACA6C,oBAAoBpb,KAAKM,aACzB+a,sBAAuB,IAAGrb,KAAKgY,2BAC/BsD,wBAAuB,GACvBC,mBAAmBvb,KAAK+X,iBACxByD,yBAAyBP,GAC9BE,SAASM,gBAAgBvY,MAAKgD,OAAUlG,KAAKsY,aAAanS,UAAUiH,IAChEpN,KAAK0b,4BAA4BtO,EAAOuO,gBACpC3b,KAAK0Y,kBACDtL,EAAOwO,yBAAyBC,kBAAoB7b,KAAK0Y,iBAAiBsC,aAG1Ehb,KAAKiB,QAAQ4Y,IAAI,IAAM7Z,KAAK4Y,KAAK,MAI7C5Y,KAAKwY,YAAcxY,KAAKmX,SAAS2E,OAAO,CACpCC,UAAW/b,KAAKmB,KAChB6a,iBAAkBb,EAClBc,WAAa,GAAEjc,KAAKgY,mBAAmB3B,IACvCoB,eAAgBzX,KAAKuE,oBAEzBvE,KAAKyY,gBAAgBzY,KAAKwY,aAC1BxY,KAAKwY,YACA0D,cACAhZ,MAAKgD,OAAUlG,KAAKsY,aACpBnS,UAAU,IAAMnG,KAAKwa,WAC1Bxa,KAAKwY,YACA2D,uBACAjZ,MAAKgD,OAAUlG,KAAKsY,aACpBnS,UAAU,4BAAMnG,KAAK0Y,wBAAX,aAAM1a,EAAuBoe,2BAC5Cpc,KAAKwY,YACA6D,gBACAnZ,MAAKgD,OAAUlG,KAAKsY,aACpBnS,UAAUM,IACPzG,KAAKmZ,qBAAuB1S,EAAMgD,UAAY6S,QAAWlS,QAAe3D,KACxEA,EAAM6D,iBACN7D,EAAM8V,kBACNvc,KAAKiB,QAAQ4Y,IAAI,IAAM7Z,KAAK4Y,KAAK,OAGzC,UAAI5Y,KAAKwB,uBAAT,OAAIzD,EAAsBye,6BACtBxc,KAAKwY,YAAYiE,cAAe,GAAEzc,KAAKgY,iDAEpChY,KAAKwY,YAGhBgC,UACQxa,KAAKwY,aAAexY,KAAKwY,YAAYkE,eACrC1c,KAAKwY,YAAYmE,SAErB3c,KAAK0Y,iBAAmB,KAG5BD,gBAAgBhH,GACZ,MAAM8G,EAAW9G,EAAWmL,YAAYZ,iBAClCpC,EAAS5Z,KAAK6c,aACdpd,EAAUO,KAAK8c,sBACrBvE,EAASwE,cAAc,CACnB/c,KAAKgd,WAAW,IAAKpD,EAAOqD,QAASxd,EAAQwd,OAC7Cjd,KAAKgd,WAAW,IAAKpD,EAAOsD,YAAazd,EAAQyd,aAIzDF,WAAWzE,GACP,OAAOA,EAMXsE,aACI,MAAMM,GAASnd,KAAKmB,MAA2B,OAAnBnB,KAAKmB,KAAKpB,MAChCwY,EAAWvY,KAAKuY,SACtB,IAAI6E,EACY,SAAZ7E,GAAmC,SAAZA,EACvB6E,EAAiB,CAAE7M,QAAS,SAAUC,QAAqB,SAAZ+H,EAAsB,MAAQ,UAE5D,UAAhBxP,GACY,QAAZwP,GAAsB4E,GACV,SAAZ5E,IAAwB4E,EACzBC,EAAiB,CAAE7M,QAAS,QAASC,QAAS,WAE7B,SAAZ+H,GACQ,SAAZA,GAAuB4E,GACX,QAAZ5E,IAAuB4E,KACxBC,EAAiB,CAAE7M,QAAS,MAAOC,QAAS,WAKhD,MAAQ6M,IAAGC,KAAMtd,KAAKud,gBAAgBH,EAAe7M,QAAS6M,EAAe5M,SAC7E,MAAO,CACHyM,KAAMG,EACNF,SAAU,CAAE3M,QAAS8M,EAAG7M,QAAS8M,IAIzCR,sBACI,MAAMK,GAASnd,KAAKmB,MAA2B,OAAnBnB,KAAKmB,KAAKpB,MAChCwY,EAAWvY,KAAKuY,SACtB,IAAIiF,EACY,SAAZjF,EACAiF,EAAkB,CAAE/M,SAAU,SAAUC,SAAU,UAEjC,SAAhB3H,EACDyU,EAAkB,CAAE/M,SAAU,SAAUC,SAAU,OAEjC,UAAhB3H,GACY,QAAZwP,GAAsB4E,GACV,SAAZ5E,IAAwB4E,EACzBK,EAAkB,CAAE/M,SAAU,MAAOC,SAAU,WAE9B,SAAZ6H,GACQ,SAAZA,GAAuB4E,GACX,QAAZ5E,IAAuB4E,KACxBK,EAAkB,CAAE/M,SAAU,QAASC,SAAU,WAKrD,MAAQ2M,IAAGC,KAAMtd,KAAKud,gBAAgBC,EAAgB/M,SAAU+M,EAAgB9M,UAChF,MAAO,CACHuM,KAAMO,EACNN,SAAU,CAAEzM,SAAU4M,EAAG3M,SAAU4M,IAI3ClE,wBAGQpZ,KAAK0Y,mBACL1Y,KAAK0Y,iBAAiBK,QAAU/Y,KAAK+Y,QACrC/Y,KAAK0Y,iBAAiB+E,gBACtBzd,KAAKiB,QAAQyc,iBAAiBxa,MAAKQ,OAAK,IAAIwC,OAAUlG,KAAKsY,aAAanS,UAAU,KAC1EnG,KAAK0Y,kBACL1Y,KAAKwY,YAAYtF,oBAMjCuG,iBAAiBF,GACTvZ,KAAK0Y,mBACL1Y,KAAK0Y,iBAAiBa,aAAeA,EACrCvZ,KAAK0Y,iBAAiB+E,iBAI9BF,gBAAgBF,EAAGC,GACf,MAAsB,UAAlBtd,KAAKuY,UAA0C,UAAlBvY,KAAKuY,SACxB,QAAVxP,EACIuU,EAAI,SAEO,WAANA,IACLA,EAAI,OAIE,QAAVvf,EACIsf,EAAI,QAEO,UAANA,IACLA,EAAI,OAGL,CAAEA,IAAGC,KAGhB5B,4BAA4BC,GACxB,MAAQjL,WAAUH,UAASC,WAAYmL,EACvC,IAAIgC,EAiBJ,GATQA,EALS,WAAjB5U,EAII/I,KAASmB,MAA4B,QAApBnB,KAAKmB,KAAKpB,MACG,QAAZwQ,EAAoB,OAAS,QAGjB,UAAZA,EAAsB,OAAS,QAItB,WAAbG,GAAqC,QAAZF,EAAoB,QAAU,QAErEmN,IAAgB3d,KAAK4d,iBAAkB,CACvC,MAAMnM,EAAazR,KAAKwY,YACxB,GAAI/G,EAAY,CACZ,MAAMoM,EAAe,GAAE7d,KAAKgY,mBAAmB3B,KAC/C5E,EAAWqM,iBAAiBD,EAAc7d,KAAK4d,kBAC/CnM,EAAWgL,cAAcoB,EAAcF,GAE3C3d,KAAK4d,iBAAmBD,GAIhC9E,mCAEQ7Y,KAAK4X,YACJ5X,KAAK+Y,UACL/Y,KAAK6X,kBACN7X,KAAKqY,kBAAkB5J,SAKvBzO,KAAK+d,+BACL/d,KAAKqY,kBAAkB2F,KAAK,CACxB,aACA,KACIhe,KAAKie,kCACLje,KAAK2Y,UAIe,QAAvB3Y,KAAKmY,gBACVnY,KAAKke,oCACLle,KAAKqY,kBAAkB2F,KAAK,CACxB,aACA,KAGIhe,KAAKie,kCACLnE,aAAa9Z,KAAK+Z,oBAClB/Z,KAAK+Z,mBAAqBoE,WAAW,IAAMne,KAAK2Y,OAje5C,SAqehB3Y,KAAKoe,cAAcpe,KAAKqY,oBAE5B4F,kCACI,GAAIje,KAAK8X,8BACL,OAEJ9X,KAAK8X,+BAAgC,EACrC,MAAMuG,EAAgB,GACtB,GAAIre,KAAK+d,+BACLM,EAAcL,KAAK,CACf,aACAvX,IAAS,MACL,MAAM6X,EAAY7X,EAAM8X,gBACnBD,GAAa,UAACte,KAAKwY,mBAAN,QAACzU,EAAkB2N,eAAe8M,SAASF,KACzDte,KAAK4Y,SAGd,CAAC,QAASnS,GAASzG,KAAKye,eAAehY,UAR1C,GAU4B,QAAvBzG,KAAKmY,cAAyB,CACnCnY,KAAKke,oCACL,MAAMQ,EAAmB,KACrB5E,aAAa9Z,KAAK+Z,oBAClB/Z,KAAK4Y,KAAK5Y,KAAKwB,gBAAgByV,oBAEnCoH,EAAcL,KAAK,CAAC,WAAYU,GAAmB,CAAC,cAAeA,IAEvE1e,KAAKoe,cAAcC,GACnBre,KAAKqY,kBAAkB2F,QAAQK,GAEnCD,cAAcO,GACVA,EAAUhY,QAAQ,EAAEF,EAAOwT,MACvBja,KAAKM,YAAY8G,cAAcwX,iBAAiBnY,EAAOwT,EAAU3D,MAGzEyH,+BACI,OAAQ/d,KAAKsX,UAAUuH,MAAQ7e,KAAKsX,UAAUwH,QAGlDL,eAAehY,GACX,GAAIzG,KAAKmZ,oBAAqB,CAC1B,MAAM4F,EAAsB/e,KAAK0X,UAAUsH,iBAAiBvY,EAAMwY,QAASxY,EAAMyY,SAC3E/X,EAAUnH,KAAKM,YAAY8G,cAK7B2X,IAAwB5X,IAAYA,EAAQqX,SAASO,IACrD/e,KAAK4Y,QAKjBsF,oCACI,MAAMiB,EAAWnf,KAAKmY,cACtB,GAAiB,QAAbgH,EAAoB,CACpB,MAAMhY,EAAUnH,KAAKM,YAAY8G,cAC3B1I,EAAQyI,EAAQzI,OAGL,OAAbygB,GAA2C,UAArBhY,EAAQiY,UAA6C,aAArBjY,EAAQiY,YAC9D1gB,EAAM2gB,WACF3gB,EAAM4gB,aACF5gB,EAAM6gB,iBACF7gB,EAAM8gB,cACF,SAIH,OAAbL,IAAsBhY,EAAQsY,aAC9B/gB,EAAMghB,eAAiB,QAE3BhhB,EAAMihB,YAAc,OACpBjhB,EAAMkhB,wBAA0B,gBAI5C1I,SAAgB9H,UAAhB,YAAuGtR,QACvGoZ,EAAgBvH,UADuF7R,MACvG,MAAqGoZ,EAArG2I,wUAlhBM3I,MAojBA4I,SAAN,MAAMA,UAAmB5I,GACrBrX,YAAYJ,EAASyB,EAAY6e,EAAkBC,EAAkBC,EAAQC,EAAUC,EAAeC,EAAc3I,EAAgB4I,EAAKC,EAAgB5I,GACrJjW,MAAMhC,EAASyB,EAAY6e,EAAkBC,EAAkBC,EAAQC,EAAUC,EAAeC,EAAc3I,EAAgB4I,EAAKC,EAAgB5I,GACnJ1X,KAAK2a,kBAAoB4F,IAGjCT,SAAW1Q,UAAX,0BAA4G0Q,GAzCLhiB,MAyCiCuR,MAzCjCvR,MAyCwDA,OAzCxDA,MAyCkFwR,MAzClFxR,MAyCkHA,OAzClHA,MAyCkJA,OAzClJA,MAyCwKyR,MAzCxKzR,MAyCgM0R,MAzChM1R,MAyC6N0R,MAzC7N1R,MAyCyP2Y,IAzCzP3Y,MAyCiS4R,KAAxY,GAzCuG5R,MAyC+U8Y,GAAtb,GAzCuG9Y,MAyCuY0iB,QAC9eV,EAAWnQ,UA1C4F7R,MA0CvG,MAAgGgiB,EAAhGhL,uGA1CuGhX,SAmCjGgiB,MA+BAW,SAAN,MAAMA,EACF5gB,YAAYmB,EAAoB0f,GAC5B1gB,KAAKgB,mBAAqBA,EAE1BhB,KAAK2gB,YAAc,UAEnB3gB,KAAK4gB,qBAAsB,EAE3B5gB,KAAK6gB,YAAa,EAElB7gB,KAAK8gB,QAAU,IAAIlgB,IACnBZ,KAAK+gB,oBAAwC,mBAAlBL,EAM/B/H,KAAKyB,GAEDN,aAAa9Z,KAAKsa,gBAClBta,KAAKqa,eAAiB8D,WAAW,KAC7Bne,KAAKghB,mBAAkB,GACvBhhB,KAAKqa,oBAAiB7S,GACvB4S,GAMPxB,KAAKwB,GAEDN,aAAa9Z,KAAKqa,gBAClBra,KAAKsa,eAAiB6D,WAAW,KAC7Bne,KAAKghB,mBAAkB,GACvBhhB,KAAKsa,oBAAiB9S,GACvB4S,GAGPW,cACI,OAAO/a,KAAK8gB,QAGhB9F,YACI,OAAOhb,KAAK6gB,WAEhB9Y,cACI+R,aAAa9Z,KAAKqa,gBAClBP,aAAa9Z,KAAKsa,gBAClBta,KAAK8gB,QAAQ9Y,WACbhI,KAAK8a,gBAAkB,KAO3BsB,yBACQpc,KAAK4gB,qBACL5gB,KAAK4Y,KAAK,GAQlB6E,gBACIzd,KAAKgB,mBAAmBuH,eAE5B0Y,mBAAoB1C,oBACXA,IAAkBve,KAAK8a,gBAAgB0D,SAASD,KACjDve,KAAK4Y,KAAK5Y,KAAK8Y,sBAQvBoI,WAEAC,qBAAsBC,mBACdA,IAAkBphB,KAAKqhB,gBAAkBD,IAAkBphB,KAAKshB,iBAChEthB,KAAKuhB,mBAAmBH,IAAkBphB,KAAKqhB,gBAIvDE,mBAAmBC,GACXA,EACAxhB,KAAK4gB,qBAAsB,EAErB5gB,KAAKgb,aACXhb,KAAK8gB,QAAQjc,OAIrBmc,kBAAkBhG,GAId,MAAMyG,EAAUzhB,KAAK0hB,SAASta,cACxBua,EAAY3hB,KAAKqhB,eACjBO,EAAY5hB,KAAKshB,eAMvB,GALAG,EAAQI,UAAUC,OAAO9G,EAAY4G,EAAYD,GACjDF,EAAQI,UAAUE,IAAI/G,EAAY2G,EAAYC,GAC9C5hB,KAAK6gB,WAAa7F,EAGdA,IAAchb,KAAK+gB,qBAAmD,mBAArBzP,iBAAiC,CAClF,MAAMmE,EAASnE,iBAAiBmQ,IAEsB,OAAlDhM,EAAOuM,iBAAiB,uBACsB,SAA9CvM,EAAOuM,iBAAiB,qBACxBhiB,KAAK+gB,qBAAsB,GAG/B/F,GACAhb,KAAKkhB,UAELlhB,KAAK+gB,sBACLU,EAAQI,UAAUE,IAAI,2BACtB/hB,KAAKuhB,mBAAmBvG,KAIpCyF,SAAsBrR,UAAtB,0BAAuHqR,GA/LhB3iB,MA+LuDA,OA/LvDA,MA+LwFmkB,MAA/L,KACAxB,EAAsB9Q,UAhMiF7R,MAgMvG,MAA2G2iB,IA9HrGA,MA2IAF,SAAN,MAAMA,UAAyBE,GAC3B5gB,YAAYqiB,EAAmBC,EAAqBzB,GAChDjf,MAAMygB,EAAmBxB,GACzB1gB,KAAKmiB,oBAAsBA,EAE3BniB,KAAKoiB,WAAapiB,KAAKmiB,oBAAoBE,QAAQC,cACnDtiB,KAAKqhB,eAAiB,mBACtBrhB,KAAKshB,eAAiB,oBAG9Bf,SAAiBnR,UAAjB,0BAAkHmR,GAvNXziB,MAuN6CA,OAvN7CA,MAuN8EykB,MAvN9EzkB,MAuNgHmkB,MAAvN,KACA1B,EAAiB1L,UAxNsF/W,MAwNvG,MAAsGyiB,EAAtGzL,sEAxNuGhX,KAwNvG0kB,iBAxNuG1kB,MAwNvGiG,EAxNuGjG,WAwNvGiL,+CAAgM,QAAhM0Z,2CAxNuG3kB,MAwNvG,gCAAsGiL,yBAAtG,KAxNuGjL,MAwNvG,wCAxNuGA,OAwNvG4kB,oHAxNuG5kB,MAwN0X,aAxN1XA,MAwN0a,kCAAiBiL,2BAxN3bjL,MAwNvG,WAxNuGA,MAwN8jB,GAxN9jBA,SAwNvG,WAxNuGA,MAwNggB,+BAxNhgBA,MAwNggB,mCAxNhgBA,MAwN+d,0BAxN/dA,MAwN8jB,GAxN9jBA,MAwN8jBiL,aAArqBuM,cAAoiDC,KAAyFA,MAA7nDE,i2BAXM8K,MA0CAoC,SAAN,MAAMA,GAENA,SAAiBvT,UAAjB,0BAAkHuT,IAClHA,EAAiB/M,UA1PsF9X,MA0PvG,MAAmH6kB,IACnHA,EAAiB9M,UA3PsF/X,MA2PvG,WAAgJ,CAAC4Y,IAAjJZ,SAA0M8M,KAAY7M,KAAcC,KAAeE,KAAiBA,KAAiBC,QAJ/QwM,gCC9xBkG7kB,MAmR+gC,mBAnR/gCA,MAmR+nC,GAnR/nCA,wCAmRslC,WAnRtlCA,MAmR+nC,GAnR/nCA,MAmR+nC,6CAnR/nCA,cAmR4e,sBAnR5eA,CAmR4e,mBAnR5eA,MAmR+8B,8BAnR/8BA,MAmR+8BC,WAnR/8BD,MAmR+8B,UAnR/8BA,MAmRm+BE,8BAnRn+BF,MAmR+gC,0BAnR/gCA,yCAmR6jB,oCAnR7jBA,CAmR6jB,iBAnR7jBA,MAmRktB,GAnRltBA,MAmRktB,mBAnRltBA,CAmRktB,sBAnRltBA,CAmRktB,2CAnRltBA,CAmRktB,+DAnRltBA,CAmRktB,wCAnRltBA,MAmRujC,GAnRvjCA,MAmRujC,kEAnRvjCA,MAmRouC,YAnRpuCA,MAmRm1C,GAnRn1CA,qCAmRm1C,GAnRn1CA,MAmRm1CC,uCAnRn1CD,MAmR2T,WAnR3TA,CAmR2T,YAnR3TA,MAmRyb,GAnRzbA,cAmR4e,8BAnR5eA,MAmRouC,mBAnRpuCA,oCAmRyb,GAnRzbA,MAmRyb,mCAnRzbA,MAmRsgB,GAnRtgBA,MAmRsgB,6CAnRtgBA,MAmRoyC,GAnRpyCA,MAmRoyC,gFAnRpyCA,cAmR2iD,eAnR3iDA,MAmR0pD,mBAnR1pDA,MAmR0pDC,WAnR1pDD,QAmR0pD,OAnR1pDA,MAmRoqDiG,iBAnRpqDjG,cAmRqgE,WAnRrgEA,MAmR6lE,aAnR7lEA,wCAmR2vD,oCAnR3vDA,CAmR2vD,kDAnR3vDA,CAmR2vD,6BAnR3vDA,CAmR2vD,yCAnR3vDA,MAmRisD,uEAnRjsDA,8BAmR+5G,eAnR/5GA,MAmR6gH,mBAnR7gHA,MAmR6gHC,WAnR7gHD,QAmR6gH,OAnR7gHA,MAmRuhHiG,gBAnRvhHjG,cAmR62H,WAnR72HA,MAmRq8H,aAnRr8HA,wCAmR4mH,mCAnR5mHA,CAmR4mH,8CAnR5mHA,CAmR4mH,6BAnR5mHA,CAmR4mH,qCAnR5mHA,MAmRmjH,yCAjTrpH+kB,QAAN,MAAMA,EACFhjB,cAKIG,KAAKiD,QAAU,IAAIrC,IAEnBZ,KAAK8iB,kBAAoB,kBAEzB9iB,KAAK+iB,cAAgB,YAErB/iB,KAAKgjB,kBAAoB,gBAEzBhjB,KAAKijB,eAAiB,aAEtBjjB,KAAKkjB,cAAgB,YAErBljB,KAAKmjB,cAAgB,CAACC,EAAMC,EAAU5U,KAClC,GAAc,GAAVA,GAA2B,GAAZ4U,EACf,MAAQ,QAAO5U,IAGnB,MAAM6U,EAAaF,EAAOC,EAG1B,MAAQ,GAAEC,EAAa,YADNA,GAHjB7U,EAASwC,KAAKE,IAAI1C,EAAQ,IAGawC,KAAKC,IAAIoS,EAAaD,EAAU5U,GAAU6U,EAAaD,QACjD5U,MAIzDoU,SAAiBzT,UAAjB,0BAAkHyT,IAClHA,EAAiBU,WADuFzlB,MACxG,OAAsH+kB,EAAtH/L,QAAsH+L,EAAtH,qBAAoJ,SA/B9IA,MAyCN,MAAMW,GAA8B,CAEhCnkB,QAASwjB,EACTvjB,KAAM,CAAC,CAAC,IAAImkB,MAAY,IAAIC,MAAYb,IACxCrjB,WARJ,YAA6CmkB,GACzC,OAAOA,GAAc,IAAId,IA0BvBe,GAAgC,IAAI1kB,MAAe,iCAGnD2kB,MAAyBzjB,SAAc0jB,MAAiB,cAMxDC,SAAN,MAAMA,UAA0BF,GAC5BhkB,YAAYmkB,EAAOhjB,EAAoBijB,GAcnC,GAbAxiB,QACAzB,KAAKgkB,MAAQA,EACbhkB,KAAKgB,mBAAqBA,EAC1BhB,KAAKkkB,WAAa,EAClBlkB,KAAKmkB,QAAU,EACfnkB,KAAKokB,iBAAmB,GACxBpkB,KAAKqkB,eAAgB,EACrBrkB,KAAKskB,uBAAwB,EAE7BtkB,KAAKukB,aAAe,GAEpBvkB,KAAKojB,KAAO,IAAIxf,MAChB5D,KAAKwkB,aAAeR,EAAM/gB,QAAQkD,UAAU,IAAMnG,KAAKgB,mBAAmBuH,gBACtE0b,EAAU,CACV,MAAQZ,WAAUoB,kBAAiBC,eAAcC,wBAAyBV,EAC1D,MAAZZ,IACArjB,KAAK4kB,UAAYvB,GAEE,MAAnBoB,IACAzkB,KAAKokB,iBAAmBK,GAER,MAAhBC,IACA1kB,KAAKqkB,cAAgBK,GAEG,MAAxBC,IACA3kB,KAAKskB,sBAAwBK,IAKrCE,gBACA,OAAO7kB,KAAKkkB,WAEZW,cAAU9kB,GACVC,KAAKkkB,WAAajT,KAAKE,KAAItL,QAAqB9F,GAAQ,GACxDC,KAAKgB,mBAAmBuH,eAGxBkG,aACA,OAAOzO,KAAKmkB,QAEZ1V,WAAO1O,GACPC,KAAKmkB,SAAUte,QAAqB9F,GACpCC,KAAKgB,mBAAmBuH,eAGxB8a,eACA,OAAOrjB,KAAK4kB,UAEZvB,aAAStjB,GACTC,KAAK4kB,UAAY3T,KAAKE,KAAItL,QAAqB9F,GAAQ,GACvDC,KAAK8kB,kCAGLL,sBACA,OAAOzkB,KAAKokB,iBAEZK,oBAAgB1kB,GAChBC,KAAKokB,kBAAoBrkB,GAAS,IAAIuD,IAAIyhB,IAAKlf,QAAqBkf,IACpE/kB,KAAK8kB,kCAGLJ,mBACA,OAAO1kB,KAAKqkB,cAEZK,iBAAa3kB,GACbC,KAAKqkB,eAAgBlf,QAAsBpF,GAG3C4kB,2BACA,OAAO3kB,KAAKskB,sBAEZK,yBAAqB5kB,GACrBC,KAAKskB,uBAAwBnf,QAAsBpF,GAEvDgG,WACI/F,KAAKglB,cAAe,EACpBhlB,KAAK8kB,kCACL9kB,KAAKilB,mBAETld,cACI/H,KAAKwkB,aAAaU,cAGtBC,WACI,IAAKnlB,KAAKolB,cACN,OAEJ,MAAMC,EAAoBrlB,KAAK6kB,UAC/B7kB,KAAK6kB,UAAY7kB,KAAK6kB,UAAY,EAClC7kB,KAAKslB,eAAeD,GAGxBE,eACI,IAAKvlB,KAAKwlB,kBACN,OAEJ,MAAMH,EAAoBrlB,KAAK6kB,UAC/B7kB,KAAK6kB,UAAY7kB,KAAK6kB,UAAY,EAClC7kB,KAAKslB,eAAeD,GAGxBI,YAEI,IAAKzlB,KAAKwlB,kBACN,OAEJ,MAAMH,EAAoBrlB,KAAK6kB,UAC/B7kB,KAAK6kB,UAAY,EACjB7kB,KAAKslB,eAAeD,GAGxBK,WAEI,IAAK1lB,KAAKolB,cACN,OAEJ,MAAMC,EAAoBrlB,KAAK6kB,UAC/B7kB,KAAK6kB,UAAY7kB,KAAK2lB,mBAAqB,EAC3C3lB,KAAKslB,eAAeD,GAGxBG,kBACI,OAAOxlB,KAAK6kB,WAAa,GAAsB,GAAjB7kB,KAAKqjB,SAGvC+B,cACI,MAAMQ,EAAe5lB,KAAK2lB,mBAAqB,EAC/C,OAAO3lB,KAAK6kB,UAAYe,GAAiC,GAAjB5lB,KAAKqjB,SAGjDsC,mBACI,OAAK3lB,KAAKqjB,SAGHpS,KAAK4U,KAAK7lB,KAAKyO,OAASzO,KAAKqjB,UAFzB,EAYfyC,gBAAgBzC,GAGZ,MACMgC,EAAoBrlB,KAAK6kB,UAC/B7kB,KAAK6kB,UAAY5T,KAAKsC,MAFHvT,KAAK6kB,UAAY7kB,KAAKqjB,SAEAA,IAAa,EACtDrjB,KAAKqjB,SAAWA,EAChBrjB,KAAKslB,eAAeD,GAGxBU,uBACI,OAAO/lB,KAAKyH,WAAazH,KAAKolB,cAGlCY,2BACI,OAAOhmB,KAAKyH,WAAazH,KAAKwlB,kBAMlCV,mCACS9kB,KAAKglB,eAILhlB,KAAKqjB,WACNrjB,KAAK4kB,UAC8B,GAA/B5kB,KAAKykB,gBAAgBhW,OAAczO,KAAKykB,gBAAgB,GAhM9C,IAkMlBzkB,KAAKimB,0BAA4BjmB,KAAKykB,gBAAgByB,SACQ,IAA1DlmB,KAAKimB,0BAA0B9X,QAAQnO,KAAKqjB,WAC5CrjB,KAAKimB,0BAA0BjI,KAAKhe,KAAKqjB,UAG7CrjB,KAAKimB,0BAA0BlY,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAClDjO,KAAKgB,mBAAmBuH,gBAG5B+c,eAAeD,GACXrlB,KAAKojB,KAAK9U,KAAK,CACX+W,oBACAR,UAAW7kB,KAAK6kB,UAChBxB,SAAUrjB,KAAKqjB,SACf5U,OAAQzO,KAAKyO,UAIzBsV,SAAkB3U,UAAlB,YA9OwGtR,QA+OxGimB,EAAkBpU,UA/OsF7R,MA+OxG,MAAuGimB,EAAvGlE,uPA/OwG/hB,SA2ClGimB,MA+NAoC,SAAN,MAAMA,UAAqBpC,GACvBlkB,YAAYumB,EAAMlE,EAAmB+B,GACjCxiB,MAAM2kB,EAAMlE,EAAmB+B,GAC3BA,GAA4C,MAAhCA,EAASoC,sBACrBrmB,KAAKsmB,qBAAuBrC,EAASoC,sBAIjDF,SAAa/W,UAAb,0BAA8G+W,GAlRNroB,MAkRoC+kB,GAlRpC/kB,MAkRiEA,OAlRjEA,MAkRkG8lB,GAA1M,KACAuC,EAAatR,UAnR2F/W,MAmRxG,MAAkGqoB,EAAlGrR,gDAA2M,QAA3M,oFAnRwGhX,OAmRxG4kB,w2DAnRwG5kB,MAmR6N,UAnR7NA,CAmR6N,WAnR7NA,MAmR2T,kBAnR3TA,MAmRy3C,UAnRz3CA,CAmRy3C,WAnRz3CA,MAmR+9C,GAnR/9CA,cAmR2iD,qBAnR3iDA,MAmR8sE,cAnR9sEA,MAmRg0E,0BAAUiL,mBAnR10EjL,cAmRsoF,WAnRtoFA,MAmR8tF,YAnR9tFA,wBAmRk0F,eAnRl0FA,MAmRg7F,0BAAUiL,eAnR17FjL,cAmRkuG,YAnRluGA,MAmR0zG,cAnR1zGA,gBAmR+5G,uBAnR/5GA,aAmRxG,MAnRwGA,MAmRmW,GAnRnWA,MAmRmW,wBAnRnWA,MAmR+9C,GAnR/9CA,MAmR+9C,gEAnR/9CA,MAmR69D,GAnR79DA,MAmR69D,+BAnR79DA,MAmRu6E,GAnRv6EA,MAmRu6E,uCAnRv6EA,CAmRu6E,kDAnRv6EA,CAmRu6E,6BAnRv6EA,CAmRu6E,yCAnRv6EA,MAmR02E,wCAnR12EA,MAmR+gG,GAnR/gGA,MAmR+gG,mCAnR/gGA,CAmR+gG,8CAnR/gGA,CAmR+gG,6BAnR/gGA,CAmR+gG,qCAnR/gGA,MAmRs9F,oCAnRt9FA,MAmRq0H,GAnRr0HA,MAmRq0H,iCAA76HwX,cAAgmKhG,KAA6HA,KAAoGC,KAA4TC,KAAwLE,GAA+I6S,KAA4FhN,IAAhiME,+5BATM0Q,MA8BAI,SAAN,MAAMA,GAENA,SAAmBnX,UAAnB,0BAAoHmX,IACpHA,EAAmB3Q,UA3SqF9X,MA2SxG,MAAqHyoB,IACrHA,EAAmB1Q,UA5SqF/X,MA4SxG,WAAoJ,CAAC0lB,IAArJ1N,SAA6LC,KAAcyQ,KAAiB7Q,GAAiBgN,GAAkBzM,QAJzPqQ,sDCtVN,MAAME,GAAmBC,MAAqB,oBACxCC,GAAc,CAAC,OAAQ,cAAe,aAGrC,IAAMC,GAAb,MAAM,MAAOA,EAKT/mB,YAAoBgnB,eAHZ7mB,+BAA4B,IAAI8mB,KAAgB,GACxD9mB,8BAA2BA,KAAK+mB,0BAA0BC,eAGtDhnB,KAAKinB,aAAejnB,KAAKknB,kBAG7BC,8BAA8B/D,GAC1BpjB,KAAK+mB,0BAA0BliB,KAAKue,GAGhC8D,kBAEJ,MAAME,EAAmBpnB,KAAK6mB,KAAKQ,IAAoCZ,IACjEa,EAAyBtnB,KAAKunB,yBAC/BrkB,MACGE,OAAUokB,GACCxnB,KAAK6mB,KAAKQ,IAAW,6EAA6EG,KACpGtkB,MACGI,OAAImkB,GACaA,EAAaC,OAAO,CAACC,EAAMC,KAC7B,IACAD,GACFC,EAAQC,OAAQ,CACbC,KAAMF,EAAQC,MACdE,WAAYH,EAAQI,WACpBrV,MAAO,eAGhB,QAwD3B,OAhDqBsV,QAAc,CAACb,EAAkBE,IACjDpkB,MAEGI,OAAI,EAAE4kB,EAAUT,MACZ,MAAMU,EAAgD,GAGtDC,cAAOC,KAAKH,GAAUvhB,QAAQ2hB,IAC1B,MAAMC,EAAcL,EAASI,GACvB3V,EAAQ4V,EAAY5V,MACpB6V,EAAeL,EAAWxV,GAC5B6V,EACAA,EAAaxK,KAAKuK,GAElBJ,EAAWxV,GAAS,CAAC4V,KAK7BH,OAAOC,KAAKZ,GAAc9gB,QAAQ2hB,IAC9B,MAAMC,EAAcd,EAAaa,GAC3B3V,EAAQ4V,EAAY5V,MACpB6V,EAAeL,EAAWxV,GAC5B6V,EACAA,EAAaxK,KAAKuK,GAElBJ,EAAWxV,GAAS,CAAC4V,KAItBJ,KAIX7kB,OAAImlB,GACOL,OAAOC,KAAKI,GACdnlB,IAAIglB,IACD,MAAMI,EAAQ/B,GAAYxY,QAAQma,GAClC,MAAO,CACHR,KAAMQ,EACNI,OAAiB,IAAVA,EAAe/B,GAAYlY,OAASia,EAC3CzB,aAAcwB,EAAKH,GAAKva,KAAK4a,OAGpC5a,KAAK6a,oDAnFjBhC,GAAkB9oB,yCAAlB8oB,EAAkB9P,QAAlB8P,EAAkB,YAAlBA,GAAb,GA2FA,YAA6BxS,EAAgByU,GACzC,OAAOzU,EAAE0T,KAAKgB,cAAgBD,EAAEf,KAAKgB,cAAgB,GAAI,EAG7D,YAAuB1U,EAAqByU,GACxC,OAAOzU,EAAEsU,QAAUG,EAAEH,MACftU,EAAE0T,KAAOe,EAAEf,KACP,GACA,EACJ1T,EAAEsU,MAAQG,EAAEH,MACR,GACA,wCCtGM5qB,eACIA,sBACJA,mCACAA,eACkEA,iCAASirB,sBACvEjrB,kBACJA,8BAFIA,0FAGJA,eAC8CA,iCAASirB,sBACnDjrB,mBACJA,8BAFIA,+EAOhBA,kBAAgDA,yDAASA,8BACrDA,cAAIA,SAAeA,QACnBA,gBAA2BA,SAAcA,kCADrCA,8BACuBA,sEAKhC,IAAMkrB,GAAb,MAAM,MAAOA,EAhCbnpB,cAkCQG,gBAAY,EAYhBA,eAAY,cACZA,iBAAc0mB,MAAqB,eANtBuC,SAAKC,GACdlpB,KAAKmpB,WAAY,EACjBnpB,KAAKopB,OAASC,KAAKC,MAAMJ,GAMzBK,eACA,OAAIvpB,KAAKopB,OAAOrB,WACL/nB,KAAKopB,OAAOrB,WAGhB/nB,KAAKwpB,aAAaxpB,KAAKopB,OAAOK,SAAWzpB,KAAK0pB,WAGzDC,SAASP,IACAppB,KAAKmpB,YAGVC,EAAOQ,WAAaR,EAAOQ,yDA7BtBZ,8BAAoBlU,8nBA7B7BhX,iBAA0E,WAE9CA,gCAAS+rB,uBAC7B/rB,cAAIA,SAAeA,QAEnBA,iBAAgF,WAExEA,sBAGAA,sBAIAA,sBAIJA,YAIRA,wBAIJA,eA1BKA,gDAGOA,8BAE2BA,yDAEnBA,oCAGAA,wCAIAA,wCAQQA,uFAOnBkrB,GAAb,4CC1BIlrB,eAGGA,qEAASA,0BAAmBA,SAAQA,8CAFpCA,2CAE4BA,4DAG/BA,eAAgD,qBAO5CA,0DAAQA,+BAA8B,uBACxCA,mCANEA,6BAAc,0CAAdA,CAAc,eAAdA,CAAc,0CAShBA,kCAAmEA,sDAZvEA,qBACEA,wBAUAA,iBACEA,oCACFA,gCAZMA,0DAWgCA,wDAInC,IAAMgsB,GAAb,MAAM,MAAOA,EAOTjqB,YACYkqB,EACAC,GADAhqB,0BACAA,uBAJZA,cAAW,IAAIY,IAMfmF,WACI/F,KAAK+pB,mBAAmB9C,aACnB/jB,MAAKgD,OAAUlG,KAAKiqB,WACpB9jB,UAAU+jB,IACP,MAAMC,EAAYnqB,KAAKgqB,gBAAgBI,SAASzX,OAAY,GAC5D3S,KAAKqqB,OAASH,EACdlqB,KAAKsqB,WAAaJ,EAAK5mB,IAAIinB,GAAKA,EAAEzC,MAClC9nB,KAAKwqB,YAAYL,KAGzBnqB,KAAKyqB,iBAAmBzqB,KAAK+pB,mBAAmBxC,yBAAyBrkB,MACrEI,OAAI8f,GAAQA,EAAO,IAI3Brb,cACI/H,KAAKiqB,SAASplB,OAGlB2lB,YAAY1C,GACRA,EAAOA,EAAK4C,cACZ1qB,KAAK2qB,cAAgB3qB,KAAKqqB,OAAOzd,KAAK2d,GAAKA,EAAEzC,KAAK4C,gBAAkB5C,IAAS9nB,KAAKqqB,OAAO,GACzFrqB,KAAKgqB,gBAAgBY,UAAU,GAAI,CAAEjY,MAAO3S,KAAK2qB,cAAc7C,OAGnE+C,WAAWzH,GACPpjB,KAAK+pB,mBAAmB5C,8BAA8B/D,iDArCjD0G,GAAwBhsB,gDAAxBgsB,EAAwBhV,4dAtBnChX,iBACEA,sBAIFA,QACAA,mCALsBA,uCAKZA,+FAgBCgsB,GAAb,GCnBagB,GAAb,MAAM,MAAOA,EALbjrB,cAMIG,4BAAoCgpB,iDAD3B8B,4DAJC/U,QAID+U,GAAb,GASaC,GAAb,MAAM,MAAOA,EALblrB,cAMIG,4BAAoC8pB,iDAD3BiB,6DAFE,CAACnE,IAAmB9Q,SAFrBC,KAAcwQ,GAAoBuE,MAInCC,GAAb","names":["i0","t","n","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","overlay","scrollStrategies","reposition","MatSelectChange","constructor","source","value","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","Subject","MAT_SELECT_TRIGGER","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","super","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","N","disableOptionCentering","ariaLabel","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","next","required","_required","control","hasValidator","Validators","coerceBooleanProperty","multiple","compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","hasAssigned","_assignValue","coerceNumberProperty","_id","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","userAriaDescribedBy","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","i","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵdir","viewQuery","ht","pt","CdkConnectedOverlay","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","_countGroupLabelsBeforeOption","optionGroups","scrollTop","_getOptionScrollPosition","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","_getItemCount","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","totalPanelHeight","_adjustPanelUp","l","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","ɵcmp","selectors","MatOption","MAT_OPTGROUP","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","ft","dependencies","i7","i8","styles","changeDetection","MatSelectModule","ɵmod","ɵinj","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","PANEL_CLASS","passiveListenerOptions","normalizePassiveListenerOptions","passive","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","_overlay","_scrollDispatcher","_viewContainerRef","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_destroyed","position","_overlayRef","_updatePosition","_tooltipInstance","show","hide","_setupPointerEnterEventsIfNeeded","_mouseLeaveHideDelay","message","removeDescription","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","origin","run","clearTimeout","_touchstartTimeout","dispose","listener","removeEventListener","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","_createOverlay","_detach","_portal","ComponentPortal","_tooltipComponent","instance","attach","_triggerElement","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","ESCAPE","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","main","fallback","isLtr","originPosition","x","y","_invertPosition","overlayPosition","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","inputs","MatTooltip","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","DOCUMENT","_TooltipComponentBase","animationMode","_visibility","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_toggleVisibility","_handleMouseLeave","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","_finalizeAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getPropertyValue","ANIMATION_MODULE_TYPE","changeDetectorRef","_breakpointObserver","_isHandset","observe","Breakpoints","i6","At","hostVars","decls","MatTooltipModule","A11yModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","startIndex","ɵprov","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","mixinInitialized","_MatPaginatorBase","_intl","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","selectConfig","_intlChanges","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","pageIndex","_updateDisplayedPageSizeOptions","p","_initialized","_markInitialized","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","MatPaginator","intl","formFieldAppearance","_formFieldAppearance","MatPaginatorModule","MatButtonModule","contributorsPath","CONTENT_URL_PREFIX","knownGroups","ContributorService","http","BehaviorSubject","_currentContributorsPage$","asObservable","contributors","getContributors","updateContributorsCurrentPage","coreContributors","get","commmunityContributors","currentContributorsPage$","currentPage","commContribs","reduce","prev","current","login","name","pictureUrl","avatar_url","combineLatest","contribs","contribMap","Object","keys","key","contributor","contribGroup","cmap","order","compareContributors","compareGroups","r","toUpperCase","$event","ContributorComponent","json","contributorInfo","clickable","person","JSON","parse","bioImage","pictureBase","picture","noPicture","flipCard","isFlipped","ctx","ContributorListComponent","contributorService","locationService","destroy$","grps","groupName","search","groups","groupNames","g","selectGroup","contributorPage$","toLowerCase","selectedGroup","setSearch","changePage","ContributorModule","ContributorListModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2020/select.mjs","./node_modules/@angular/material/fesm2020/tooltip.mjs","./node_modules/@angular/material/fesm2020/paginator.mjs","./src/app/custom-elements/contributor/contributor.service.ts","./src/app/custom-elements/contributor/contributor.component.ts","./src/app/custom-elements/contributor/contributor-list.component.ts","./src/app/custom-elements/contributor/contributor-list.module.ts"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n","import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled ||\n            !this.message ||\n            (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId &&\n                !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined }, { type: i5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i2.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i3.Platform }, { token: i4.AriaDescriber }, { token: i4.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            this.hide(this._mouseLeaveHideDelay);\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n        this._showAnimation = 'mat-tooltip-show';\n        this._hideAnimation = 'mat-tooltip-hide';\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i6.BreakpointObserver }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"pipe\", type: i7.AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i6.BreakpointObserver }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 }),\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport * as i6 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatPaginatorIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatPaginatorBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", selectConfig: \"selectConfig\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], selectConfig: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        if (defaults && defaults.formFieldAppearance != null) {\n            this._formFieldAppearance = defaults.formFieldAppearance;\n        }\n    }\n}\nMatPaginator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPaginator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: i5.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i6.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"directive\", type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\"] }]\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule], exports: [MatPaginator] });\nMatPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Core', 'Contributor', 'Community'];\n\n@Injectable()\nexport class ContributorService {\n    contributors: Observable<ContributorGroup[]>;\n    private _currentContributorsPage$ = new BehaviorSubject(1);\n    currentContributorsPage$ = this._currentContributorsPage$.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.contributors = this.getContributors();\n    }\n\n    updateContributorsCurrentPage(page: number) {\n        this._currentContributorsPage$.next(page);\n    }\n\n    private getContributors() {\n        // combine both contributors.json and github api into one list\n        const coreContributors = this.http.get<{ [key: string]: Contributor }>(contributorsPath);\n        const commmunityContributors = this.currentContributorsPage$\n            .pipe(\n                switchMap(currentPage => {\n                    return this.http.get<any[]>(`https://api.github.com/repos/ngrx/platform/contributors?per_page=100&page=${currentPage}`)\n                        .pipe(\n                            map(commContribs => {\n                                const data = commContribs.reduce((prev, current) => {\n                                    return {\n                                        ...prev,\n                                        [current.login]: {\n                                            name: current.login,\n                                            pictureUrl: current.avatar_url,\n                                            group: 'Community'\n                                        }\n                                    };\n                                }, {});\n\n                                return data;\n                            })\n                        );\n                })\n            );\n\n        const contributors = combineLatest([coreContributors, commmunityContributors])\n            .pipe(\n                // Create group map\n                map(([contribs, commContribs]) => {\n                    const contribMap: { [name: string]: Contributor[] } = {};\n\n                    // adds core/contributors\n                    Object.keys(contribs).forEach(key => {\n                        const contributor = contribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    // adds community\n                    Object.keys(commContribs).forEach(key => {\n                        const contributor = commContribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    return contribMap;\n                }),\n\n                // Flatten group map into sorted group array of sorted contributors\n                map(cmap => {\n                    return Object.keys(cmap)\n                        .map(key => {\n                            const order = knownGroups.indexOf(key);\n                            return {\n                                name: key,\n                                order: order === -1 ? knownGroups.length : order,\n                                contributors: cmap[key].sort(compareContributors),\n                            } as ContributorGroup;\n                        })\n                        .sort(compareGroups);\n                })\n            );\n\n        return contributors;\n    }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n    return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n    return l.order === r.order\n        ? l.name > r.name\n            ? 1\n            : -1\n        : l.order > r.order\n            ? 1\n            : -1;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n    selector: 'aio-contributor',\n    template: `\n    <div [ngClass]=\"{ 'flipped': person.isFlipped }\" class=\"contributor-card\">\n\n        <div class=\"card-front\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n\n            <div class=\"contributor-image\" [style.background-image]=\"'url('+ bioImage +')'\">\n                <div class=\"contributor-info\">\n                    <a *ngIf=\"person.bio\" mat-button>\n                        View Bio\n                    </a>\n                    <a *ngIf=\"person.twitter\" mat-button class=\"icon\"\n                        href=\"https://twitter.com/{{person.twitter}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-twitter fa-2x\"></span>\n                    </a>\n                    <a *ngIf=\"person.website\" mat-button class=\"icon\"\n                        href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-link fa-2x\"></span>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-back\" *ngIf=\"person.isFlipped\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n            <p class=\"contributor-bio\">{{person.bio}}</p>\n        </div>\n    </div>\n  `\n})\nexport class ContributorComponent {\n    @HostBinding('class.clickable')\n        clickable = true;\n\n    @Input()\n        person: Contributor;\n\n    // Allows to pass contributor data as a json string.\n    // Useful for web element version of this component.\n    @Input() set json(contributorInfo: string) {\n        this.clickable = false;\n        this.person = JSON.parse(contributorInfo);\n    }\n\n    noPicture = '_no-one.jpg';\n    pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n\n    get bioImage() {\n        if (this.person.pictureUrl) {\n            return this.person.pictureUrl;\n        }\n\n        return this.pictureBase+(this.person.picture || this.noPicture);\n    }\n\n    flipCard(person: Contributor) {\n        if (!this.clickable) {\n            return;\n        }\n        person.isFlipped = !person.isFlipped;\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\nimport { Observable, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'aio-contributor-list',\n    template: `\n  <div class=\"flex-center group-buttons\">\n    <a *ngFor=\"let name of groupNames\"\n       [class.selected]=\"name === selectedGroup.name\"\n       class=\"button mat-button filter-button\"\n       (click)=\"selectGroup(name)\">{{name}}</a>\n  </div>\n  <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n    <div *ngIf=\"selectedGroup.name === 'Community'\">\n      <mat-paginator\n        [length]=\"350\"\n        [pageIndex]=\"contributorPage$ | async\"\n        [pageSize]=\"100\"\n        [hidePageSize]=\"true\"\n        aria-label=\"Select page\"\n        (page)=\"changePage($event.pageIndex + 1)\">\n      </mat-paginator>\n    </div>\n    <div class=\"contributor-group\">\n      <aio-contributor *ngFor=\"let person of selectedGroup.contributors\" [person]=\"person\"></aio-contributor>\n    </div>\n  </section>`\n})\nexport class ContributorListComponent implements OnInit, OnDestroy {\n    private groups: ContributorGroup[];\n    groupNames: string[];\n    selectedGroup: ContributorGroup;\n    contributorPage$: Observable<number>;\n    destroy$ = new Subject<void>();\n\n    constructor(\n        private contributorService: ContributorService,\n        private locationService: LocationService) { }\n\n    ngOnInit() {\n        this.contributorService.contributors\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(grps => {\n                const groupName = this.locationService.search()['group'] || '';\n                this.groups = grps;\n                this.groupNames = grps.map(g => g.name);\n                this.selectGroup(groupName);\n            });\n\n        this.contributorPage$ = this.contributorService.currentContributorsPage$.pipe(\n            map(page => page - 1)\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n    }\n\n    selectGroup(name: string) {\n        name = name.toLowerCase();\n        this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n        this.locationService.setSearch('', { group: this.selectedGroup.name });\n    }\n\n    changePage(page: number) {\n        this.contributorService.updateContributorsCurrentPage(page);\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ContributorComponent],\n    declarations: [ ContributorComponent],\n})\nexport class ContributorModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorComponent;\n}\n\n@NgModule({\n    imports: [CommonModule, MatPaginatorModule, ContributorModule],\n    declarations: [ContributorListComponent],\n    providers: [ContributorService],\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorListComponent;\n}\n\n"]}