{"version":3,"mappings":"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","names":["eventsPath","CONTENT_URL_PREFIX","EventService","http","this","now","Date","currentDate","UTC","getFullYear","getMonth","getDate","events$","getEvents","upcomingEvents$","pipe","map","events","filter","event","endDate","u","pastEvents$","get","eventResponses","Object","eventResponse","startDate","undefined","publishLast","connect","n","i0","factory","EventOrderByPipe","orderBy","sort","eventOne","eventTwo","pure","EventDateRangePipe","getTime","getYear","getDay","getDateString","date","getUTCDate","months","getUTCMonth","getUTCFullYear","EventListComponent","eventService","selectors","EventListModule","imports","CommonModule"],"sources":["./src/app/custom-elements/events/event.service.ts","./src/app/custom-elements/events/event-order-by.pipe.ts","./src/app/custom-elements/events/event-date-range.pipe.ts","./src/app/custom-elements/events/event-list.component.ts","./src/app/custom-elements/events/event-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { publishLast, map } from 'rxjs/operators';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { EventResponse, Event } from './event.model';\n\nconst eventsPath = CONTENT_URL_PREFIX + 'events.json';\n\n@Injectable()\nexport class EventService {\n    currentDate: Date;\n    private events$: Observable<Event[]>;\n    upcomingEvents$: Observable<Event[]>;\n    pastEvents$: Observable<Event[]>;\n\n    constructor(private http: HttpClient) {\n        const now = new Date();\n        // Compare soley on UTC date, without factoring in time.\n        this.currentDate = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));\n        this.events$ = this.getEvents();\n        this.upcomingEvents$ = this.events$.pipe(\n            map(events =>\n                events.filter(event => event.endDate >= this.currentDate)\n            )\n        );\n        this.pastEvents$ = this.events$.pipe(\n            map(events =>\n                events.filter(event => event.endDate < this.currentDate)\n            )\n        );\n    }\n\n    /**\n   * Fetch Event JSON from file and return an Observable that emits an Event array.\n   */\n    private getEvents(): Observable<Event[]> {\n        const events = this.http.get<EventResponse[]>(eventsPath).pipe(\n            map(eventResponses =>\n                eventResponses.map(eventResponse => {\n                    const event: Event = {\n                        ...eventResponse,\n                        startDate: eventResponse.startDate ? new Date(eventResponse.startDate) : undefined,\n                        endDate: new Date(eventResponse.endDate)\n                    };\n                    return event;\n                })\n            ),\n            publishLast(),\n        );\n\n        (events as ConnectableObservable<Event[]>).connect();\n        return events;\n    };\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Event } from './event.model';\n\ntype EventOrderBy = 'ascending' | 'descending';\n\n/**\n * Transforms the events to sorted ascending or descending order by date.\n * If an event has a startDate, order based on it.  If not, use it's endDate.\n */\n@Pipe({name: 'eventOrderBy'})\nexport class EventOrderByPipe implements PipeTransform {\n    transform(events: Event[] | null, orderBy: EventOrderBy): Event[] {\n        if (events === null) {\n            return [];\n        }\n        switch (orderBy) {\n            case 'ascending': {\n                return events.sort((eventOne, eventTwo) => +(eventOne.startDate || eventOne.endDate) - +(eventTwo.startDate || eventTwo.endDate));\n            }\n            case 'descending': {\n                return events.sort((eventOne, eventTwo) => +(eventTwo.startDate || eventTwo.endDate) - +(eventOne.startDate || eventOne.endDate));\n            }\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Event } from './event.model';\n\n/**\n * Transforms the startDate and endDate for a given event into a dange range string.\n * undefined until '01-01-2019' -> 'January 1, 2019'\n * '01-01-2019' until '01-01-2019' -> 'January 1, 2019'\n * '01-01-2019' until '01-02-2019' -> 'January 1 - 2, 2019'\n * '01-28-2019' until '02-01-2019' -> 'January 28 - February 1, 2019'\n * '12-31-2018' until '01-01-2019' -> 'December 31, 2018 - January 1, 2019'\n */\n@Pipe({name: 'eventDateRange'})\nexport class EventDateRangePipe implements PipeTransform {\n    transform(event: Event): string {\n        const startDate = event.startDate;\n        const endDate = event.endDate;\n        if (!startDate || startDate.getTime() === endDate.getTime()) {\n            return getDateString(endDate);\n        } else {\n            if (getMonth(startDate) === getMonth(endDate) && getYear(startDate) === getYear(endDate)) {\n                return getMonth(startDate)\n          + ' ' + getDay(startDate) + ' - ' + getDay(endDate)\n          + ', ' + getYear(startDate);\n            } else if (getYear(startDate) === getYear(endDate)) {\n                return getMonth(startDate)\n          + ' ' + getDay(startDate)\n          + ' - ' + getMonth(endDate)\n          + ' ' + getDay(endDate)\n          + ', ' + getYear(startDate);\n            } else {\n                return getDateString(startDate)\n          + ' - ' + getDateString(endDate);\n            }\n        }\n    }\n}\n\nconst getDay = (date: Date) => date.getUTCDate();\nconst getMonth = (date: Date) => months[date.getUTCMonth()];\nconst getYear = (date: Date) => date.getUTCFullYear();\nconst getDateString = (date: Date) => getMonth(date) + ' ' + getDay(date) + ', ' + getYear(date);\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\n","import { Component } from '@angular/core';\nimport { Event } from './event.model';\nimport { EventService } from './event.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'aio-event-list',\n    template: `\n    <p>Upcoming Events presenting about NgRx:</p>\n    <table class=\"is-full-width\">\n      <thead>\n        <tr>\n          <th>Event</th>\n          <th>Location</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let upcomingEvent of upcomingEvents$ | async | eventOrderBy:'ascending'\">\n          <th><a [href]=\"upcomingEvent.url\" [title]=\"upcomingEvent.name\">{{upcomingEvent.name}}</a></th>\n          <td>{{upcomingEvent.location}}</td>\n          <td>{{upcomingEvent | eventDateRange}}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>Past Events:</p>\n    <table class=\"is-full-width\">\n      <thead>\n        <tr>\n          <th>Event</th>\n          <th>Location</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let pastEvent of pastEvents$ | async | eventOrderBy:'descending'\">\n          <th><a [href]=\"pastEvent.url\" [title]=\"pastEvent.name\">{{pastEvent.name}}</a></th>\n          <td>{{pastEvent.location}}</td>\n          <td>{{pastEvent | eventDateRange}}</td>\n        </tr>\n      </tbody>\n    </table>\n`\n})\nexport class EventListComponent {\n    upcomingEvents$: Observable<Event[]> = this.eventService.upcomingEvents$;\n    pastEvents$: Observable<Event[]> = this.eventService.pastEvents$;\n\n    constructor(private eventService: EventService) { }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { EventListComponent } from './event-list.component';\nimport { EventService } from './event.service';\nimport { EventDateRangePipe } from './event-date-range.pipe';\nimport { EventOrderByPipe } from './event-order-by.pipe';\n\n@NgModule({\n    imports: [ CommonModule ],\n    declarations: [ EventListComponent, EventDateRangePipe, EventOrderByPipe ],\n    entryComponents: [ EventListComponent ],\n    providers: [ EventService ]\n})\nexport class EventListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = EventListComponent;\n}\n"],"sourceRoot":"webpack:///","file":"src_app_custom-elements_events_event-list_module_ts.87fbd3e081bc43bd.js"}