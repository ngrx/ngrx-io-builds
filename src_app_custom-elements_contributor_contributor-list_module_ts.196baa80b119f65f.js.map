{"version":3,"file":"src_app_custom-elements_contributor_contributor-list_module_ts.196baa80b119f65f.js","mappings":"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","names":["_c0","_c1","_MatSelect_Conditional_4_Template","rf","ctx","i0","ctx_r2","placeholder","_MatSelect_Conditional_5_Conditional_1_Template","_MatSelect_Conditional_5_Conditional_2_Template","ctx_r6","triggerValue","_MatSelect_Conditional_5_Template","ctx_r3","customTrigger","_MatSelect_ng_template_10_Template","_r9","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","ctx_r10","_handleKeydown","ctx_r4","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","inject","Overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","this","MatSelect","_MatSelect","_scrollOptionIntoView","index","option","options","toArray","panel","nativeElement","labelCount","_countGroupLabelsBeforeOption","optionGroups","element","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","focused","_focused","_panelOpen","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","stateChanges","required","_required","ngControl","control","hasValidator","Validators","_multiple","compareWith","_compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","_onChange","errorStateMatcher","_errorStateTracker","matcher","_id","_uid","errorState","_viewportRuler","_changeDetectorRef","_ngZone","defaultErrorStateMatcher","_elementRef","_dir","parentForm","parentFormGroup","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_positions","originX","originY","overlayX","overlayY","o1","o2","_triggerAriaLabelledBy","_destroy","Subject","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","controlType","disabled","disableRipple","disableOptionCentering","panelWidth","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","_trackedModal","_skipPredicate","panelOpen","valueAccessor","typeaheadDebounceInterval","_ErrorStateTracker","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","change","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","detectChanges","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","_previousControl","undefined","updateErrorState","ngOnChanges","userAriaDescribedBy","withTypeAhead","ngOnDestroy","destroy","complete","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","preferredOrigin","CdkOverlayOrigin","elementRef","getBoundingClientRect","width","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","firstEnabledOptionIndex","length","get","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","t","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵcmp","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","first","viewQuery","CdkConnectedOverlay","hostAttrs","hostVars","hostBindings","toString","inputs","None","HasDecoratorInputTransform","booleanAttribute","numberAttribute","outputs","exportAs","standalone","features","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r0","dependencies","NgClass","styles","encapsulation","data","animation","changeDetection","MatSelectModule","_MatSelectModule","ɵmod","ɵinj","providers","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","MAT_TOOLTIP_SCROLL_STRATEGY","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","PANEL_CLASS","passiveListenerOptions","normalizePassiveListenerOptions","passive","MatTooltip","_MatTooltip","position","_position","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","positionAtOrigin","_positionAtOrigin","coerceBooleanProperty","_detach","_disabled","hide","_setupPointerEnterEventsIfNeeded","_showDelay","coerceNumberProperty","_hideDelay","_mouseLeaveHideDelay","message","_message","_ariaDescriber","removeDescription","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","describe","tooltipClass","_tooltipClass","_setTooltipClass","_overlay","_scrollDispatcher","_viewContainerRef","_platform","_focusMonitor","scrollStrategy","_document","_viewInitialized","_pointerExitEventsInitialized","_tooltipComponent","TooltipComponent","_viewportMargin","_cssClassPrefix","touchGestures","_passiveListeners","_destroyed","ngAfterViewInit","monitor","origin","run","clearTimeout","_touchstartTimeout","dispose","listener","removeEventListener","stopMonitoring","delay","_cancelPendingAnimations","overlayRef","_createOverlay","_portal","ComponentPortal","instance","attach","_triggerElement","afterHidden","isVisible","existingStrategy","getConfig","positionStrategy","_origin","ElementRef","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","ESCAPE","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","_getOrigin","_getOverlayPosition","withPositions","_addOffset","main","fallback","isLtr","offsetY","offsetX","originPosition","x","y","_invertPosition","overlayPosition","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","point","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","DOCUMENT","ɵdir","_TooltipComponent","animationMode","_isMultiline","_closeOnInteraction","_isVisible","_onHide","_showAnimation","_hideAnimation","_animationsDisabled","_hideTimeoutId","_showTimeoutId","_toggleVisibility","_handleMouseLeave","_finalizeAnimation","_onShow","_isTooltipMultiline","rect","height","_handleAnimationEnd","animationName","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","getPropertyValue","ANIMATION_MODULE_TYPE","MatTooltipModule","_MatTooltipModule","A11yModule","_MatPaginator_Conditional_2_Conditional_3_For_3_Template","pageSizeOption_r6","$implicit","_MatPaginator_Conditional_2_Conditional_3_Template","_r12","ctx_r11","_changePageSize","_formFieldAppearance","pageSize","_pageSizeLabelId","selectConfig","_displayedPageSizeOptions","_MatPaginator_Conditional_2_Conditional_4_Template","_MatPaginator_Conditional_2_Template","ctx_r0","_intl","itemsPerPageLabel","_MatPaginator_Conditional_6_Template","_r14","ctx_r13","firstPage","ctx_r1","firstPageLabel","_previousButtonsDisabled","_MatPaginator_Conditional_13_Template","_r16","ctx_r15","lastPage","lastPageLabel","_nextButtonsDisabled","MatPaginatorIntl","_MatPaginatorIntl","nextPageLabel","previousPageLabel","getRangeLabel","page","startIndex","Math","max","min","ɵprov","token","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","mixinInitialized","MatPaginator","_MatPaginator","pageIndex","_pageIndex","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_pageSizeOptions","p","defaults","super","hidePageSize","showFirstLastButtons","_intlChanges","formFieldAppearance","_initialized","_markInitialized","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","getNumberOfPages","maxPageIndex","ceil","floor","slice","MatFormField","MatIconButton","MatPaginatorModule","_MatPaginatorModule","MatButtonModule","contributorsPath","CONTENT_URL_PREFIX","knownGroups","ContributorService","_ContributorService","http","_currentContributorsPage$","BehaviorSubject","currentContributorsPage$","asObservable","contributors","getContributors","updateContributorsCurrentPage","coreContributors","commmunityContributors","currentPage","commContribs","reduce","prev","current","login","name","pictureUrl","avatar_url","group","combineLatest","contribs","contribMap","Object","keys","key","contributor","contribGroup","cmap","order","compareContributors","compareGroups","l","r","toUpperCase","person","twitter","website","_r7","flipCard","bio","ContributorComponent","_ContributorComponent","clickable","noPicture","pictureBase","json","contributorInfo","JSON","parse","bioImage","picture","isFlipped","ContributorComponent_a_6_Template","ContributorComponent_a_7_Template","ContributorComponent_a_8_Template","ContributorComponent_div_9_Template","name_r2","_r4","selectGroup","selectedGroup","_r8","ctx_r7","changePage","ctx_r5","contributorPage$","ContributorListComponent_section_2_div_1_Template","ContributorListComponent_section_2_aio_contributor_3_Template","ContributorListComponent","_ContributorListComponent","contributorService","locationService","destroy$","grps","groupName","search","groups","groupNames","g","toLowerCase","setSearch","ContributorListComponent_a_1_Template","ContributorListComponent_section_2_Template","ContributorModule","_ContributorModule","customElementComponent","ContributorListModule","_ContributorListModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/select.mjs","./node_modules/@angular/material/fesm2022/tooltip.mjs","./node_modules/@angular/material/fesm2022/paginator.mjs","./src/app/custom-elements/contributor/contributor.service.ts","./src/app/custom-elements/contributor/contributor.component.ts","./src/app/custom-elements/contributor/contributor-list.component.ts","./src/app/custom-elements/contributor/contributor-list.module.ts"],"sourcesContent":["import { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { NgClass, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Self, Attribute, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, defaultErrorStateMatcher, _elementRef, _dir, parentForm, parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Whether the select is disabled. */\n        this.disabled = false;\n        /** Whether ripples in the select are disabled. */\n        this.disableRipple = false;\n        /** Tab index of the select. */\n        this.tabIndex = 0;\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        this._multiple = false;\n        /** Whether to center the active option over the trigger. */\n        this.disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelect, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], standalone: true, imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"] }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                    standalone: true,\n                }]\n        }] });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatSelect,\n            MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n","import { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, Directive, Inject, Optional, Input, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { DOCUMENT, NgClass, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n    },\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Whether tooltip should be relative to the click or touch origin\n     * instead of outside the element bounding box.\n     */\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._tooltipComponent = TooltipComponent;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat-mdc';\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            this._showDelay = _defaultOptions.showDelay;\n            this._hideDelay = _defaultOptions.hideDelay;\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatTooltip, isStandalone: true, selector: \"[matTooltip]\", inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, host: { properties: { \"class.mat-mdc-tooltip-disabled\": \"disabled\" }, classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                        '[class.mat-mdc-tooltip-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i4.Directionality }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _elementRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Name of the show animation and the class that toggles it. */\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        /** Name of the hide animation and the class that toggles it. */\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: TooltipComponent, isStandalone: true, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:break-all;word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip--showing-transition .mdc-tooltip__surface-animation{transition:opacity 150ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-tooltip--hide-transition .mdc-tooltip__surface-animation{transition:opacity 75ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - 2*8px);margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - 2*8px);align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mat-mdc-tooltip .mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color)}.mat-mdc-tooltip .mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__caret-surface-top,.mat-mdc-tooltip .mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color)}.mat-mdc-tooltip .mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font);line-height:var(--mdc-plain-tooltip-supporting-text-line-height);font-size:var(--mdc-plain-tooltip-supporting-text-size);font-weight:var(--mdc-plain-tooltip-supporting-text-weight);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, standalone: true, imports: [NgClass], template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:break-all;word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip--showing-transition .mdc-tooltip__surface-animation{transition:opacity 150ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-tooltip--hide-transition .mdc-tooltip__surface-animation{transition:opacity 75ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - 2*8px);margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - 2*8px);align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mat-mdc-tooltip .mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color)}.mat-mdc-tooltip .mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__caret-surface-top,.mat-mdc-tooltip .mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color)}.mat-mdc-tooltip .mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font);line-height:var(--mdc-plain-tooltip-supporting-text-line-height);font-size:var(--mdc-plain-tooltip-supporting-text-size);font-weight:var(--mdc-plain-tooltip-supporting-text-weight);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\nclass MatTooltipModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTooltipModule, imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, numberAttribute, EventEmitter, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatIconButton, MatButtonModule } from '@angular/material/button';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport { MatTooltip, MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormField } from '@angular/material/form-field';\nimport { mixinInitialized, MatOption } from '@angular/material/core';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinInitialized(class {\n});\nlet nextUniqueId = 0;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorMixinBase {\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(value || 0, 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = value || 0;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(value || 0, 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => numberAttribute(p, 0));\n        this._updateDisplayedPageSizeOptions();\n    }\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ID for the DOM node containing the paginator's items per page label. */\n        this._pageSizeLabelId = `mat-paginator-page-size-label-${nextUniqueId++}`;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        /** Whether to hide the page size selection UI from the user. */\n        this.hidePageSize = false;\n        /** Whether to show the first/last buttons UI to the user. */\n        this.showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Whether the paginator is disabled. */\n        this.disabled = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this.hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this.showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n        this._formFieldAppearance = defaults?.formFieldAppearance || 'outline';\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatPaginator, isStandalone: true, selector: \"mat-paginator\", inputs: { color: \"color\", pageIndex: [\"pageIndex\", \"pageIndex\", numberAttribute], length: [\"length\", \"length\", numberAttribute], pageSize: [\"pageSize\", \"pageSize\", numberAttribute], pageSizeOptions: \"pageSizeOptions\", hidePageSize: [\"hidePageSize\", \"hidePageSize\", booleanAttribute], showFirstLastButtons: [\"showFirstLastButtons\", \"showFirstLastButtons\", booleanAttribute], selectConfig: \"selectConfig\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { page: \"page\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-mdc-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    @if (!hidePageSize) {\\n      <div class=\\\"mat-mdc-paginator-page-size\\\">\\n        <div class=\\\"mat-mdc-paginator-page-size-label\\\" [attr.id]=\\\"_pageSizeLabelId\\\">\\n          {{_intl.itemsPerPageLabel}}\\n        </div>\\n\\n        @if (_displayedPageSizeOptions.length > 1) {\\n          <mat-form-field\\n            [appearance]=\\\"_formFieldAppearance!\\\"\\n            [color]=\\\"color\\\"\\n            class=\\\"mat-mdc-paginator-page-size-select\\\">\\n            <mat-select\\n              [value]=\\\"pageSize\\\"\\n              [disabled]=\\\"disabled\\\"\\n              [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n              [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n              [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n              (selectionChange)=\\\"_changePageSize($event.value)\\\"\\n              hideSingleSelectionIndicator>\\n              @for (pageSizeOption of _displayedPageSizeOptions; track pageSizeOption) {\\n                <mat-option [value]=\\\"pageSizeOption\\\">\\n                  {{pageSizeOption}}\\n                </mat-option>\\n              }\\n            </mat-select>\\n          </mat-form-field>\\n        }\\n\\n        @if (_displayedPageSizeOptions.length <= 1) {\\n          <div class=\\\"mat-mdc-paginator-page-size-value\\\">{{pageSize}}</div>\\n        }\\n      </div>\\n    }\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-first\\\"\\n                (click)=\\\"firstPage()\\\"\\n                [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_previousButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-last\\\"\\n                (click)=\\\"lastPage()\\\"\\n                [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_nextButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-paginator-container-text-color);background-color:var(--mat-paginator-container-background-color);font-family:var(--mat-paginator-container-text-font);line-height:var(--mat-paginator-container-text-line-height);font-size:var(--mat-paginator-container-text-size);font-weight:var(--mat-paginator-container-text-weight);letter-spacing:var(--mat-paginator-container-text-tracking);--mat-form-field-container-height:var(--mat-paginator-form-field-container-height);--mat-form-field-container-vertical-padding:var(--mat-paginator-form-field-container-vertical-padding)}.mat-mdc-paginator .mat-mdc-select-value{font-size:var(--mat-paginator-select-trigger-text-size)}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap;width:100%;min-height:var(--mat-paginator-container-size)}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px;fill:var(--mat-paginator-enabled-icon-color)}.mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon{fill:var(--mat-paginator-disabled-icon-color)}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"], dependencies: [{ kind: \"component\", type: MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: MatSelect, selector: \"mat-select\", inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\"], outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: MatOption, selector: \"mat-option\", inputs: [\"value\", \"id\", \"disabled\"], outputs: [\"onSelectionChange\"], exportAs: [\"matOption\"] }, { kind: \"component\", type: MatIconButton, selector: \"button[mat-icon-button]\", exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', host: {\n                        'class': 'mat-mdc-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [MatFormField, MatSelect, MatOption, MatIconButton, MatTooltip], template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    @if (!hidePageSize) {\\n      <div class=\\\"mat-mdc-paginator-page-size\\\">\\n        <div class=\\\"mat-mdc-paginator-page-size-label\\\" [attr.id]=\\\"_pageSizeLabelId\\\">\\n          {{_intl.itemsPerPageLabel}}\\n        </div>\\n\\n        @if (_displayedPageSizeOptions.length > 1) {\\n          <mat-form-field\\n            [appearance]=\\\"_formFieldAppearance!\\\"\\n            [color]=\\\"color\\\"\\n            class=\\\"mat-mdc-paginator-page-size-select\\\">\\n            <mat-select\\n              [value]=\\\"pageSize\\\"\\n              [disabled]=\\\"disabled\\\"\\n              [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n              [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n              [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n              (selectionChange)=\\\"_changePageSize($event.value)\\\"\\n              hideSingleSelectionIndicator>\\n              @for (pageSizeOption of _displayedPageSizeOptions; track pageSizeOption) {\\n                <mat-option [value]=\\\"pageSizeOption\\\">\\n                  {{pageSizeOption}}\\n                </mat-option>\\n              }\\n            </mat-select>\\n          </mat-form-field>\\n        }\\n\\n        @if (_displayedPageSizeOptions.length <= 1) {\\n          <div class=\\\"mat-mdc-paginator-page-size-value\\\">{{pageSize}}</div>\\n        }\\n      </div>\\n    }\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-first\\\"\\n                (click)=\\\"firstPage()\\\"\\n                [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_previousButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-last\\\"\\n                (click)=\\\"lastPage()\\\"\\n                [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_nextButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-paginator-container-text-color);background-color:var(--mat-paginator-container-background-color);font-family:var(--mat-paginator-container-text-font);line-height:var(--mat-paginator-container-text-line-height);font-size:var(--mat-paginator-container-text-size);font-weight:var(--mat-paginator-container-text-weight);letter-spacing:var(--mat-paginator-container-text-tracking);--mat-form-field-container-height:var(--mat-paginator-form-field-container-height);--mat-form-field-container-vertical-padding:var(--mat-paginator-form-field-container-vertical-padding)}.mat-mdc-paginator .mat-mdc-select-value{font-size:var(--mat-paginator-select-trigger-text-size)}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap;width:100%;min-height:var(--mat-paginator-container-size)}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px;fill:var(--mat-paginator-enabled-icon-color)}.mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon{fill:var(--mat-paginator-disabled-icon-color)}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"] }]\n        }], ctorParameters: () => [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], length: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], pageSize: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], showFirstLastButtons: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], selectConfig: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], page: [{\n                type: Output\n            }] } });\n\nclass MatPaginatorModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorModule, imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator], exports: [MatPaginator] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator],\n                    exports: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent };\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Core', 'Contributor', 'Alumni', 'Community'];\n\n@Injectable()\nexport class ContributorService {\n    contributors: Observable<ContributorGroup[]>;\n    private _currentContributorsPage$ = new BehaviorSubject(1);\n    currentContributorsPage$ = this._currentContributorsPage$.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.contributors = this.getContributors();\n    }\n\n    updateContributorsCurrentPage(page: number) {\n        this._currentContributorsPage$.next(page);\n    }\n\n    private getContributors() {\n        // combine both contributors.json and github api into one list\n        const coreContributors = this.http.get<{ [key: string]: Contributor }>(contributorsPath);\n        const commmunityContributors = this.currentContributorsPage$\n            .pipe(\n                switchMap(currentPage => {\n                    return this.http.get<any[]>(`https://api.github.com/repos/ngrx/platform/contributors?per_page=100&page=${currentPage}`)\n                        .pipe(\n                            map(commContribs => {\n                                const data = commContribs.reduce((prev, current) => {\n                                    return {\n                                        ...prev,\n                                        [current.login]: {\n                                            name: current.login,\n                                            pictureUrl: current.avatar_url,\n                                            group: 'Community'\n                                        }\n                                    };\n                                }, {});\n\n                                return data;\n                            })\n                        );\n                })\n            );\n\n        const contributors = combineLatest([coreContributors, commmunityContributors])\n            .pipe(\n                // Create group map\n                map(([contribs, commContribs]) => {\n                    const contribMap: { [name: string]: Contributor[] } = {};\n\n                    // adds core/contributors\n                    Object.keys(contribs).forEach(key => {\n                        const contributor = contribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    // adds community\n                    Object.keys(commContribs).forEach(key => {\n                        const contributor = commContribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    return contribMap;\n                }),\n\n                // Flatten group map into sorted group array of sorted contributors\n                map(cmap => {\n                    return Object.keys(cmap)\n                        .map(key => {\n                            const order = knownGroups.indexOf(key);\n                            return {\n                                name: key,\n                                order: order === -1 ? knownGroups.length : order,\n                                contributors: cmap[key].sort(compareContributors),\n                            } as ContributorGroup;\n                        })\n                        .sort(compareGroups);\n                })\n            );\n\n        return contributors;\n    }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n    return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n    return l.order === r.order\n        ? l.name > r.name\n            ? 1\n            : -1\n        : l.order > r.order\n            ? 1\n            : -1;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n    selector: 'aio-contributor',\n    template: `\n    <div [ngClass]=\"{ 'flipped': person.isFlipped }\" class=\"contributor-card\">\n\n        <div class=\"card-front\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n\n            <div class=\"contributor-image\" [style.background-image]=\"'url('+ bioImage +')'\">\n                <div class=\"contributor-info\">\n                    <a *ngIf=\"person.bio\" mat-button>\n                        View Bio\n                    </a>\n                    <a *ngIf=\"person.twitter\" mat-button class=\"icon\"\n                        href=\"https://twitter.com/{{person.twitter}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-twitter fa-2x\"></span>\n                    </a>\n                    <a *ngIf=\"person.website\" mat-button class=\"icon\"\n                        href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-link fa-2x\"></span>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-back\" *ngIf=\"person.isFlipped\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n            <p class=\"contributor-bio\">{{person.bio}}</p>\n        </div>\n    </div>\n  `\n})\nexport class ContributorComponent {\n    @HostBinding('class.clickable')\n        clickable = true;\n\n    @Input()\n        person: Contributor;\n\n    // Allows to pass contributor data as a json string.\n    // Useful for web element version of this component.\n    @Input() set json(contributorInfo: string) {\n        this.clickable = false;\n        this.person = JSON.parse(contributorInfo);\n    }\n\n    noPicture = '_no-one.jpg';\n    pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n\n    get bioImage() {\n        if (this.person.pictureUrl) {\n            return this.person.pictureUrl;\n        }\n\n        return this.pictureBase+(this.person.picture || this.noPicture);\n    }\n\n    flipCard(person: Contributor) {\n        if (!this.clickable) {\n            return;\n        }\n        person.isFlipped = !person.isFlipped;\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\nimport { Observable, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'aio-contributor-list',\n    template: `\n  <div class=\"flex-center group-buttons\">\n    <a *ngFor=\"let name of groupNames\"\n       [class.selected]=\"name === selectedGroup.name\"\n       class=\"button mat-button filter-button\"\n       (click)=\"selectGroup(name)\">{{name}}</a>\n  </div>\n  <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n    <div *ngIf=\"selectedGroup.name === 'Community'\">\n      <mat-paginator\n        [length]=\"350\"\n        [pageIndex]=\"contributorPage$ | async\"\n        [pageSize]=\"100\"\n        [hidePageSize]=\"true\"\n        aria-label=\"Select page\"\n        (page)=\"changePage($event.pageIndex + 1)\">\n      </mat-paginator>\n    </div>\n    <div class=\"contributor-group\">\n      <aio-contributor *ngFor=\"let person of selectedGroup.contributors\" [person]=\"person\"></aio-contributor>\n    </div>\n  </section>`\n})\nexport class ContributorListComponent implements OnInit, OnDestroy {\n    private groups: ContributorGroup[];\n    groupNames: string[];\n    selectedGroup: ContributorGroup;\n    contributorPage$: Observable<number>;\n    destroy$ = new Subject<void>();\n\n    constructor(\n        private contributorService: ContributorService,\n        private locationService: LocationService) { }\n\n    ngOnInit() {\n        this.contributorService.contributors\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(grps => {\n                const groupName = this.locationService.search()['group'] || '';\n                this.groups = grps;\n                this.groupNames = grps.map(g => g.name);\n                this.selectGroup(groupName);\n            });\n\n        this.contributorPage$ = this.contributorService.currentContributorsPage$.pipe(\n            map(page => page - 1)\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n    }\n\n    selectGroup(name: string) {\n        name = name.toLowerCase();\n        this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n        this.locationService.setSearch('', { group: this.selectedGroup.name });\n    }\n\n    changePage(page: number) {\n        this.contributorService.updateContributorsCurrentPage(page);\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ContributorComponent],\n    declarations: [ ContributorComponent],\n})\nexport class ContributorModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorComponent;\n}\n\n@NgModule({\n    imports: [CommonModule, MatPaginatorModule, ContributorModule],\n    declarations: [ContributorListComponent],\n    providers: [ContributorService],\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorListComponent;\n}\n\n"],"x_google_ignoreList":[0,1,2]}