{"version":3,"sources":["./src/app/shared/copier.service.ts","./node_modules/@angular/cdk/__ivy_ngcc__/fesm5/portal.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm5/overlay.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm5/layout.js","./node_modules/rxjs/_esm5/internal/operators/skip.js","./node_modules/@angular/material/__ivy_ngcc__/fesm5/snack-bar.js","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts"],"names":["createFake","text","docElem","document","documentElement","isRTL","getAttribute","this","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","length","removeFake","removeChild","copyText","execCommand","err","throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","ComponentPortal","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","TemplatePortal","template","context","templateRef","elementRef","undefined","DomPortal","element","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","replaceChild","componentRef","componentFactory","resolveComponentFactory","createComponent","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","CdkPortal","ɵfac","t","ɵdir","type","selectors","exportAs","features","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","nodeType","ELEMENT_NODE","inputs","outputs","PortalHostDirective","apply","arguments","ɵPortalHostDirective_BaseFactory","provide","useExisting","PortalModule","ɵmod","ɵinj","factory","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","left","_isEnabled","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","config","block","reposition","ɵprov","providedIn","e_1","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","configKeys_1","configKeys_1_1","next","done","key","e_1_1","error","return","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","_isAttached","addEventListener","push","splice","removeEventListener","isTestEnvironment","__karma__","jasmine","OverlayContainer","_platform","container","_containerElement","getContainerElement","_createContainer","isBrowser","oppositePlatformContainers","querySelectorAll","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","Observable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","takeUntil","merge","children","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","change","e_2","_b","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_c","_d","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","flexibleFits_1","flexibleFits_1_1","fit","score","weight","e_2_1","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","positions","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","_i","reduce","currentValue","currentOverflow","axis","pair","HTMLElement","destination","source","hasOwnProperty","mediaQueryStyleNode","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","OverlayModule","providers","imports","SkipOperator","total","subscriber","SkipSubscriber","count","_next","Subscriber","mediaQueriesForWebkitCompatibility","Set","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","head","sheet","insertRule","e","console","createEmptyStyleRule","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","isMatched","splitQueries","mediaQuery","_registerQuery","mql","observe","observables","observable","stateObservable","combineLatest","concat","lift","debounceTime","breakpointStates","response","breakpoints","state","output","handler","startWith","nextMql","queries","split","a1","a2","SimpleSnackBar_div_2_Template","rf","ctx","_r13","$event","action","ctx_r11","data","MatSnackBarContainer_ng_template_0_Template","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","ɵcmp","hostAttrs","decls","vars","consts","message","hasAction","directives","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_assertNotAttached","_applySnackBarClasses","_role","onAnimationEnd","toState","fromState","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","Array","isArray","viewQuery","_t","first","hostVars","hostBindings","animation","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","open","_attachSnackBarContainer","WeakMap","containerPortal","containerRef","instance","content","userConfig","_createOverlay","$implicit","_createInjector","contentRef","_animateSnackBar","announce","isLeft","isRight","snackbar","pretty","copier","logger","ariaLabel","codeFormatted","_code","code","formatDisplayedCode","showMissingCodeMessage","_header","header","ngOnChanges","indent","lines","leftAlignedCode","Number","MAX_VALUE","line","lineIndent","search","substr","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","c","src","path","region","formattedCode","codeContainer","innerHTML","textContent","doCopy","log","linenums","parseInt","isNaN","match","CodeComponent","CodeModule","prettyPrintOne","getPrettyPrintOne","ppo","Promise","resolve","then","msg","PrettyPrinter"],"mappings":"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","file":"default~code-code-example-module~code-code-tabs-module.62aa433957727376b30a.js","sourcesContent":["/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\nexport class CopierService {\n  private fakeElem: HTMLTextAreaElement | null;\n\n  /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n  createFake(text: string) {\n    const docElem = document.documentElement!;\n    const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n    // Create a fake element to hold the contents to copy\n    this.fakeElem = document.createElement('textarea');\n\n    // Prevent zooming on iOS\n    this.fakeElem.style.fontSize = '12pt';\n\n    // Reset box model\n    this.fakeElem.style.border = '0';\n    this.fakeElem.style.padding = '0';\n    this.fakeElem.style.margin = '0';\n\n    // Move element out of screen horizontally\n    this.fakeElem.style.position = 'absolute';\n    this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n    // Move element to the same position vertically\n    const yPosition = window.pageYOffset || docElem.scrollTop;\n    this.fakeElem.style.top = yPosition + 'px';\n\n    this.fakeElem.setAttribute('readonly', '');\n    this.fakeElem.value = text;\n\n    document.body.appendChild(this.fakeElem);\n\n    this.fakeElem.select();\n    this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n  }\n\n  removeFake() {\n    if (this.fakeElem) {\n      document.body.removeChild(this.fakeElem);\n      this.fakeElem = null;\n    }\n  }\n\n  copyText(text: string) {\n    try {\n      this.createFake(text);\n      return document.execCommand('copy');\n    } catch (err) {\n      return false;\n    } finally {\n      this.removeFake();\n    }\n  }\n}\n","import { __extends } from 'tslib';\nimport { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nvar Portal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    Portal.prototype.attach = function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    };\n    /** Detach this portal from its host */\n    Portal.prototype.detach = function () {\n        var host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    Portal.prototype.setAttachedHost = function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nvar ComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nvar TemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    TemplatePortal.prototype.attach = function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    TemplatePortal.prototype.detach = function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nvar DomPortal = /** @class */ (function (_super) {\n    __extends(DomPortal, _super);\n    function DomPortal(element) {\n        var _this = _super.call(this) || this;\n        _this.element = element instanceof ElementRef ? element.nativeElement : element;\n        return _this;\n    }\n    return DomPortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nvar BasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    BasePortalOutlet.prototype.hasAttached = function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    BasePortalOutlet.prototype.attach = function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    BasePortalOutlet.prototype.detach = function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    BasePortalOutlet.prototype.dispose = function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    BasePortalOutlet.prototype.setDisposeFn = function (fn) {\n        this._disposeFn = fn;\n    };\n    BasePortalOutlet.prototype._invokeDisposeFn = function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nvar BasePortalHost = /** @class */ (function (_super) {\n    __extends(BasePortalHost, _super);\n    function BasePortalHost() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BasePortalHost;\n}(BasePortalOutlet));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar DomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        _this.attachDomPortal = function (portal) {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!_this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            var element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            var anchorNode = _this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            _this.outletElement.appendChild(element);\n            _super.prototype.setDisposeFn.call(_this, function () {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        _this._document = _document;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = function (portal) {\n        var _this = this;\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        var componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        var viewContainer = portal.viewContainerRef;\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    DomPortalOutlet.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /** Gets the root HTMLElement for an instantiated component. */\n    DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nvar DomPortalHost = /** @class */ (function (_super) {\n    __extends(DomPortalHost, _super);\n    function DomPortalHost() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DomPortalHost;\n}(DomPortalOutlet));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ]; };\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nvar TemplatePortalDirective = /** @class */ (function (_super) {\n    __extends(TemplatePortalDirective, _super);\n    function TemplatePortalDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n    return TemplatePortalDirective;\n}(CdkPortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        _this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        _this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        _this.attachDomPortal = function (portal) {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!_this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            var element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            var anchorNode = _this._document.createComment('dom-portal');\n            portal.setAttachedHost(_this);\n            element.parentNode.insertBefore(anchorNode, element);\n            _this._getRootNode().appendChild(element);\n            _super.prototype.setDisposeFn.call(_this, function () {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        _this._document = _document;\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: function () {\n            return this._attachedPortal;\n        },\n        set: function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkPortalOutlet.prototype.ngOnInit = function () {\n        this._isInitialized = true;\n    };\n    CdkPortalOutlet.prototype.ngOnDestroy = function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    /** Gets the root node of the portal outlet. */\n    CdkPortalOutlet.prototype._getRootNode = function () {\n        var nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : nativeElement.parentNode);\n    };\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nvar PortalHostDirective = /** @class */ (function (_super) {\n    __extends(PortalHostDirective, _super);\n    function PortalHostDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\n    return PortalHostDirective;\n}(CdkPortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective], exports: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], function () { return []; }, null); })();\n    return PortalModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nvar PortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    PortalInjector.prototype.get = function (token, notFoundValue) {\n        var value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map","import { __values, __assign, __extends } from 'tslib';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nvar BlockScrollStrategy = /** @class */ (function () {\n    function BlockScrollStrategy(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    BlockScrollStrategy.prototype.attach = function () { };\n    /** Blocks page-level scroll while the attached overlay is open. */\n    BlockScrollStrategy.prototype.enable = function () {\n        if (this._canBeEnabled()) {\n            var root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    };\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    BlockScrollStrategy.prototype.disable = function () {\n        if (this._isEnabled) {\n            var html = this._document.documentElement;\n            var body = this._document.body;\n            var htmlStyle = html.style;\n            var bodyStyle = body.style;\n            var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    };\n    BlockScrollStrategy.prototype._canBeEnabled = function () {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        var html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        var body = this._document.body;\n        var viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    };\n    return BlockScrollStrategy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(\"Scroll strategy has already been attached.\");\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nvar CloseScrollStrategy = /** @class */ (function () {\n    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = function () {\n            _this.disable();\n            if (_this._overlayRef.hasAttached()) {\n                _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    CloseScrollStrategy.prototype.attach = function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables the closing of the attached overlay on scroll. */\n    CloseScrollStrategy.prototype.enable = function () {\n        var _this = this;\n        if (this._scrollSubscription) {\n            return;\n        }\n        var stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(function () {\n                var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - _this._initialScrollPosition) > _this._config.threshold) {\n                    _this._detach();\n                }\n                else {\n                    _this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    };\n    /** Disables the closing the attached overlay on scroll. */\n    CloseScrollStrategy.prototype.disable = function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    CloseScrollStrategy.prototype.detach = function () {\n        this.disable();\n        this._overlayRef = null;\n    };\n    return CloseScrollStrategy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nvar NoopScrollStrategy = /** @class */ (function () {\n    function NoopScrollStrategy() {\n    }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    NoopScrollStrategy.prototype.enable = function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    NoopScrollStrategy.prototype.disable = function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    NoopScrollStrategy.prototype.attach = function () { };\n    return NoopScrollStrategy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(function (containerBounds) {\n        var outsideAbove = element.bottom < containerBounds.top;\n        var outsideBelow = element.top > containerBounds.bottom;\n        var outsideLeft = element.right < containerBounds.left;\n        var outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(function (scrollContainerRect) {\n        var clippedAbove = element.top < scrollContainerRect.top;\n        var clippedBelow = element.bottom > scrollContainerRect.bottom;\n        var clippedLeft = element.left < scrollContainerRect.left;\n        var clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nvar RepositionScrollStrategy = /** @class */ (function () {\n    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    RepositionScrollStrategy.prototype.attach = function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables repositioning of the attached overlay on scroll. */\n    RepositionScrollStrategy.prototype.enable = function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            var throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                _this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (_this._config && _this._config.autoClose) {\n                    var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        _this.disable();\n                        _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                    }\n                }\n            });\n        }\n    };\n    /** Disables repositioning of the attached overlay on scroll. */\n    RepositionScrollStrategy.prototype.disable = function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    RepositionScrollStrategy.prototype.detach = function () {\n        this.disable();\n        this._overlayRef = null;\n    };\n    return RepositionScrollStrategy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nvar ScrollStrategyOptions = /** @class */ (function () {\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = function () { return new NoopScrollStrategy(); };\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n        /** Block scrolling. */\n        this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n        this._document = document;\n    }\n    /** @nocollapse */\n    ScrollStrategyOptions.ctorParameters = function () { return [\n        { type: ScrollDispatcher },\n        { type: ViewportRuler },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    ScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return ScrollStrategyOptions;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nvar OverlayConfig = /** @class */ (function () {\n    function OverlayConfig(config) {\n        var e_1, _a;\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            var configKeys = Object.keys(config);\n            try {\n                for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n                    var key = configKeys_1_1.value;\n                    if (config[key] !== undefined) {\n                        // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                        // as \"I don't know *which* key this is, so the only valid value is the intersection\n                        // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                        // is not smart enough to see that the right-hand-side is actually an access of the same\n                        // exact type with the same exact key, meaning that the value type must be identical.\n                        // So we use `any` to work around this.\n                        this[key] = config[key];\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n    }\n    return OverlayConfig;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nvar ConnectionPositionPair = /** @class */ (function () {\n    function ConnectionPositionPair(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nvar ScrollingVisibility = /** @class */ (function () {\n    function ScrollingVisibility() {\n    }\n    return ScrollingVisibility;\n}());\n/** The change event emitted by the strategy when a fallback position is used. */\nvar ConnectedOverlayPositionChange = /** @class */ (function () {\n    function ConnectedOverlayPositionChange(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    /** @nocollapse */\n    ConnectedOverlayPositionChange.ctorParameters = function () { return [\n        { type: ConnectionPositionPair },\n        { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n    ]; };\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nvar OverlayKeyboardDispatcher = /** @class */ (function () {\n    function OverlayKeyboardDispatcher(document) {\n        var _this = this;\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = function (event) {\n            var overlays = _this._attachedOverlays;\n            for (var i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {\n        this._detach();\n    };\n    /** Add a new overlay to the list of attached overlay refs. */\n    OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    };\n    /** Remove an overlay from the list of attached overlay refs. */\n    OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {\n        var index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    };\n    /** Detaches the global keyboard event listener. */\n    OverlayKeyboardDispatcher.prototype._detach = function () {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    };\n    /** @nocollapse */\n    OverlayKeyboardDispatcher.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    OverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return OverlayKeyboardDispatcher;\n}());\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nvar isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nvar OverlayContainer = /** @class */ (function () {\n    function OverlayContainer(document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    OverlayContainer.prototype.ngOnDestroy = function () {\n        var container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    };\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    OverlayContainer.prototype.getContainerElement = function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    OverlayContainer.prototype._createContainer = function () {\n        // @breaking-change 10.0.0 Remove null check for `_platform`.\n        var isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n        var containerClass = 'cdk-overlay-container';\n        if (isBrowser || isTestEnvironment) {\n            var oppositePlatformContainers = this._document.querySelectorAll(\".\" + containerClass + \"[platform=\\\"server\\\"], \" +\n                (\".\" + containerClass + \"[platform=\\\"test\\\"]\"));\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (var i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        var container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    /** @nocollapse */\n    OverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ]; };\n    OverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n    return OverlayContainer;\n}());\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar OverlayRef = /** @class */ (function () {\n    function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        var _this = this;\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = function (event) { return _this._backdropClick.next(event); };\n        this._keydownEventsObservable = new Observable(function (observer) {\n            var subscription = _this._keydownEvents.subscribe(observer);\n            _this._keydownEventSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._keydownEventSubscriptions--;\n            };\n        });\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Amount of subscriptions to the keydown events. */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /** The overlay's HTML element */\n        get: function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n        /** The overlay's backdrop HTML element. */\n        get: function () {\n            return this._backdropElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n        /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         */\n        get: function () {\n            return this._host;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    OverlayRef.prototype.attach = function (portal) {\n        var _this = this;\n        var attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(function () {\n            // The overlay could've been detached before the zone has stabilized.\n            if (_this.hasAttached()) {\n                _this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n        }\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    OverlayRef.prototype.detach = function () {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        var detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    };\n    /** Cleans up the overlay from the DOM. */\n    OverlayRef.prototype.dispose = function () {\n        var isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    };\n    /** Whether the overlay has attached content. */\n    OverlayRef.prototype.hasAttached = function () {\n        return this._portalOutlet.hasAttached();\n    };\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    OverlayRef.prototype.backdropClick = function () {\n        return this._backdropClick.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been attached. */\n    OverlayRef.prototype.attachments = function () {\n        return this._attachments.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been detached. */\n    OverlayRef.prototype.detachments = function () {\n        return this._detachments.asObservable();\n    };\n    /** Gets an observable of keydown events targeted to this overlay. */\n    OverlayRef.prototype.keydownEvents = function () {\n        return this._keydownEventsObservable;\n    };\n    /** Gets the current overlay configuration, which is immutable. */\n    OverlayRef.prototype.getConfig = function () {\n        return this._config;\n    };\n    /** Updates the position of the overlay based on the position strategy. */\n    OverlayRef.prototype.updatePosition = function () {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    };\n    /** Switches to a new position strategy and updates the overlay position. */\n    OverlayRef.prototype.updatePositionStrategy = function (strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    };\n    /** Update the size properties of the overlay. */\n    OverlayRef.prototype.updateSize = function (sizeConfig) {\n        this._config = __assign(__assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    };\n    /** Sets the LTR/RTL direction for the overlay. */\n    OverlayRef.prototype.setDirection = function (dir) {\n        this._config = __assign(__assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    };\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    OverlayRef.prototype.addPanelClass = function (classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    };\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    OverlayRef.prototype.removePanelClass = function (classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    };\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    OverlayRef.prototype.getDirection = function () {\n        var direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    };\n    /** Switches to a new scroll strategy. */\n    OverlayRef.prototype.updateScrollStrategy = function (strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    };\n    /** Updates the text direction of the overlay panel. */\n    OverlayRef.prototype._updateElementDirection = function () {\n        this._host.setAttribute('dir', this.getDirection());\n    };\n    /** Updates the size of the overlay element based on the overlay config. */\n    OverlayRef.prototype._updateElementSize = function () {\n        if (!this._pane) {\n            return;\n        }\n        var style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    };\n    /** Toggles the pointer events for the overlay pane element. */\n    OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /** Attaches a backdrop for this overlay. */\n    OverlayRef.prototype._attachBackdrop = function () {\n        var _this = this;\n        var showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(function () {\n                requestAnimationFrame(function () {\n                    if (_this._backdropElement) {\n                        _this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    OverlayRef.prototype._updateStackingOrder = function () {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    };\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    OverlayRef.prototype.detachBackdrop = function () {\n        var _this = this;\n        var backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        var timeoutId;\n        var finishDetach = function () {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', _this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (_this._backdropElement == backdropToDetach) {\n                _this._backdropElement = null;\n            }\n            if (_this._config.backdropClass) {\n                _this._toggleClasses(backdropToDetach, _this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(function () {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach, 500); });\n    };\n    /** Toggles a single CSS class or an array of classes on an element. */\n    OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {\n        var classList = element.classList;\n        coerceArray(cssClasses).forEach(function (cssClass) {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    };\n    /** Detaches the overlay content next time the zone stabilizes. */\n    OverlayRef.prototype._detachContentWhenStable = function () {\n        var _this = this;\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(function () {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            var subscription = _this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(_this._attachments, _this._detachments)))\n                .subscribe(function () {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                    if (_this._pane && _this._config.panelClass) {\n                        _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                    }\n                    if (_this._host && _this._host.parentElement) {\n                        _this._previousHostParent = _this._host.parentElement;\n                        _this._previousHostParent.removeChild(_this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    };\n    /** Disposes of a scroll strategy. */\n    OverlayRef.prototype._disposeScrollStrategy = function () {\n        var scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    };\n    return OverlayRef;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar FlexibleConnectedPositionStrategy = /** @class */ (function () {\n    function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attaches this position strategy to an overlay. */\n    FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n        var _this = this;\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            _this._isInitialRender = true;\n            _this.apply();\n        });\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    FlexibleConnectedPositionStrategy.prototype.apply = function () {\n        var e_1, _a, e_2, _b;\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        var originRect = this._originRect;\n        var overlayRect = this._overlayRect;\n        var viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        var flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        var fallback;\n        try {\n            // Go through each of the preferred positions looking for a good fit.\n            // If a good fit is found, it will be applied immediately.\n            for (var _c = __values(this._preferredPositions), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var pos = _d.value;\n                // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n                var originPoint = this._getOriginPoint(originRect, pos);\n                // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n                // overlay in this position. We use the top-left corner for calculations and later translate\n                // this into an appropriate (top, left, bottom, right) style.\n                var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n                // Calculate how well the overlay would fit into the viewport with this point.\n                var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n                // If the overlay, without any further work, fits into the viewport, use this position.\n                if (overlayFit.isCompletelyWithinViewport) {\n                    this._isPushed = false;\n                    this._applyPosition(pos, originPoint);\n                    return;\n                }\n                // If the overlay has flexible dimensions, we can use this position\n                // so long as there's enough space for the minimum dimensions.\n                if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                    // Save positions where the overlay will fit with flexible dimensions. We will use these\n                    // if none of the positions fit *without* flexible dimensions.\n                    flexibleFits.push({\n                        position: pos,\n                        origin: originPoint,\n                        overlayRect: overlayRect,\n                        boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                    });\n                    continue;\n                }\n                // If the current preferred position does not fit on the screen, remember the position\n                // if it has more visible area on-screen than we've seen and move onto the next preferred\n                // position.\n                if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                    fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            var bestFit = null;\n            var bestScore = -1;\n            try {\n                for (var flexibleFits_1 = __values(flexibleFits), flexibleFits_1_1 = flexibleFits_1.next(); !flexibleFits_1_1.done; flexibleFits_1_1 = flexibleFits_1.next()) {\n                    var fit = flexibleFits_1_1.value;\n                    var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                    if (score > bestScore) {\n                        bestScore = score;\n                        bestFit = fit;\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (flexibleFits_1_1 && !flexibleFits_1_1.done && (_b = flexibleFits_1.return)) _b.call(flexibleFits_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    };\n    FlexibleConnectedPositionStrategy.prototype.detach = function () {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    };\n    /** Cleanup after the element gets destroyed. */\n    FlexibleConnectedPositionStrategy.prototype.dispose = function () {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            var lastPosition = this._lastPosition || this._preferredPositions[0];\n            var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    };\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    };\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {\n        this._viewportMargin = margin;\n        return this;\n    };\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {\n        if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    };\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {\n        if (growAfterOpen === void 0) { growAfterOpen = true; }\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    };\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {\n        if (canPush === void 0) { canPush = true; }\n        this._canPush = canPush;\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n        if (isLocked === void 0) { isLocked = true; }\n        this._positionLocked = isLocked;\n        return this;\n    };\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n        this._origin = origin;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {\n        var x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            var startX = this._isRtl() ? originRect.right : originRect.left;\n            var endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        var y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        var overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        var overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    };\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {\n        var x = point.x, y = point.y;\n        var offsetX = this._getOffset(position, 'x');\n        var offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        var leftOverflow = 0 - x;\n        var rightOverflow = (x + overlay.width) - viewport.width;\n        var topOverflow = 0 - y;\n        var bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        var visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea: visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    };\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            var availableHeight = viewport.bottom - point.y;\n            var availableWidth = viewport.right - point.x;\n            var minHeight = this._overlayRef.getConfig().minHeight;\n            var minWidth = this._overlayRef.getConfig().minWidth;\n            var verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            var horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    };\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        var viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        var pushX = 0;\n        var pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    };\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            var scrollableViewProperties = this._getScrollVisibility();\n            var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    };\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        var xOrigin;\n        var yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n        }\n    };\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {\n        var viewport = this._viewportRect;\n        var isRtl = this._isRtl();\n        var height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            var previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        var width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            var previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width: width, height: height };\n    };\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {\n        var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        var styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            var maxHeight = this._overlayRef.getConfig().maxHeight;\n            var maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    };\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    };\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    };\n    /** Sets positioning styles to the overlay element. */\n    FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {\n        var styles = {};\n        var hasExactPosition = this._hasExactPosition();\n        var hasFlexibleDimensions = this._hasFlexibleDimensions;\n        var config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        var transformString = '';\n        var offsetX = this._getOffset(position, 'x');\n        var offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += \"translateX(\" + offsetX + \"px) \";\n        }\n        if (offsetY) {\n            transformString += \"translateY(\" + offsetY + \"px)\";\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    };\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        var styles = { top: '', bottom: '' };\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            var documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    };\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        var styles = { left: '', right: '' };\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        var horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            var documentWidth = this._document.documentElement.clientWidth;\n            styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {\n        // Note: needs fresh rects since the position could've changed.\n        var originBounds = this._getOriginRect();\n        var overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        var width = this._document.documentElement.clientWidth;\n        var height = this._document.documentElement.clientHeight;\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    };\n    /** Whether the we're dealing with an RTL context */\n    FlexibleConnectedPositionStrategy.prototype._isRtl = function () {\n        return this._overlayRef.getDirection() === 'rtl';\n    };\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    };\n    /** Retrieves the offset of a position along the x or y axis. */\n    FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    };\n    /** Validates that the current position match the expected values. */\n    FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(function (pair) {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    };\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {\n        var _this = this;\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(function (cssClass) {\n                if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    _this._appliedPanelClasses.push(cssClass);\n                    _this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    };\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {\n        var _this = this;\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(function (cssClass) {\n                _this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    };\n    /** Returns the ClientRect of the current origin. */\n    FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {\n        var origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        if (origin instanceof HTMLElement) {\n            return origin.getBoundingClientRect();\n        }\n        var width = origin.width || 0;\n        var height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height: height,\n            width: width\n        };\n    };\n    return FlexibleConnectedPositionStrategy;\n}());\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nvar ConnectedPositionStrategy = /** @class */ (function () {\n    function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /** Whether the we're dealing with an RTL context */\n        get: function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /** Emits an event when the connection point changes. */\n        get: function () {\n            return this._positionStrategy.positionChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attach this position strategy to an overlay. */\n    ConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    };\n    /** Disposes all resources used by the position strategy. */\n    ConnectedPositionStrategy.prototype.dispose = function () {\n        this._positionStrategy.dispose();\n    };\n    /** @docs-private */\n    ConnectedPositionStrategy.prototype.detach = function () {\n        this._positionStrategy.detach();\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    ConnectedPositionStrategy.prototype.apply = function () {\n        this._positionStrategy.apply();\n    };\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n        this._positionStrategy.reapplyLastPosition();\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {\n        var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    };\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    ConnectedPositionStrategy.prototype.withPositions = function (positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    ConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    };\n    return ConnectedPositionStrategy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar GlobalPositionStrategy = /** @class */ (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    GlobalPositionStrategy.prototype.attach = function (overlayRef) {\n        var config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    };\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    GlobalPositionStrategy.prototype.top = function (value) {\n        if (value === void 0) { value = ''; }\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    GlobalPositionStrategy.prototype.left = function (value) {\n        if (value === void 0) { value = ''; }\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    GlobalPositionStrategy.prototype.bottom = function (value) {\n        if (value === void 0) { value = ''; }\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    GlobalPositionStrategy.prototype.right = function (value) {\n        if (value === void 0) { value = ''; }\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    GlobalPositionStrategy.prototype.width = function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    GlobalPositionStrategy.prototype.height = function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    GlobalPositionStrategy.prototype.apply = function () {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        var styles = this._overlayRef.overlayElement.style;\n        var parentStyles = this._overlayRef.hostElement.style;\n        var config = this._overlayRef.getConfig();\n        var width = config.width, height = config.height, maxWidth = config.maxWidth, maxHeight = config.maxHeight;\n        var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        var shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    };\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    GlobalPositionStrategy.prototype.dispose = function () {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        var styles = this._overlayRef.overlayElement.style;\n        var parent = this._overlayRef.hostElement;\n        var parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    };\n    return GlobalPositionStrategy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nvar OverlayPositionBuilder = /** @class */ (function () {\n    function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    OverlayPositionBuilder.prototype.global = function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    /** @nocollapse */\n    OverlayPositionBuilder.ctorParameters = function () { return [\n        { type: ViewportRuler },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform },\n        { type: OverlayContainer }\n    ]; };\n    OverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n    return OverlayPositionBuilder;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nvar nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nvar Overlay = /** @class */ (function () {\n    function Overlay(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    Overlay.prototype.create = function (config) {\n        var host = this._createHostElement();\n        var pane = this._createPaneElement(host);\n        var portalOutlet = this._createPortalOutlet(pane);\n        var overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    };\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    Overlay.prototype.position = function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = function (host) {\n        var pane = this._document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    };\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    Overlay.prototype._createHostElement = function () {\n        var host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    };\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    Overlay.prototype._createPortalOutlet = function (pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    };\n    /** @nocollapse */\n    Overlay.ctorParameters = function () { return [\n        { type: ScrollStrategyOptions },\n        { type: OverlayContainer },\n        { type: ComponentFactoryResolver },\n        { type: OverlayPositionBuilder },\n        { type: OverlayKeyboardDispatcher },\n        { type: Injector },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Directionality },\n        { type: Location, decorators: [{ type: Optional }] }\n    ]; };\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: function (t) { return Overlay.ɵfac(t); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n    return Overlay;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nvar defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return function (config) { return overlay.scrollStrategies.reposition(config); };\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar CdkOverlayOrigin = /** @class */ (function () {\n    function CdkOverlayOrigin(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    /** @nocollapse */\n    CdkOverlayOrigin.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return CdkOverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nvar CdkConnectedOverlay = /** @class */ (function () {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n        /** The offset in pixels for the overlay connection point on the x-axis */\n        get: function () { return this._offsetX; },\n        set: function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n        /** The offset in pixels for the overlay connection point on the y-axis */\n        get: function () { return this._offsetY; },\n        set: function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n        /** Whether or not the overlay should attach a backdrop. */\n        get: function () { return this._hasBackdrop; },\n        set: function (value) { this._hasBackdrop = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n        /** Whether or not the overlay should be locked when scrolling. */\n        get: function () { return this._lockPosition; },\n        set: function (value) { this._lockPosition = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        get: function () { return this._flexibleDimensions; },\n        set: function (value) {\n            this._flexibleDimensions = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        get: function () { return this._growAfterOpen; },\n        set: function (value) { this._growAfterOpen = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        get: function () { return this._push; },\n        set: function (value) { this._push = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n        /** The associated overlay reference. */\n        get: function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n        /** The element's layout direction. */\n        get: function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkConnectedOverlay.prototype.ngOnDestroy = function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    CdkConnectedOverlay.prototype.ngOnChanges = function (changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    };\n    /** Creates an overlay */\n    CdkConnectedOverlay.prototype._createOverlay = function () {\n        var _this = this;\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe(function (event) {\n            _this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                _this._detachOverlay();\n            }\n        });\n    };\n    /** Builds the overlay config based on the directive's inputs */\n    CdkConnectedOverlay.prototype._buildConfig = function () {\n        var positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        var overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy: positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    };\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    CdkConnectedOverlay.prototype._updatePositionStrategy = function (positionStrategy) {\n        var _this = this;\n        var positions = this.positions.map(function (currentPosition) { return ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || _this.offsetX,\n            offsetY: currentPosition.offsetY || _this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }); });\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    };\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    CdkConnectedOverlay.prototype._createPositionStrategy = function () {\n        var _this = this;\n        var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n        return strategy;\n    };\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    CdkConnectedOverlay.prototype._attachOverlay = function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                _this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    };\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    CdkConnectedOverlay.prototype._detachOverlay = function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    /** @nocollapse */\n    CdkConnectedOverlay.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: TemplateRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    CdkConnectedOverlay.propDecorators = {\n        origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n        positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n        positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n        offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n        offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n        width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n        height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n        minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n        minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n        backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n        panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n        viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n        scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n        open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n        transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n        hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n        lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n        flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n        growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n        push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n        backdropClick: [{ type: Output }],\n        positionChange: [{ type: Output }],\n        attach: [{ type: Output }],\n        detach: [{ type: Output }],\n        overlayKeydown: [{ type: Output }]\n    };\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n    return CdkConnectedOverlay;\n}());\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/** @docs-private */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar OverlayModule = /** @class */ (function () {\n    function OverlayModule() {\n    }\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule],\n        ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin,\n        ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], function () { return []; }, null); })();\n    return OverlayModule;\n}());\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nvar FullscreenOverlayContainer = /** @class */ (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer(_document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platform) {\n        return _super.call(this, _document, platform) || this;\n    }\n    FullscreenOverlayContainer.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    };\n    FullscreenOverlayContainer.prototype._createContainer = function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n        if (!this._containerElement) {\n            return;\n        }\n        var fullscreenElement = this.getFullscreenElement();\n        var parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    };\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n        var eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    };\n    FullscreenOverlayContainer.prototype._getEventName = function () {\n        if (!this._fullScreenEventName) {\n            var _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n        var _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    };\n    /** @nocollapse */\n    FullscreenOverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ]; };\n    FullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, OVERLAY_PROVIDERS, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_c, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_d, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_e, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g };\n\n//# sourceMappingURL=overlay.js.map","import { NgModule, Injectable, ɵɵdefineInjectable, ɵɵinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar LayoutModule = /** @class */ (function () {\n    function LayoutModule() {\n    }\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return []; }, null); })();\n    return LayoutModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nvar mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nvar mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nvar MediaMatcher = /** @class */ (function () {\n    function MediaMatcher(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    MediaMatcher.prototype.matchMedia = function (query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    };\n    /** @nocollapse */\n    MediaMatcher.ctorParameters = function () { return [\n        { type: Platform }\n    ]; };\n    MediaMatcher.ɵprov = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n    return MediaMatcher;\n}());\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(\"@media \" + query + \" {.fx-query-test{ }}\", 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: function () { },\n        removeListener: function () { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nvar BreakpointObserver = /** @class */ (function () {\n    function BreakpointObserver(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    BreakpointObserver.prototype.ngOnDestroy = function () {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    };\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    BreakpointObserver.prototype.isMatched = function (value) {\n        var _this = this;\n        var queries = splitQueries(coerceArray(value));\n        return queries.some(function (mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; });\n    };\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    BreakpointObserver.prototype.observe = function (value) {\n        var _this = this;\n        var queries = splitQueries(coerceArray(value));\n        var observables = queries.map(function (query) { return _this._registerQuery(query).observable; });\n        var stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(function (breakpointStates) {\n            var response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(function (state) {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            });\n            return response;\n        }));\n    };\n    /** Registers a specific query to be listened for. */\n    BreakpointObserver.prototype._registerQuery = function (query) {\n        var _this = this;\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        var mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        var queryObservable = new Observable(function (observer) {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            var handler = function (e) { return _this._zone.run(function () { return observer.next(e); }); };\n            mql.addListener(handler);\n            return function () {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(function (nextMql) { return ({ query: query, matches: nextMql.matches }); }), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        var output = { observable: queryObservable, mql: mql };\n        this._queries.set(query, output);\n        return output;\n    };\n    /** @nocollapse */\n    BreakpointObserver.ctorParameters = function () { return [\n        { type: MediaMatcher },\n        { type: NgZone }\n    ]; };\n    BreakpointObserver.ɵprov = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n    return BreakpointObserver;\n}());\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(function (query) { return query.split(','); })\n        .reduce(function (a1, a2) { return a1.concat(a2); })\n        .map(function (query) { return query.trim(); });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nvar Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\nvar SkipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { CdkPortalOutlet, BasePortalOutlet, PortalModule, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, TemplateRef, Injectable, Injector, Optional, SkipSelf, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { __extends, __assign } from 'tslib';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    var ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r11.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nvar MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nvar MatSnackBarRef = /** @class */ (function () {\n    function MatSnackBarRef(containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n    }\n    /** Dismisses the snack bar. */\n    MatSnackBarRef.prototype.dismiss = function () {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    };\n    /** Marks the snackbar action clicked. */\n    MatSnackBarRef.prototype.dismissWithAction = function () {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    MatSnackBarRef.prototype.closeWithAction = function () {\n        this.dismissWithAction();\n    };\n    /** Dismisses the snack bar after some duration */\n    MatSnackBarRef.prototype._dismissAfter = function (duration) {\n        var _this = this;\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, Math.min(duration, MAX_TIMEOUT));\n    };\n    /** Marks the snackbar as opened */\n    MatSnackBarRef.prototype._open = function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /** Cleans up the DOM after closing. */\n    MatSnackBarRef.prototype._finishDismiss = function () {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    };\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    MatSnackBarRef.prototype.afterDismissed = function () {\n        return this._afterDismissed.asObservable();\n    };\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    MatSnackBarRef.prototype.afterOpened = function () {\n        return this.containerInstance._onEnter;\n    };\n    /** Gets an observable that is notified when the snack bar action is called. */\n    MatSnackBarRef.prototype.onAction = function () {\n        return this._onAction.asObservable();\n    };\n    return MatSnackBarRef;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nvar MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nvar MatSnackBarConfig = /** @class */ (function () {\n    function MatSnackBarConfig() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n    return MatSnackBarConfig;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = /** @class */ (function () {\n    function SimpleSnackBar(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    SimpleSnackBar.prototype.action = function () {\n        this.snackBarRef.dismissWithAction();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /** If the action button should be shown. */\n        get: function () {\n            return !!this.data.action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @nocollapse */\n    SimpleSnackBar.ctorParameters = function () { return [\n        { type: MatSnackBarRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n    ]; };\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n    return SimpleSnackBar;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nvar matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nvar MatSnackBarContainer = /** @class */ (function (_super) {\n    __extends(MatSnackBarContainer, _super);\n    function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.snackBarConfig = snackBarConfig;\n        /** Whether the component has been destroyed. */\n        _this._destroyed = false;\n        /** Subject for notifying that the snack bar has exited from view. */\n        _this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        _this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        _this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        _this.attachDomPortal = function (portal) {\n            _this._assertNotAttached();\n            _this._applySnackBarClasses();\n            return _this._portalOutlet.attachDomPortal(portal);\n        };\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            _this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            _this._role = null;\n        }\n        else {\n            _this._role = 'status';\n        }\n        return _this;\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    MatSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    };\n    /** Attach a template portal as content to this snack bar container. */\n    MatSnackBarContainer.prototype.attachTemplatePortal = function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    };\n    /** Handle end of animations, updating the state of the snackbar. */\n    MatSnackBarContainer.prototype.onAnimationEnd = function (event) {\n        var fromState = event.fromState, toState = event.toState;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            var onEnter_1 = this._onEnter;\n            this._ngZone.run(function () {\n                onEnter_1.next();\n                onEnter_1.complete();\n            });\n        }\n    };\n    /** Begin animation of snack bar entrance into view. */\n    MatSnackBarContainer.prototype.enter = function () {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    };\n    /** Begin animation of the snack bar exiting from view. */\n    MatSnackBarContainer.prototype.exit = function () {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    };\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    MatSnackBarContainer.prototype.ngOnDestroy = function () {\n        this._destroyed = true;\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    MatSnackBarContainer.prototype._completeExit = function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n            _this._onExit.next();\n            _this._onExit.complete();\n        });\n    };\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    MatSnackBarContainer.prototype._applySnackBarClasses = function () {\n        var element = this._elementRef.nativeElement;\n        var panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    };\n    /** Asserts that no content is already attached to the container. */\n    MatSnackBarContainer.prototype._assertNotAttached = function () {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    };\n    /** @nocollapse */\n    MatSnackBarContainer.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatSnackBarConfig }\n    ]; };\n    MatSnackBarContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n    };\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 2, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n    return MatSnackBarContainer;\n}(BasePortalOutlet));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatSnackBarModule = /** @class */ (function () {\n    function MatSnackBarModule() {\n    }\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer,\n        SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], function () { return []; }, null); })();\n    return MatSnackBarModule;\n}());\n\n/** Injection token that can be used to specify default snack bar. */\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MatSnackBar = /** @class */ (function () {\n    function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n        /** Reference to the currently opened snackbar at *any* level. */\n        get: function () {\n            var parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        set: function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    MatSnackBar.prototype.openFromComponent = function (component, config) {\n        return this._attach(component, config);\n    };\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    MatSnackBar.prototype.openFromTemplate = function (template, config) {\n        return this._attach(template, config);\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    MatSnackBar.prototype.open = function (message, action, config) {\n        if (action === void 0) { action = ''; }\n        var _config = __assign(__assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message: message, action: action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    MatSnackBar.prototype.dismiss = function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    MatSnackBar.prototype.ngOnDestroy = function () {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    MatSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        var containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        var containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    MatSnackBar.prototype._attach = function (content, userConfig) {\n        var config = __assign(__assign(__assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        var overlayRef = this._createOverlay(config);\n        var container = this._attachSnackBarContainer(overlayRef, config);\n        var snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            var portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef: snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            var injector = this._createInjector(config, snackBarRef);\n            var portal = new ComponentPortal(content, undefined, injector);\n            var contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(function (state) {\n            var classList = overlayRef.overlayElement.classList;\n            var className = 'mat-snack-bar-handset';\n            state.matches ? classList.add(className) : classList.remove(className);\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /** Animates the old snack bar out and the new one in. */\n    MatSnackBar.prototype._animateSnackBar = function (snackBarRef, config) {\n        var _this = this;\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                _this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(config.duration); });\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    MatSnackBar.prototype._createOverlay = function (config) {\n        var overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        var positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        var isRtl = config.direction === 'rtl';\n        var isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        var isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    };\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    MatSnackBar.prototype._createInjector = function (config, snackBarRef) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    };\n    /** @nocollapse */\n    MatSnackBar.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: LiveAnnouncer },\n        { type: Injector },\n        { type: BreakpointObserver },\n        { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatSnackBar.ɵprov = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return MatSnackBar;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string {\n    return this._code;\n  }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string {\n    return this._header;\n  }\n  private _header: string;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger\n  ) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n      .formatCode(\n        leftAlignedCode,\n        this.language,\n        this.getLinenums(leftAlignedCode)\n      )\n      .pipe(tap(() => this.codeFormatted.emit()))\n      .subscribe(\n        c => this.setCodeHtml(c),\n        err => {\n          /* ignore failure to format */\n        }\n      );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path\n      ? this.path + (this.region ? '#' + this.region : '')\n      : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(\n      `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n    );\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(\n        new Error(`ERROR copying code to clipboard: \"${code}\"`)\n      );\n      this.snackbar.open('Copy failed. Please try again!', '', {\n        duration: 800,\n      });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean'\n        ? this.linenums\n        : this.linenums === 'true'\n          ? true\n          : this.linenums === 'false'\n            ? false\n            : typeof this.linenums === 'string'\n              ? parseInt(this.linenums, 10)\n              : this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number)\n      ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n      : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines\n    .map(line => line.substr(indent))\n    .join('\\n')\n    .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n  import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      System.import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}