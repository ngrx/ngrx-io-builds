{"version":3,"sources":["./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/custom-elements/ngrx/code-block.component.ts","./src/app/custom-elements/ngrx/code-block.module.ts"],"names":["logger","this","prettyPrintOne","getPrettyPrintOne","pipe","ppo","window","Promise","resolve","then","err","msg","message","error","Error","formatCode","code","language","linenums","substr","console","PrettyPrinter","pretty","formattedCode","ngAfterContentInit","subscribe","codeContainer","nativeElement","innerHTML","CodeBlockComponent","customElementComponent","CodeBlockModule"],"mappings":"qPAgBA,aAKI,WAAoBA,GAAA,KAAAA,SAChBC,KAAKC,gBAAiB,OAAYD,KAAKE,qBAAqBC,MAAK,U,OAG7D,YAAAD,kBAAR,sBACUE,EAAOC,OAA+B,eAC5C,OAAOD,EAAME,QAAQC,QAAQH,GAEzB,2DACKI,KACG,WAAM,OAACH,OAA+B,gBACtC,SAAAI,GACI,IAAMC,EAAM,uCAAuCD,EAAIE,QAGvD,OAFA,EAAKZ,OAAOa,MAAM,IAAIC,MAAMH,IAErB,WACH,MAAM,IAAIG,MAAMH,OAexC,YAAAI,WAAA,SAAWC,EAAcC,EAAmBC,GACxC,OAAOjB,KAAKC,eAAeE,MACvB,OAAI,SAAAC,GACA,IACI,OAAOA,EAAIW,EAAMC,EAAUC,GAC7B,MAAOR,GACL,IAAMC,EAAM,sCAAsCK,EAAKG,OAAO,EAAG,IAAG,QAEpE,MADAC,QAAQP,MAAMF,EAAKD,GACb,IAAII,MAAMH,OAGxB,W,sCA9CCU,GAAa,a,0BAAbA,EAAa,QAAbA,EAAa,Y,EAD1B,I,yICSA,aAgBI,WAAoBC,GAAA,KAAAA,SAPX,KAAAN,KAAO,GAKhB,KAAAO,cAAgB,G,OAIhB,YAAAC,mBAAA,sBAGIvB,KAAKqB,OAAOP,WAFe,YAAdd,KAAKe,KAnCF,wLAUG,0HA2BUS,UAAU,SAAAF,GACnC,EAAKG,cAAcC,cAAcC,UAAYL,K,sCAd5CM,GAAkB,a,wBAAlBA,EAAkB,wD,MAAA,K,SAGS,O,8LARpC,iBACE,mBACF,U,oBALJ,GCnBA,0BAQI,KAAAC,uBAAoCD,E,6CAD3BE,I,wBAAAA,I,6BAFE,CAAC,KAAc,SAJjB,CAAC,S,EADd","file":"src_app_custom-elements_ngrx_code-block_module_ts.562ed623be5a3ab92c2b.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import {\n    Component,\n    Input,\n    AfterContentInit,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\nconst EFFECTS_EXAMPLE = `\nsearch$ = createEffect(() => \n  this.actions$.pipe(\n    ofType(BookActions.search),\n    exhaustMap(action =>\n      this.googleBooksService.search(action.query)\n    )\n  )\n);`;\n\nconst SCHEMATICS_EXAMPLE = `\n$ ng g store State --root --module app.module.ts\n create src/app/reducers/index.ts\n update src/app/app.module.ts\n`;\n\n@Component({\n    selector: 'ngrx-code-block',\n    template: `\n    <div class=\"prettyprint-scroller\">\n      <pre class=\"prettyprint\" #codeContainer></pre>\n    </div>\n  `,\n})\nexport class CodeBlockComponent implements AfterContentInit {\n    @Input() code = '';\n\n    @ViewChild('codeContainer', { read: ElementRef, static: true })\n    codeContainer;\n\n    formattedCode = '';\n\n    constructor(private pretty: PrettyPrinter) {}\n\n    ngAfterContentInit() {\n        const code = this.code === 'effects' ? EFFECTS_EXAMPLE : SCHEMATICS_EXAMPLE;\n\n        this.pretty.formatCode(code).subscribe(formattedCode => {\n            this.codeContainer.nativeElement.innerHTML = formattedCode;\n        });\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeBlockComponent } from './code-block.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [CodeBlockComponent],\n    exports: [CodeBlockComponent],\n    entryComponents: [CodeBlockComponent],\n    providers: [PrettyPrinter],\n})\nexport class CodeBlockModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = CodeBlockComponent;\n}\n"],"sourceRoot":"webpack:///"}