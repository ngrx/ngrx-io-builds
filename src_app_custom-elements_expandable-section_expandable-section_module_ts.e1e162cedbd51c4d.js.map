{"version":3,"file":"src_app_custom-elements_expandable-section_expandable-section_module_ts.e1e162cedbd51c4d.js","mappings":"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","names":["CDK_ACCORDION","InjectionToken","nextId","CdkAccordionItem","_CdkAccordionItem","expanded","this","_expanded","expandedChange","emit","opened","_expansionDispatcher","notify","id","accordion","closed","_changeDetectorRef","markForCheck","constructor","_openCloseAllSubscription","Subscription","EMPTY","EventEmitter","destroyed","disabled","_removeUniqueSelectionListener","listen","accordionId","multi","_subscribeToOpenCloseAllActions","ngOnDestroy","complete","unsubscribe","toggle","close","open","_openCloseAllActions","subscribe","ɵfac","t","i0","i1","ɵdir","type","selectors","inputs","HasDecoratorInputTransform","booleanAttribute","outputs","exportAs","standalone","features","provide","useValue","undefined","CdkAccordionModule","_CdkAccordionModule","ɵmod","ɵinj","_c0","_MatExpansionPanel_ng_template_5_Template","rf","ctx","_c1","_c2","_MatExpansionPanelHeader_Conditional_4_Template","ctx_r0","_getExpandedState","_c3","_c4","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_MatExpansionPanel","hideToggle","_hideToggle","value","togglePosition","_togglePosition","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","afterExpand","afterCollapse","_inputChanges","Subject","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","TemplatePortal","ngOnChanges","changes","next","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","DOCUMENT","ANIMATION_MODULE_TYPE","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","useExisting","ngContentSelectors","decls","vars","consts","template","$event","dependencies","CdkPortalOutlet","styles","encapsulation","data","animation","changeDetection","MatExpansionPanelHeader","_MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i2","numberAttribute","MatExpansionModule","_MatExpansionModule","imports","MatCommonModule","PortalModule","ExpandableSectionComponent","_ExpandableSectionComponent","title","ExpandableSectionModule","_ExpandableSectionModule","customElementComponent"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/accordion.mjs","./node_modules/@angular/material/fesm2022/expansion.mjs","./src/app/custom-elements/expandable-section/expandable-section.component.ts","./src/app/custom-elements/expandable-section/expandable-section.component.html","./src/app/custom-elements/expandable-section/expandable-section.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, booleanAttribute, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/collections';\nimport { Subject, Subscription } from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        this.multi = false;\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this.multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkAccordion, isStandalone: true, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: [\"multi\", \"multi\", booleanAttribute] }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                    standalone: true,\n                }]\n        }], propDecorators: { multi: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        /** Whether the AccordionItem is disabled. */\n        this.disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordionItem, deps: [{ token: CDK_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkAccordionItem, isStandalone: true, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: [\"expanded\", \"expanded\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: undefined },\n        ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkAccordion, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_ACCORDION]\n                }, {\n                    type: SkipSelf\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }], propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass CdkAccordionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordionModule, imports: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordionModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAccordion, CdkAccordionItem],\n                    exports: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_ACCORDION, CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, EventEmitter, ANIMATION_MODULE_TYPE, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, SkipSelf, Input, Output, ContentChild, ViewChild, numberAttribute, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        // Clear the `visibility` while open, otherwise the content will be visible when placed in\n        // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n        // that have a `visibility` of their own (see #27436).\n        state('expanded', style({ height: '*', visibility: '' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nconst MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template, _expansionPanel) {\n        this._template = _template;\n        this._expansionPanel = _expansionPanel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }, { token: MAT_EXPANSION_PANEL, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatExpansionPanelContent, isStandalone: true, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL]\n                }, {\n                    type: Optional\n                }] }] });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatExpansionPanel, isStandalone: true, selector: \"mat-expansion-panel\", inputs: { hideToggle: [\"hideToggle\", \"hideToggle\", booleanAttribute], togglePosition: \"togglePosition\" }, outputs: { afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: undefined },\n            { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n        ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color);color:var(--mat-expansion-container-text-color);border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font);font-size:var(--mat-expansion-container-text-size);font-weight:var(--mat-expansion-container-text-weight);line-height:var(--mat-expansion-container-text-line-height);letter-spacing:var(--mat-expansion-container-text-tracking)}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color)}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, standalone: true, imports: [CdkPortalOutlet], template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color);color:var(--mat-expansion-container-text-color);border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font);font-size:var(--mat-expansion-container-text-size);font-weight:var(--mat-expansion-container-text-weight);line-height:var(--mat-expansion-container-text-line-height);letter-spacing:var(--mat-expansion-container-text-tracking)}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color)}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [MAT_ACCORDION]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { hideToggle: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatExpansionPanelActionRow, isStandalone: true, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /** Tab index of the header. */\n        this.tabIndex = 0;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatExpansionPanelHeader, isStandalone: true, selector: \"mat-expansion-panel-header\", inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\", tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))] }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, ngImport: i0, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\"></span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font);font-size:var(--mat-expansion-header-text-size);font-weight:var(--mat-expansion-header-text-weight);line-height:var(--mat-expansion-header-text-line-height);letter-spacing:var(--mat-expansion-header-text-tracking)}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color)}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color)}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color)}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, standalone: true, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\"></span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font);font-size:var(--mat-expansion-header-text-size);font-weight:var(--mat-expansion-header-text-weight);line-height:var(--mat-expansion-header-text-line-height);letter-spacing:var(--mat-expansion-header-text-tracking)}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color)}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color)}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color)}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"] }]\n        }], ctorParameters: () => [{ type: MatExpansionPanel, decorators: [{\n                    type: Host\n                }] }, { type: i0.ElementRef }, { type: i2.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatExpansionPanelDescription, isStandalone: true, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatExpansionPanelTitle, isStandalone: true, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        /** Whether the expansion indicator should be hidden. */\n        this.hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._keyManager?.destroy();\n        this._ownHeaders.destroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatAccordion, isStandalone: true, selector: \"mat-accordion\", inputs: { hideToggle: [\"hideToggle\", \"hideToggle\", booleanAttribute], displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n            {\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion,\n            },\n        ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                    standalone: true,\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\nclass MatExpansionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule,\n            CdkAccordionModule,\n            PortalModule,\n            MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent], exports: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule,\n            CdkAccordionModule,\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkAccordionModule,\n                        PortalModule,\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n","/* eslint-disable  @angular-eslint/component-selector */\nimport { Component, Input } from '@angular/core';\n\n/** Custom element wrapper for the material expansion panel with a title input. */\n@Component({\n    selector: 'aio-expandable-section',\n    templateUrl: 'expandable-section.component.html',\n})\nexport class ExpandableSectionComponent {\n    @Input() title;\n}\n","<mat-expansion-panel style=\"background: inherit\">\n  <mat-expansion-panel-header>\n    {{title}}\n  </mat-expansion-panel-header>\n\n  <ng-content></ng-content>\n</mat-expansion-panel>\n","import { NgModule, Type } from '@angular/core';\nimport { ExpandableSectionComponent } from './expandable-section.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { MatExpansionModule } from '@angular/material/expansion';\n\n@NgModule({\n    imports: [MatExpansionModule],\n    declarations: [ExpandableSectionComponent],\n})\nexport class ExpandableSectionModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ExpandableSectionComponent;\n}\n"],"x_google_ignoreList":[0,1]}