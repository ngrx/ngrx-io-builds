{"version":3,"sources":["./src/styles/_mixins.scss","./src/styles/_ngrx.scss","./src/styles/custom-themes/light-theme.scss","./src/styles/2-modules/deploy-theme/_deploy-theme.scss","./src/styles/_constants.scss","./node_modules/@angular/material/core/style/_sass-utils.scss","./node_modules/@material/theme/_css.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@material/list/_list.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/button/_icon-button-theme.scss","./node_modules/@angular/material/button/_fab-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./src/styles/0-base/_typography-theme.scss","./src/styles/1-layouts/footer/_footer-theme.scss","./src/styles/1-layouts/layout-global/_layout-global-theme.scss","./src/styles/1-layouts/marketing-layout/_marketing-layout-theme.scss","./src/styles/1-layouts/not-found/_not-found-theme.scss","./src/styles/1-layouts/sidenav/_sidenav-theme.scss","./src/styles/1-layouts/top-menu/_top-menu-theme.scss","./src/styles/2-modules/alert/_alert-theme.scss","./src/styles/2-modules/api-list/_api-list-theme.scss","./src/styles/2-modules/buttons/_buttons-theme.scss","./src/styles/2-modules/callout/_callout-theme.scss","./src/styles/2-modules/card/_card-theme.scss","./src/styles/2-modules/code/_code-theme.scss","./src/styles/2-modules/contributor/_contributor-theme.scss","./src/styles/2-modules/details/_details-theme.scss","./src/styles/2-modules/filetree/_filetree-theme.scss","./src/styles/2-modules/heading-anchors/_heading-anchors-theme.scss","./src/styles/2-modules/hr/_hr-theme.scss","./src/styles/2-modules/images/_images-theme.scss","./src/styles/2-modules/label/_label-theme.scss","./src/styles/2-modules/notification/_notification-theme.scss","./src/styles/2-modules/presskit/_presskit-theme.scss","./src/styles/2-modules/resources/_resources-theme.scss","./src/styles/2-modules/search-results/_search-results-theme.scss","./src/styles/2-modules/select-menu/_select-menu-theme.scss","./src/styles/2-modules/table/_table-theme.scss","./src/styles/2-modules/toc/_toc-theme.scss"],"sourcesContent":["@use './constants';\n\n/************************************\n\n             Media queries\n\n To use these, put this snippet in the appropriate selector:\n\n     @include bp(tiny) {\n         background-color: purple;\n     }\n\n     Replace \"tiny\" with \"medium\" or \"big\" as necessary.\n*************************************/\n\n@mixin bp($point) {\n  $bp-xsmall: \"(min-width: 320px)\";\n  $bp-teeny: \"(min-width: 480px)\";\n  $bp-tiny: \"(min-width: 600px)\";\n  $bp-small: \"(min-width: 650px)\";\n  $bp-medium: \"(min-width: 800px)\";\n  $bp-big: \"(min-width: 1000px)\";\n\n  @if $point == big {\n    @media #{$bp-big} { @content; }\n  }\n  @else if $point == medium {\n    @media #{$bp-medium} { @content; }\n  }\n  @else if $point == small {\n    @media #{$bp-small}  { @content; }\n  }\n  @else if $point == tiny {\n    @media #{$bp-tiny}  { @content; }\n  }\n  @else if $point == teeny {\n    @media #{$bp-teeny}  { @content; }\n  }\n  @else if $point == xsmall {\n    @media #{$bp-xsmall}  { @content; }\n  }\n}\n\n@mixin rotate($degrees) {\n  -moz-transform: rotate($degrees);\n  -webkit-transform: rotate($degrees);\n  -o-transform: rotate($degrees);\n  -ms-transform: rotate($degrees);\n  transform: rotate($degrees);\n  transition: transform 150ms;\n  transition-timing-function: ease-in-out;\n}\n\n@mixin codeblock($bgcolor) {\n    background-color: $bgcolor;\n    border-radius: 5px;\n    padding: 20px;\n    margin: 0 auto; // was 24\n    border: 0.5px solid constants.$lightgray;\n}\n\n// INFO CARD SKELETON\n@mixin card($height, $width) {\n  height: $height;\n  width: $width;\n  border-radius: 4px;\n  box-shadow: 0 2px 2px rgba(constants.$black, 0.24), 0 0 2px rgba(constants.$black, 0.12);\n  box-sizing: border-box;\n  transition: box-shadow .5s;\n\n  &:hover {\n    box-shadow: 0 8px 8px rgba(constants.$black, 0.24), 0 0 8px rgba(constants.$black, 0.12);\n    text-decoration: none;\n  }\n}\n\n@mixin typescale-display {\n  font-size: 26px;\n  line-height: 32px;\n}\n\n@mixin typescale-xlarge {\n  font-size: 24px;\n  line-height: 30px;\n}\n\n@mixin typescale-large {\n  font-size: 20px;\n  line-height: 28px;\n}\n\n@mixin typescale-default {\n  font-size: 16px;\n  line-height: 24px;\n}\n\n@mixin typescale-small {\n  font-size: 14px;\n  line-height: 20px;\n}\n","@use '@angular/material' as mat;\n\n@use './mixins';\n\n$dull-magenta: (\n  50: #f6e7f9,\n  100: #eac3f1,\n  200: #dc9be7,\n  300: #cd72dd,\n  400: #c354d6,\n  500: #b836cf,\n  600: #b130ca,\n  700: #a829c3,\n  800: #a022bd,\n  900: #9116b2,\n  A100: #f9e5ff,\n  A200: #edb2ff,\n  A400: #e27fff,\n  A700: #dc65ff,\n  contrast: (\n    50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #000000,\n    500: #ffffff,\n    600: #ffffff,\n    700: #ffffff,\n    800: #ffffff,\n    900: #ffffff,\n    A100: #000000,\n    A200: #000000,\n    A400: #000000,\n    A700: #000000,\n  ),\n);\n$gold: (\n  50: #fff5e7,\n  100: #fee6c4,\n  200: #fed69d,\n  300: #fec576,\n  400: #fdb858,\n  500: #fdac3b,\n  600: #fda535,\n  700: #fc9b2d,\n  800: #fc9226,\n  900: #fc8219,\n  A100: #ffffff,\n  A200: #fffcfa,\n  A400: #ffdfc7,\n  A700: #ffd1ad,\n  contrast: (\n    50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #000000,\n    500: #000000,\n    600: #000000,\n    700: #000000,\n    800: #000000,\n    900: #000000,\n    A100: #000000,\n    A200: #000000,\n    A400: #000000,\n    A700: #000000,\n  ),\n);\naio-shell.page-home {\n  .prettyprint-scroller {\n    overflow: auto;\n    display: block;\n    max-width: 100%;\n  }\n  pre.prettyprint {\n    border: none;\n    padding: 1rem 2rem;\n    margin: 0;\n    border-radius: 3px;\n    font-family: 'PT Mono', monospace;\n    font-weight: normal;\n    font-size: 13px;\n    line-height: 1.6em;\n    display: inline-block;\n    background-color: rgba(0, 0, 0, 0.3);\n    @media screen and (max-width: 600px) {\n      min-width: 460px;\n    }\n  }\n\n  // just for safari on ios\n  @media not all and (min-resolution: 0.001dpcm) {\n    @supports (-webkit-appearance: none) {\n      pre.prettyprint {\n        @media screen and (max-width: 600px) {\n          min-width: 680px;\n        }\n      }\n    }\n  }\n\n  pre .nocode {\n    background-color: none;\n    color: #000;\n  }\n  pre .str {\n    color: mat.get-color-from-palette($dull-magenta, 100);\n  }\n  /* string  - pink */\n  pre .kwd {\n    color: #f0e68c;\n    font-weight: bold;\n  }\n  pre .com {\n    color: #87ceeb;\n  }\n  /* comment - skyblue */\n  pre .typ {\n    color: mat.get-color-from-palette($gold, 300);\n  }\n  /* type    - lightgreen */\n  pre .lit {\n    color: mat.get-color-from-palette($dull-magenta, 300);\n  }\n  /* literal - darkred */\n  pre .pun {\n    color: #fff;\n  }\n  /* punctuation */\n  pre .pln {\n    color: #fff;\n  }\n  /* plaintext */\n  pre .tag {\n    color: #f0e68c;\n    font-weight: bold;\n  }\n  /* html/xml tag    - lightyellow */\n  pre .atn {\n    color: #bdb76b;\n    font-weight: bold;\n  }\n  /* attribute name  - khaki */\n  pre .atv {\n    color: mat.get-color-from-palette($dull-magenta, 100);\n  }\n  /* attribute value - pink */\n  pre .dec {\n    color: mat.get-color-from-palette($gold, 300);\n  }\n  /* decimal         - lightgreen */\n  /* Specify class=linenums on a pre to get line numbering */\n  ol.linenums {\n    margin-top: 0;\n    margin-bottom: 0;\n    color: #aeaeae;\n  }\n  /* IE indents via margin-left */\n  li.L0,\n  li.L1,\n  li.L2,\n  li.L3,\n  li.L5,\n  li.L6,\n  li.L7,\n  li.L8 {\n    list-style-type: none;\n  }\n  /* Alternate shading for lines */\n  li.L1,\n  li.L3,\n  li.L5,\n  li.L7,\n  li.L9 {\n  }\n}\nngrx-circles circle {\n  fill: white;\n}\nngrx-circles[color='primary'] circle {\n  fill: mat.get-color-from-palette($dull-magenta, 500);\n}\nngrx-circles[color='accent'] circle {\n  fill: mat.get-color-from-palette($gold, 500);\n}\nngrx-circles {\n  @for $i from 1 to 10 {\n    g:nth-of-type(#{$i}) {\n      transform: translate(100px, 100px)\n        rotate(#{20deg * ($i - 1)})\n        translate(-100px, -100px)\n        translate(95px, 5px);\n    }\n  }\n}\n","/************************************\n\n             Media queries\n\n To use these, put this snippet in the appropriate selector:\n\n     @include bp(tiny) {\n         background-color: purple;\n     }\n\n     Replace \"tiny\" with \"medium\" or \"big\" as necessary.\n*************************************/\naio-shell.page-home {\n  /* string  - pink */\n  /* comment - skyblue */\n  /* type    - lightgreen */\n  /* literal - darkred */\n  /* punctuation */\n  /* plaintext */\n  /* html/xml tag    - lightyellow */\n  /* attribute name  - khaki */\n  /* attribute value - pink */\n  /* decimal         - lightgreen */\n  /* Specify class=linenums on a pre to get line numbering */\n  /* IE indents via margin-left */\n  /* Alternate shading for lines */\n}\naio-shell.page-home .prettyprint-scroller {\n  overflow: auto;\n  display: block;\n  max-width: 100%;\n}\naio-shell.page-home pre.prettyprint {\n  border: none;\n  padding: 1rem 2rem;\n  margin: 0;\n  border-radius: 3px;\n  font-family: \"PT Mono\", monospace;\n  font-weight: normal;\n  font-size: 13px;\n  line-height: 1.6em;\n  display: inline-block;\n  background-color: rgba(0, 0, 0, 0.3);\n}\n@media screen and (max-width: 600px) {\n  aio-shell.page-home pre.prettyprint {\n    min-width: 460px;\n  }\n}\n@media not all and (min-resolution: 0.001dpcm) {\n  @supports (-webkit-appearance: none) {\n    @media screen and (max-width: 600px) {\n      aio-shell.page-home pre.prettyprint {\n        min-width: 680px;\n      }\n    }\n  }\n}\naio-shell.page-home pre .nocode {\n  background-color: none;\n  color: #000;\n}\naio-shell.page-home pre .str {\n  color: #eac3f1;\n}\naio-shell.page-home pre .kwd {\n  color: #f0e68c;\n  font-weight: bold;\n}\naio-shell.page-home pre .com {\n  color: #87ceeb;\n}\naio-shell.page-home pre .typ {\n  color: #fec576;\n}\naio-shell.page-home pre .lit {\n  color: #cd72dd;\n}\naio-shell.page-home pre .pun {\n  color: #fff;\n}\naio-shell.page-home pre .pln {\n  color: #fff;\n}\naio-shell.page-home pre .tag {\n  color: #f0e68c;\n  font-weight: bold;\n}\naio-shell.page-home pre .atn {\n  color: #bdb76b;\n  font-weight: bold;\n}\naio-shell.page-home pre .atv {\n  color: #eac3f1;\n}\naio-shell.page-home pre .dec {\n  color: #fec576;\n}\naio-shell.page-home ol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #aeaeae;\n}\naio-shell.page-home li.L0,\naio-shell.page-home li.L1,\naio-shell.page-home li.L2,\naio-shell.page-home li.L3,\naio-shell.page-home li.L5,\naio-shell.page-home li.L6,\naio-shell.page-home li.L7,\naio-shell.page-home li.L8 {\n  list-style-type: none;\n}\nngrx-circles circle {\n  fill: white;\n}\n\nngrx-circles[color=primary] circle {\n  fill: #b836cf;\n}\n\nngrx-circles[color=accent] circle {\n  fill: #fdac3b;\n}\n\nngrx-circles g:nth-of-type(1) {\n  transform: translate(100px, 100px) rotate(0deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(2) {\n  transform: translate(100px, 100px) rotate(20deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(3) {\n  transform: translate(100px, 100px) rotate(40deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(4) {\n  transform: translate(100px, 100px) rotate(60deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(5) {\n  transform: translate(100px, 100px) rotate(80deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(6) {\n  transform: translate(100px, 100px) rotate(100deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(7) {\n  transform: translate(100px, 100px) rotate(120deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(8) {\n  transform: translate(100px, 100px) rotate(140deg) translate(-100px, -100px) translate(95px, 5px);\n}\nngrx-circles g:nth-of-type(9) {\n  transform: translate(100px, 100px) rotate(160deg) translate(-100px, -100px) translate(95px, 5px);\n}\n\naio-shell.mode-archive .mat-toolbar.mat-primary, aio-shell.mode-archive footer {\n  background: linear-gradient(145deg, #263238, #78909C);\n}\naio-shell.mode-archive .vertical-menu-item.selected, aio-shell.mode-archive .vertical-menu-item:hover {\n  color: #263238;\n}\naio-shell.mode-archive .toc-inner ul.toc-list li.active a {\n  color: #263238;\n}\naio-shell.mode-archive .toc-inner ul.toc-list li.active a:before {\n  background-color: #263238;\n}\naio-shell.mode-archive .toc-inner ul.toc-list li:hover a {\n  color: #263238;\n}\n\naio-shell.mode-next footer {\n  background: linear-gradient(145deg, #84438a, #84438a);\n}\naio-shell.mode-next .vertical-menu-item.selected, aio-shell.mode-next .vertical-menu-item:hover {\n  color: #84438a;\n}\naio-shell.mode-next .toc-inner ul.toc-list li.active a {\n  color: #84438a;\n}\naio-shell.mode-next .toc-inner ul.toc-list li.active a:before {\n  background-color: #84438a;\n}\naio-shell.mode-next .toc-inner ul.toc-list li:hover a {\n  color: #84438a;\n}\n\nhtml {\n  --mat-ripple-color: rgba(0, 0, 0, 0.1);\n}\n\nhtml {\n  --mat-option-selected-state-label-text-color: #a829c3;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\n.mat-accent {\n  --mat-option-selected-state-label-text-color: #fc9b2d;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\n.mat-warn {\n  --mat-option-selected-state-label-text-color: #f44336;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\nhtml {\n  --mat-optgroup-label-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-primary {\n  --mat-full-pseudo-checkbox-selected-icon-color: #a829c3;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #a829c3;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\nhtml {\n  --mat-full-pseudo-checkbox-selected-icon-color: #fc9b2d;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #fc9b2d;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\n.mat-accent {\n  --mat-full-pseudo-checkbox-selected-icon-color: #fc9b2d;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #fc9b2d;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\n.mat-warn {\n  --mat-full-pseudo-checkbox-selected-icon-color: #f44336;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #f44336;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\nhtml {\n  --mat-app-background-color: #fafafa;\n  --mat-app-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-elevation-z0, .mat-mdc-elevation-specific.mat-elevation-z0 {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z1, .mat-mdc-elevation-specific.mat-elevation-z1 {\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z2, .mat-mdc-elevation-specific.mat-elevation-z2 {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z3, .mat-mdc-elevation-specific.mat-elevation-z3 {\n  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z4, .mat-mdc-elevation-specific.mat-elevation-z4 {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z5, .mat-mdc-elevation-specific.mat-elevation-z5 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z6, .mat-mdc-elevation-specific.mat-elevation-z6 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z7, .mat-mdc-elevation-specific.mat-elevation-z7 {\n  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z8, .mat-mdc-elevation-specific.mat-elevation-z8 {\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z9, .mat-mdc-elevation-specific.mat-elevation-z9 {\n  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z10, .mat-mdc-elevation-specific.mat-elevation-z10 {\n  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z11, .mat-mdc-elevation-specific.mat-elevation-z11 {\n  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z12, .mat-mdc-elevation-specific.mat-elevation-z12 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z13, .mat-mdc-elevation-specific.mat-elevation-z13 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z14, .mat-mdc-elevation-specific.mat-elevation-z14 {\n  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z15, .mat-mdc-elevation-specific.mat-elevation-z15 {\n  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z16, .mat-mdc-elevation-specific.mat-elevation-z16 {\n  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z17, .mat-mdc-elevation-specific.mat-elevation-z17 {\n  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z18, .mat-mdc-elevation-specific.mat-elevation-z18 {\n  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z19, .mat-mdc-elevation-specific.mat-elevation-z19 {\n  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z20, .mat-mdc-elevation-specific.mat-elevation-z20 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z21, .mat-mdc-elevation-specific.mat-elevation-z21 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z22, .mat-mdc-elevation-specific.mat-elevation-z22 {\n  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z23, .mat-mdc-elevation-specific.mat-elevation-z23 {\n  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z24, .mat-mdc-elevation-specific.mat-elevation-z24 {\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\n.mat-theme-loaded-marker {\n  display: none;\n}\n\nhtml {\n  --mat-option-label-text-font: Roboto, sans-serif;\n  --mat-option-label-text-line-height: 24px;\n  --mat-option-label-text-size: 16px;\n  --mat-option-label-text-tracking: 0.03125em;\n  --mat-option-label-text-weight: 400;\n}\n\nhtml {\n  --mat-optgroup-label-text-font: Roboto, sans-serif;\n  --mat-optgroup-label-text-line-height: 24px;\n  --mat-optgroup-label-text-size: 16px;\n  --mat-optgroup-label-text-tracking: 0.03125em;\n  --mat-optgroup-label-text-weight: 400;\n}\n\nhtml {\n  --mat-ripple-color: rgba(0, 0, 0, 0.1);\n}\n\nhtml {\n  --mat-option-selected-state-label-text-color: #a829c3;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\n.mat-accent {\n  --mat-option-selected-state-label-text-color: #fc9b2d;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\n.mat-warn {\n  --mat-option-selected-state-label-text-color: #f44336;\n  --mat-option-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-option-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-option-selected-state-layer-color: rgba(0, 0, 0, 0.04);\n}\n\nhtml {\n  --mat-optgroup-label-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-primary {\n  --mat-full-pseudo-checkbox-selected-icon-color: #a829c3;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #a829c3;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\nhtml {\n  --mat-full-pseudo-checkbox-selected-icon-color: #fc9b2d;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #fc9b2d;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\n.mat-accent {\n  --mat-full-pseudo-checkbox-selected-icon-color: #fc9b2d;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #fc9b2d;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\n.mat-warn {\n  --mat-full-pseudo-checkbox-selected-icon-color: #f44336;\n  --mat-full-pseudo-checkbox-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-full-pseudo-checkbox-disabled-selected-checkmark-color: #fafafa;\n  --mat-full-pseudo-checkbox-disabled-unselected-icon-color: #b0b0b0;\n  --mat-full-pseudo-checkbox-disabled-selected-icon-color: #b0b0b0;\n  --mat-minimal-pseudo-checkbox-selected-checkmark-color: #f44336;\n  --mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color: #b0b0b0;\n}\n\nhtml {\n  --mat-app-background-color: #fafafa;\n  --mat-app-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-elevation-z0, .mat-mdc-elevation-specific.mat-elevation-z0 {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z1, .mat-mdc-elevation-specific.mat-elevation-z1 {\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z2, .mat-mdc-elevation-specific.mat-elevation-z2 {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z3, .mat-mdc-elevation-specific.mat-elevation-z3 {\n  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z4, .mat-mdc-elevation-specific.mat-elevation-z4 {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z5, .mat-mdc-elevation-specific.mat-elevation-z5 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z6, .mat-mdc-elevation-specific.mat-elevation-z6 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z7, .mat-mdc-elevation-specific.mat-elevation-z7 {\n  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z8, .mat-mdc-elevation-specific.mat-elevation-z8 {\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z9, .mat-mdc-elevation-specific.mat-elevation-z9 {\n  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z10, .mat-mdc-elevation-specific.mat-elevation-z10 {\n  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z11, .mat-mdc-elevation-specific.mat-elevation-z11 {\n  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z12, .mat-mdc-elevation-specific.mat-elevation-z12 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z13, .mat-mdc-elevation-specific.mat-elevation-z13 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z14, .mat-mdc-elevation-specific.mat-elevation-z14 {\n  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z15, .mat-mdc-elevation-specific.mat-elevation-z15 {\n  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z16, .mat-mdc-elevation-specific.mat-elevation-z16 {\n  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z17, .mat-mdc-elevation-specific.mat-elevation-z17 {\n  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z18, .mat-mdc-elevation-specific.mat-elevation-z18 {\n  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z19, .mat-mdc-elevation-specific.mat-elevation-z19 {\n  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z20, .mat-mdc-elevation-specific.mat-elevation-z20 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z21, .mat-mdc-elevation-specific.mat-elevation-z21 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z22, .mat-mdc-elevation-specific.mat-elevation-z22 {\n  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z23, .mat-mdc-elevation-specific.mat-elevation-z23 {\n  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12);\n}\n\n.mat-elevation-z24, .mat-mdc-elevation-specific.mat-elevation-z24 {\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\n.mat-theme-loaded-marker {\n  display: none;\n}\n\nhtml {\n  --mat-option-label-text-font: Roboto, sans-serif;\n  --mat-option-label-text-line-height: 24px;\n  --mat-option-label-text-size: 16px;\n  --mat-option-label-text-tracking: 0.03125em;\n  --mat-option-label-text-weight: 400;\n}\n\nhtml {\n  --mat-optgroup-label-text-font: Roboto, sans-serif;\n  --mat-optgroup-label-text-line-height: 24px;\n  --mat-optgroup-label-text-size: 16px;\n  --mat-optgroup-label-text-tracking: 0.03125em;\n  --mat-optgroup-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-elevated-card-container-shape: 4px;\n  --mdc-outlined-card-container-shape: 4px;\n  --mdc-outlined-card-outline-width: 1px;\n}\n\nhtml {\n  --mdc-elevated-card-container-color: white;\n  --mdc-elevated-card-container-elevation: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  --mdc-outlined-card-container-color: white;\n  --mdc-outlined-card-outline-color: rgba(0, 0, 0, 0.12);\n  --mdc-outlined-card-container-elevation: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n  --mat-card-subtitle-text-color: rgba(0, 0, 0, 0.54);\n}\n\nhtml {\n  --mat-card-title-text-font: Roboto, sans-serif;\n  --mat-card-title-text-line-height: 32px;\n  --mat-card-title-text-size: 20px;\n  --mat-card-title-text-tracking: 0.0125em;\n  --mat-card-title-text-weight: 500;\n  --mat-card-subtitle-text-font: Roboto, sans-serif;\n  --mat-card-subtitle-text-line-height: 22px;\n  --mat-card-subtitle-text-size: 14px;\n  --mat-card-subtitle-text-tracking: 0.0071428571em;\n  --mat-card-subtitle-text-weight: 500;\n}\n\nhtml {\n  --mdc-linear-progress-active-indicator-height: 4px;\n  --mdc-linear-progress-track-height: 4px;\n  --mdc-linear-progress-track-shape: 0;\n}\n\n.mat-mdc-progress-bar {\n  --mdc-linear-progress-active-indicator-color: #a829c3;\n  --mdc-linear-progress-track-color: rgba(168, 41, 195, 0.25);\n}\n.mat-mdc-progress-bar.mat-accent {\n  --mdc-linear-progress-active-indicator-color: #fc9b2d;\n  --mdc-linear-progress-track-color: rgba(252, 155, 45, 0.25);\n}\n.mat-mdc-progress-bar.mat-warn {\n  --mdc-linear-progress-active-indicator-color: #f44336;\n  --mdc-linear-progress-track-color: rgba(244, 67, 54, 0.25);\n}\n\nhtml {\n  --mdc-plain-tooltip-container-shape: 4px;\n  --mdc-plain-tooltip-supporting-text-line-height: 16px;\n}\n\nhtml {\n  --mdc-plain-tooltip-container-color: #616161;\n  --mdc-plain-tooltip-supporting-text-color: #fff;\n}\n\nhtml {\n  --mdc-plain-tooltip-supporting-text-font: Roboto, sans-serif;\n  --mdc-plain-tooltip-supporting-text-size: 12px;\n  --mdc-plain-tooltip-supporting-text-weight: 400;\n  --mdc-plain-tooltip-supporting-text-tracking: 0.0333333333em;\n}\n\nhtml {\n  --mdc-filled-text-field-active-indicator-height: 1px;\n  --mdc-filled-text-field-focus-active-indicator-height: 2px;\n  --mdc-filled-text-field-container-shape: 4px;\n  --mdc-outlined-text-field-outline-width: 1px;\n  --mdc-outlined-text-field-focus-outline-width: 2px;\n  --mdc-outlined-text-field-container-shape: 4px;\n}\n\nhtml {\n  --mdc-filled-text-field-caret-color: #a829c3;\n  --mdc-filled-text-field-focus-active-indicator-color: #a829c3;\n  --mdc-filled-text-field-focus-label-text-color: rgba(168, 41, 195, 0.87);\n  --mdc-filled-text-field-container-color: whitesmoke;\n  --mdc-filled-text-field-disabled-container-color: #fafafa;\n  --mdc-filled-text-field-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-filled-text-field-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-filled-text-field-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-filled-text-field-input-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-filled-text-field-disabled-input-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-filled-text-field-input-text-placeholder-color: rgba(0, 0, 0, 0.6);\n  --mdc-filled-text-field-error-hover-label-text-color: #f44336;\n  --mdc-filled-text-field-error-focus-label-text-color: #f44336;\n  --mdc-filled-text-field-error-label-text-color: #f44336;\n  --mdc-filled-text-field-error-caret-color: #f44336;\n  --mdc-filled-text-field-active-indicator-color: rgba(0, 0, 0, 0.42);\n  --mdc-filled-text-field-disabled-active-indicator-color: rgba(0, 0, 0, 0.06);\n  --mdc-filled-text-field-hover-active-indicator-color: rgba(0, 0, 0, 0.87);\n  --mdc-filled-text-field-error-active-indicator-color: #f44336;\n  --mdc-filled-text-field-error-focus-active-indicator-color: #f44336;\n  --mdc-filled-text-field-error-hover-active-indicator-color: #f44336;\n  --mdc-outlined-text-field-caret-color: #a829c3;\n  --mdc-outlined-text-field-focus-outline-color: #a829c3;\n  --mdc-outlined-text-field-focus-label-text-color: rgba(168, 41, 195, 0.87);\n  --mdc-outlined-text-field-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-outlined-text-field-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mdc-outlined-text-field-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-text-field-input-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-outlined-text-field-disabled-input-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-text-field-input-text-placeholder-color: rgba(0, 0, 0, 0.6);\n  --mdc-outlined-text-field-error-caret-color: #f44336;\n  --mdc-outlined-text-field-error-focus-label-text-color: #f44336;\n  --mdc-outlined-text-field-error-label-text-color: #f44336;\n  --mdc-outlined-text-field-error-hover-label-text-color: #f44336;\n  --mdc-outlined-text-field-outline-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-text-field-disabled-outline-color: rgba(0, 0, 0, 0.06);\n  --mdc-outlined-text-field-hover-outline-color: rgba(0, 0, 0, 0.87);\n  --mdc-outlined-text-field-error-focus-outline-color: #f44336;\n  --mdc-outlined-text-field-error-hover-outline-color: #f44336;\n  --mdc-outlined-text-field-error-outline-color: #f44336;\n  --mat-form-field-focus-select-arrow-color: rgba(168, 41, 195, 0.87);\n  --mat-form-field-disabled-input-text-placeholder-color: rgba(0, 0, 0, 0.38);\n  --mat-form-field-state-layer-color: rgba(0, 0, 0, 0.87);\n  --mat-form-field-error-text-color: #f44336;\n  --mat-form-field-select-option-text-color: inherit;\n  --mat-form-field-select-disabled-option-text-color: GrayText;\n  --mat-form-field-leading-icon-color: unset;\n  --mat-form-field-disabled-leading-icon-color: unset;\n  --mat-form-field-trailing-icon-color: unset;\n  --mat-form-field-disabled-trailing-icon-color: unset;\n  --mat-form-field-error-focus-trailing-icon-color: unset;\n  --mat-form-field-error-hover-trailing-icon-color: unset;\n  --mat-form-field-error-trailing-icon-color: unset;\n  --mat-form-field-enabled-select-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-form-field-disabled-select-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-form-field-hover-state-layer-opacity: 0.04;\n  --mat-form-field-focus-state-layer-opacity: 0.08;\n}\n\n.mat-mdc-form-field.mat-accent {\n  --mdc-filled-text-field-caret-color: #fc9b2d;\n  --mdc-filled-text-field-focus-active-indicator-color: #fc9b2d;\n  --mdc-filled-text-field-focus-label-text-color: rgba(252, 155, 45, 0.87);\n  --mdc-outlined-text-field-caret-color: #fc9b2d;\n  --mdc-outlined-text-field-focus-outline-color: #fc9b2d;\n  --mdc-outlined-text-field-focus-label-text-color: rgba(252, 155, 45, 0.87);\n  --mat-form-field-focus-select-arrow-color: rgba(252, 155, 45, 0.87);\n}\n\n.mat-mdc-form-field.mat-warn {\n  --mdc-filled-text-field-caret-color: #f44336;\n  --mdc-filled-text-field-focus-active-indicator-color: #f44336;\n  --mdc-filled-text-field-focus-label-text-color: rgba(244, 67, 54, 0.87);\n  --mdc-outlined-text-field-caret-color: #f44336;\n  --mdc-outlined-text-field-focus-outline-color: #f44336;\n  --mdc-outlined-text-field-focus-label-text-color: rgba(244, 67, 54, 0.87);\n  --mat-form-field-focus-select-arrow-color: rgba(244, 67, 54, 0.87);\n}\n\nhtml {\n  --mat-form-field-container-height: 56px;\n  --mat-form-field-filled-label-display: block;\n  --mat-form-field-container-vertical-padding: 16px;\n  --mat-form-field-filled-with-label-container-padding-top: 24px;\n  --mat-form-field-filled-with-label-container-padding-bottom: 8px;\n}\n\nhtml {\n  --mdc-filled-text-field-label-text-font: Roboto, sans-serif;\n  --mdc-filled-text-field-label-text-size: 16px;\n  --mdc-filled-text-field-label-text-tracking: 0.03125em;\n  --mdc-filled-text-field-label-text-weight: 400;\n  --mdc-outlined-text-field-label-text-font: Roboto, sans-serif;\n  --mdc-outlined-text-field-label-text-size: 16px;\n  --mdc-outlined-text-field-label-text-tracking: 0.03125em;\n  --mdc-outlined-text-field-label-text-weight: 400;\n  --mat-form-field-container-text-font: Roboto, sans-serif;\n  --mat-form-field-container-text-line-height: 24px;\n  --mat-form-field-container-text-size: 16px;\n  --mat-form-field-container-text-tracking: 0.03125em;\n  --mat-form-field-container-text-weight: 400;\n  --mat-form-field-outlined-label-text-populated-size: 16px;\n  --mat-form-field-subscript-text-font: Roboto, sans-serif;\n  --mat-form-field-subscript-text-line-height: 20px;\n  --mat-form-field-subscript-text-size: 12px;\n  --mat-form-field-subscript-text-tracking: 0.0333333333em;\n  --mat-form-field-subscript-text-weight: 400;\n}\n\nhtml {\n  --mat-select-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-select-panel-background-color: white;\n  --mat-select-enabled-trigger-text-color: rgba(0, 0, 0, 0.87);\n  --mat-select-disabled-trigger-text-color: rgba(0, 0, 0, 0.38);\n  --mat-select-placeholder-text-color: rgba(0, 0, 0, 0.6);\n  --mat-select-enabled-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-select-disabled-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-select-focused-arrow-color: rgba(168, 41, 195, 0.87);\n  --mat-select-invalid-arrow-color: rgba(244, 67, 54, 0.87);\n}\nhtml .mat-mdc-form-field.mat-accent {\n  --mat-select-panel-background-color: white;\n  --mat-select-enabled-trigger-text-color: rgba(0, 0, 0, 0.87);\n  --mat-select-disabled-trigger-text-color: rgba(0, 0, 0, 0.38);\n  --mat-select-placeholder-text-color: rgba(0, 0, 0, 0.6);\n  --mat-select-enabled-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-select-disabled-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-select-focused-arrow-color: rgba(252, 155, 45, 0.87);\n  --mat-select-invalid-arrow-color: rgba(244, 67, 54, 0.87);\n}\nhtml .mat-mdc-form-field.mat-warn {\n  --mat-select-panel-background-color: white;\n  --mat-select-enabled-trigger-text-color: rgba(0, 0, 0, 0.87);\n  --mat-select-disabled-trigger-text-color: rgba(0, 0, 0, 0.38);\n  --mat-select-placeholder-text-color: rgba(0, 0, 0, 0.6);\n  --mat-select-enabled-arrow-color: rgba(0, 0, 0, 0.54);\n  --mat-select-disabled-arrow-color: rgba(0, 0, 0, 0.38);\n  --mat-select-focused-arrow-color: rgba(244, 67, 54, 0.87);\n  --mat-select-invalid-arrow-color: rgba(244, 67, 54, 0.87);\n}\n\nhtml {\n  --mat-select-arrow-transform: translateY(-8px);\n}\n\nhtml {\n  --mat-select-trigger-text-font: Roboto, sans-serif;\n  --mat-select-trigger-text-line-height: 24px;\n  --mat-select-trigger-text-size: 16px;\n  --mat-select-trigger-text-tracking: 0.03125em;\n  --mat-select-trigger-text-weight: 400;\n}\n\nhtml {\n  --mat-autocomplete-container-shape: 4px;\n  --mat-autocomplete-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-autocomplete-background-color: white;\n}\n\nhtml {\n  --mdc-dialog-container-elevation-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n  --mdc-dialog-container-shadow-color: #000;\n  --mdc-dialog-container-shape: 4px;\n  --mat-dialog-container-max-width: 80vw;\n  --mat-dialog-container-small-max-width: 80vw;\n  --mat-dialog-container-min-width: 0;\n  --mat-dialog-actions-alignment: start;\n  --mat-dialog-actions-padding: 8px;\n  --mat-dialog-content-padding: 20px 24px;\n  --mat-dialog-with-actions-content-padding: 20px 24px;\n  --mat-dialog-headline-padding: 0 24px 9px;\n}\n\nhtml {\n  --mdc-dialog-container-color: white;\n  --mdc-dialog-subhead-color: rgba(0, 0, 0, 0.87);\n  --mdc-dialog-supporting-text-color: rgba(0, 0, 0, 0.6);\n}\n\nhtml {\n  --mdc-dialog-subhead-font: Roboto, sans-serif;\n  --mdc-dialog-subhead-line-height: 32px;\n  --mdc-dialog-subhead-size: 20px;\n  --mdc-dialog-subhead-weight: 500;\n  --mdc-dialog-subhead-tracking: 0.0125em;\n  --mdc-dialog-supporting-text-font: Roboto, sans-serif;\n  --mdc-dialog-supporting-text-line-height: 24px;\n  --mdc-dialog-supporting-text-size: 16px;\n  --mdc-dialog-supporting-text-weight: 400;\n  --mdc-dialog-supporting-text-tracking: 0.03125em;\n}\n\n.mat-mdc-standard-chip {\n  --mdc-chip-container-shape-family: rounded;\n  --mdc-chip-container-shape-radius: 16px 16px 16px 16px;\n  --mdc-chip-with-avatar-avatar-shape-family: rounded;\n  --mdc-chip-with-avatar-avatar-shape-radius: 14px 14px 14px 14px;\n  --mdc-chip-with-avatar-avatar-size: 28px;\n  --mdc-chip-with-icon-icon-size: 18px;\n  --mdc-chip-outline-width: 0;\n  --mdc-chip-outline-color: transparent;\n  --mdc-chip-disabled-outline-color: transparent;\n  --mdc-chip-focus-outline-color: transparent;\n  --mdc-chip-hover-state-layer-opacity: 0.04;\n  --mdc-chip-with-avatar-disabled-avatar-opacity: 1;\n  --mdc-chip-flat-selected-outline-width: 0;\n  --mdc-chip-selected-hover-state-layer-opacity: 0.04;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-opacity: 1;\n  --mdc-chip-with-icon-disabled-icon-opacity: 1;\n  --mat-chip-disabled-container-opacity: 0.4;\n  --mat-chip-trailing-action-opacity: 0.54;\n  --mat-chip-trailing-action-focus-opacity: 1;\n  --mat-chip-trailing-action-state-layer-color: transparent;\n  --mat-chip-selected-trailing-action-state-layer-color: transparent;\n  --mat-chip-trailing-action-hover-state-layer-opacity: 0;\n  --mat-chip-trailing-action-focus-state-layer-opacity: 0;\n}\n\n.mat-mdc-standard-chip {\n  --mdc-chip-disabled-label-text-color: #212121;\n  --mdc-chip-elevated-container-color: #e0e0e0;\n  --mdc-chip-elevated-selected-container-color: #e0e0e0;\n  --mdc-chip-elevated-disabled-container-color: #e0e0e0;\n  --mdc-chip-flat-disabled-selected-container-color: #e0e0e0;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: #212121;\n  --mdc-chip-selected-label-text-color: #212121;\n  --mdc-chip-with-icon-icon-color: #212121;\n  --mdc-chip-with-icon-disabled-icon-color: #212121;\n  --mdc-chip-with-icon-selected-icon-color: #212121;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: #212121;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: #212121;\n  --mat-chip-selected-disabled-trailing-icon-color: #212121;\n  --mat-chip-selected-trailing-icon-color: #212121;\n}\n.mat-mdc-standard-chip.mat-mdc-chip-selected.mat-primary, .mat-mdc-standard-chip.mat-mdc-chip-highlighted.mat-primary {\n  --mdc-chip-disabled-label-text-color: white;\n  --mdc-chip-elevated-container-color: #a829c3;\n  --mdc-chip-elevated-selected-container-color: #a829c3;\n  --mdc-chip-elevated-disabled-container-color: #a829c3;\n  --mdc-chip-flat-disabled-selected-container-color: #a829c3;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: white;\n  --mdc-chip-selected-label-text-color: white;\n  --mdc-chip-with-icon-icon-color: white;\n  --mdc-chip-with-icon-disabled-icon-color: white;\n  --mdc-chip-with-icon-selected-icon-color: white;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: white;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: white;\n  --mat-chip-selected-disabled-trailing-icon-color: white;\n  --mat-chip-selected-trailing-icon-color: white;\n}\n.mat-mdc-standard-chip.mat-mdc-chip-selected.mat-accent, .mat-mdc-standard-chip.mat-mdc-chip-highlighted.mat-accent {\n  --mdc-chip-disabled-label-text-color: black;\n  --mdc-chip-elevated-container-color: #fc9b2d;\n  --mdc-chip-elevated-selected-container-color: #fc9b2d;\n  --mdc-chip-elevated-disabled-container-color: #fc9b2d;\n  --mdc-chip-flat-disabled-selected-container-color: #fc9b2d;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: black;\n  --mdc-chip-selected-label-text-color: black;\n  --mdc-chip-with-icon-icon-color: black;\n  --mdc-chip-with-icon-disabled-icon-color: black;\n  --mdc-chip-with-icon-selected-icon-color: black;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: black;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: black;\n  --mat-chip-selected-disabled-trailing-icon-color: black;\n  --mat-chip-selected-trailing-icon-color: black;\n}\n.mat-mdc-standard-chip.mat-mdc-chip-selected.mat-warn, .mat-mdc-standard-chip.mat-mdc-chip-highlighted.mat-warn {\n  --mdc-chip-disabled-label-text-color: white;\n  --mdc-chip-elevated-container-color: #f44336;\n  --mdc-chip-elevated-selected-container-color: #f44336;\n  --mdc-chip-elevated-disabled-container-color: #f44336;\n  --mdc-chip-flat-disabled-selected-container-color: #f44336;\n  --mdc-chip-focus-state-layer-color: black;\n  --mdc-chip-hover-state-layer-color: black;\n  --mdc-chip-selected-hover-state-layer-color: black;\n  --mdc-chip-focus-state-layer-opacity: 0.12;\n  --mdc-chip-selected-focus-state-layer-color: black;\n  --mdc-chip-selected-focus-state-layer-opacity: 0.12;\n  --mdc-chip-label-text-color: white;\n  --mdc-chip-selected-label-text-color: white;\n  --mdc-chip-with-icon-icon-color: white;\n  --mdc-chip-with-icon-disabled-icon-color: white;\n  --mdc-chip-with-icon-selected-icon-color: white;\n  --mdc-chip-with-trailing-icon-disabled-trailing-icon-color: white;\n  --mdc-chip-with-trailing-icon-trailing-icon-color: white;\n  --mat-chip-selected-disabled-trailing-icon-color: white;\n  --mat-chip-selected-trailing-icon-color: white;\n}\n\n.mat-mdc-chip.mat-mdc-standard-chip {\n  --mdc-chip-container-height: 32px;\n}\n\n.mat-mdc-standard-chip {\n  --mdc-chip-label-text-font: Roboto, sans-serif;\n  --mdc-chip-label-text-line-height: 20px;\n  --mdc-chip-label-text-size: 14px;\n  --mdc-chip-label-text-tracking: 0.0178571429em;\n  --mdc-chip-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-switch-disabled-selected-icon-opacity: 0.38;\n  --mdc-switch-disabled-track-opacity: 0.12;\n  --mdc-switch-disabled-unselected-icon-opacity: 0.38;\n  --mdc-switch-handle-height: 20px;\n  --mdc-switch-handle-shape: 10px;\n  --mdc-switch-handle-width: 20px;\n  --mdc-switch-selected-icon-size: 18px;\n  --mdc-switch-track-height: 14px;\n  --mdc-switch-track-shape: 7px;\n  --mdc-switch-track-width: 36px;\n  --mdc-switch-unselected-icon-size: 18px;\n  --mdc-switch-selected-focus-state-layer-opacity: 0.12;\n  --mdc-switch-selected-hover-state-layer-opacity: 0.04;\n  --mdc-switch-selected-pressed-state-layer-opacity: 0.1;\n  --mdc-switch-unselected-focus-state-layer-opacity: 0.12;\n  --mdc-switch-unselected-hover-state-layer-opacity: 0.04;\n  --mdc-switch-unselected-pressed-state-layer-opacity: 0.1;\n  --mat-switch-disabled-selected-handle-opacity: 0.38;\n  --mat-switch-disabled-unselected-handle-opacity: 0.38;\n  --mat-switch-unselected-handle-size: 20px;\n  --mat-switch-selected-handle-size: 20px;\n  --mat-switch-pressed-handle-size: 20px;\n  --mat-switch-with-icon-handle-size: 20px;\n  --mat-switch-selected-handle-horizontal-margin: 0;\n  --mat-switch-selected-with-icon-handle-horizontal-margin: 0;\n  --mat-switch-selected-pressed-handle-horizontal-margin: 0;\n  --mat-switch-unselected-handle-horizontal-margin: 0;\n  --mat-switch-unselected-with-icon-handle-horizontal-margin: 0;\n  --mat-switch-unselected-pressed-handle-horizontal-margin: 0;\n  --mat-switch-visible-track-opacity: 1;\n  --mat-switch-hidden-track-opacity: 1;\n  --mat-switch-visible-track-transition: transform 75ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  --mat-switch-hidden-track-transition: transform 75ms 0ms cubic-bezier(0.4, 0, 0.6, 1);\n  --mat-switch-track-outline-width: 1px;\n  --mat-switch-track-outline-color: transparent;\n  --mat-switch-disabled-unselected-track-outline-width: 1px;\n  --mat-switch-disabled-unselected-track-outline-color: transparent;\n}\n\nhtml {\n  --mdc-switch-selected-focus-state-layer-color: #b130ca;\n  --mdc-switch-selected-handle-color: #b130ca;\n  --mdc-switch-selected-hover-state-layer-color: #b130ca;\n  --mdc-switch-selected-pressed-state-layer-color: #b130ca;\n  --mdc-switch-selected-focus-handle-color: #9116b2;\n  --mdc-switch-selected-hover-handle-color: #9116b2;\n  --mdc-switch-selected-pressed-handle-color: #9116b2;\n  --mdc-switch-selected-focus-track-color: #cd72dd;\n  --mdc-switch-selected-hover-track-color: #cd72dd;\n  --mdc-switch-selected-pressed-track-color: #cd72dd;\n  --mdc-switch-selected-track-color: #cd72dd;\n  --mdc-switch-disabled-selected-handle-color: #424242;\n  --mdc-switch-disabled-selected-icon-color: #fff;\n  --mdc-switch-disabled-selected-track-color: #424242;\n  --mdc-switch-disabled-unselected-handle-color: #424242;\n  --mdc-switch-disabled-unselected-icon-color: #fff;\n  --mdc-switch-disabled-unselected-track-color: #424242;\n  --mdc-switch-handle-surface-color: var(--mdc-theme-surface, #fff);\n  --mdc-switch-handle-elevation-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  --mdc-switch-handle-shadow-color: black;\n  --mdc-switch-disabled-handle-elevation-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n  --mdc-switch-selected-icon-color: #fff;\n  --mdc-switch-unselected-focus-handle-color: #212121;\n  --mdc-switch-unselected-focus-state-layer-color: #424242;\n  --mdc-switch-unselected-focus-track-color: #e0e0e0;\n  --mdc-switch-unselected-handle-color: #616161;\n  --mdc-switch-unselected-hover-handle-color: #212121;\n  --mdc-switch-unselected-hover-state-layer-color: #424242;\n  --mdc-switch-unselected-hover-track-color: #e0e0e0;\n  --mdc-switch-unselected-icon-color: #fff;\n  --mdc-switch-unselected-pressed-handle-color: #212121;\n  --mdc-switch-unselected-pressed-state-layer-color: #424242;\n  --mdc-switch-unselected-pressed-track-color: #e0e0e0;\n  --mdc-switch-unselected-track-color: #e0e0e0;\n  --mdc-switch-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n}\nhtml .mat-mdc-slide-toggle {\n  --mdc-form-field-label-text-color: rgba(0, 0, 0, 0.87);\n}\nhtml .mat-mdc-slide-toggle.mat-accent {\n  --mdc-switch-selected-focus-state-layer-color: #fda535;\n  --mdc-switch-selected-handle-color: #fda535;\n  --mdc-switch-selected-hover-state-layer-color: #fda535;\n  --mdc-switch-selected-pressed-state-layer-color: #fda535;\n  --mdc-switch-selected-focus-handle-color: #fc8219;\n  --mdc-switch-selected-hover-handle-color: #fc8219;\n  --mdc-switch-selected-pressed-handle-color: #fc8219;\n  --mdc-switch-selected-focus-track-color: #fec576;\n  --mdc-switch-selected-hover-track-color: #fec576;\n  --mdc-switch-selected-pressed-track-color: #fec576;\n  --mdc-switch-selected-track-color: #fec576;\n}\nhtml .mat-mdc-slide-toggle.mat-warn {\n  --mdc-switch-selected-focus-state-layer-color: #e53935;\n  --mdc-switch-selected-handle-color: #e53935;\n  --mdc-switch-selected-hover-state-layer-color: #e53935;\n  --mdc-switch-selected-pressed-state-layer-color: #e53935;\n  --mdc-switch-selected-focus-handle-color: #b71c1c;\n  --mdc-switch-selected-hover-handle-color: #b71c1c;\n  --mdc-switch-selected-pressed-handle-color: #b71c1c;\n  --mdc-switch-selected-focus-track-color: #e57373;\n  --mdc-switch-selected-hover-track-color: #e57373;\n  --mdc-switch-selected-pressed-track-color: #e57373;\n  --mdc-switch-selected-track-color: #e57373;\n}\n\nhtml {\n  --mdc-switch-state-layer-size: 40px;\n}\n\nhtml .mat-mdc-slide-toggle {\n  --mdc-form-field-label-text-font: Roboto, sans-serif;\n  --mdc-form-field-label-text-line-height: 20px;\n  --mdc-form-field-label-text-size: 14px;\n  --mdc-form-field-label-text-tracking: 0.0178571429em;\n  --mdc-form-field-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-radio-disabled-selected-icon-opacity: 0.38;\n  --mdc-radio-disabled-unselected-icon-opacity: 0.38;\n  --mdc-radio-state-layer-size: 40px;\n}\n\n.mat-mdc-radio-button {\n  --mdc-form-field-label-text-color: rgba(0, 0, 0, 0.87);\n}\n.mat-mdc-radio-button.mat-primary {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #a829c3;\n  --mdc-radio-selected-hover-icon-color: #a829c3;\n  --mdc-radio-selected-icon-color: #a829c3;\n  --mdc-radio-selected-pressed-icon-color: #a829c3;\n  --mat-radio-ripple-color: #000;\n  --mat-radio-checked-ripple-color: #a829c3;\n  --mat-radio-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n.mat-mdc-radio-button.mat-accent {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #fc9b2d;\n  --mdc-radio-selected-hover-icon-color: #fc9b2d;\n  --mdc-radio-selected-icon-color: #fc9b2d;\n  --mdc-radio-selected-pressed-icon-color: #fc9b2d;\n  --mat-radio-ripple-color: #000;\n  --mat-radio-checked-ripple-color: #fc9b2d;\n  --mat-radio-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n.mat-mdc-radio-button.mat-warn {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #f44336;\n  --mdc-radio-selected-hover-icon-color: #f44336;\n  --mdc-radio-selected-icon-color: #f44336;\n  --mdc-radio-selected-pressed-icon-color: #f44336;\n  --mat-radio-ripple-color: #000;\n  --mat-radio-checked-ripple-color: #f44336;\n  --mat-radio-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n\nhtml {\n  --mdc-radio-state-layer-size: 40px;\n  --mat-radio-touch-target-display: block;\n}\n\n.mat-mdc-radio-button {\n  --mdc-form-field-label-text-font: Roboto, sans-serif;\n  --mdc-form-field-label-text-line-height: 20px;\n  --mdc-form-field-label-text-size: 14px;\n  --mdc-form-field-label-text-tracking: 0.0178571429em;\n  --mdc-form-field-label-text-weight: 400;\n}\n\nhtml {\n  --mat-slider-value-indicator-width: auto;\n  --mat-slider-value-indicator-height: 32px;\n  --mat-slider-value-indicator-caret-display: block;\n  --mat-slider-value-indicator-border-radius: 4px;\n  --mat-slider-value-indicator-padding: 0 12px;\n  --mat-slider-value-indicator-text-transform: none;\n  --mat-slider-value-indicator-container-transform: translateX(-50%);\n  --mdc-slider-active-track-height: 6px;\n  --mdc-slider-active-track-shape: 9999px;\n  --mdc-slider-handle-height: 20px;\n  --mdc-slider-handle-shape: 50%;\n  --mdc-slider-handle-width: 20px;\n  --mdc-slider-inactive-track-height: 4px;\n  --mdc-slider-inactive-track-shape: 9999px;\n  --mdc-slider-with-overlap-handle-outline-width: 1px;\n  --mdc-slider-with-tick-marks-active-container-opacity: 0.6;\n  --mdc-slider-with-tick-marks-container-shape: 50%;\n  --mdc-slider-with-tick-marks-container-size: 2px;\n  --mdc-slider-with-tick-marks-inactive-container-opacity: 0.6;\n}\n\nhtml {\n  --mdc-slider-handle-color: #a829c3;\n  --mdc-slider-focus-handle-color: #a829c3;\n  --mdc-slider-hover-handle-color: #a829c3;\n  --mdc-slider-active-track-color: #a829c3;\n  --mdc-slider-inactive-track-color: #a829c3;\n  --mdc-slider-with-tick-marks-inactive-container-color: #a829c3;\n  --mdc-slider-with-tick-marks-active-container-color: white;\n  --mdc-slider-disabled-active-track-color: #000;\n  --mdc-slider-disabled-handle-color: #000;\n  --mdc-slider-disabled-inactive-track-color: #000;\n  --mdc-slider-label-container-color: #000;\n  --mdc-slider-label-label-text-color: #fff;\n  --mdc-slider-with-overlap-handle-outline-color: #fff;\n  --mdc-slider-with-tick-marks-disabled-container-color: #000;\n  --mdc-slider-handle-elevation: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  --mat-slider-ripple-color: #a829c3;\n  --mat-slider-hover-state-layer-color: rgba(168, 41, 195, 0.05);\n  --mat-slider-focus-state-layer-color: rgba(168, 41, 195, 0.2);\n  --mat-slider-value-indicator-opacity: 0.6;\n}\nhtml .mat-accent {\n  --mat-slider-ripple-color: #fc9b2d;\n  --mat-slider-hover-state-layer-color: rgba(252, 155, 45, 0.05);\n  --mat-slider-focus-state-layer-color: rgba(252, 155, 45, 0.2);\n  --mdc-slider-handle-color: #fc9b2d;\n  --mdc-slider-focus-handle-color: #fc9b2d;\n  --mdc-slider-hover-handle-color: #fc9b2d;\n  --mdc-slider-active-track-color: #fc9b2d;\n  --mdc-slider-inactive-track-color: #fc9b2d;\n  --mdc-slider-with-tick-marks-inactive-container-color: #fc9b2d;\n  --mdc-slider-with-tick-marks-active-container-color: black;\n}\nhtml .mat-warn {\n  --mat-slider-ripple-color: #f44336;\n  --mat-slider-hover-state-layer-color: rgba(244, 67, 54, 0.05);\n  --mat-slider-focus-state-layer-color: rgba(244, 67, 54, 0.2);\n  --mdc-slider-handle-color: #f44336;\n  --mdc-slider-focus-handle-color: #f44336;\n  --mdc-slider-hover-handle-color: #f44336;\n  --mdc-slider-active-track-color: #f44336;\n  --mdc-slider-inactive-track-color: #f44336;\n  --mdc-slider-with-tick-marks-inactive-container-color: #f44336;\n  --mdc-slider-with-tick-marks-active-container-color: white;\n}\n\nhtml {\n  --mdc-slider-label-label-text-font: Roboto, sans-serif;\n  --mdc-slider-label-label-text-size: 14px;\n  --mdc-slider-label-label-text-line-height: 22px;\n  --mdc-slider-label-label-text-tracking: 0.0071428571em;\n  --mdc-slider-label-label-text-weight: 500;\n}\n\nhtml {\n  --mat-menu-container-shape: 4px;\n  --mat-menu-divider-bottom-spacing: 0;\n  --mat-menu-divider-top-spacing: 0;\n  --mat-menu-item-spacing: 16px;\n  --mat-menu-item-icon-size: 24px;\n  --mat-menu-item-leading-spacing: 16px;\n  --mat-menu-item-trailing-spacing: 16px;\n  --mat-menu-item-with-icon-leading-spacing: 16px;\n  --mat-menu-item-with-icon-trailing-spacing: 16px;\n}\n\nhtml {\n  --mat-menu-item-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-menu-item-icon-color: rgba(0, 0, 0, 0.87);\n  --mat-menu-item-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-menu-item-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-menu-container-color: white;\n  --mat-menu-divider-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-menu-item-label-text-font: Roboto, sans-serif;\n  --mat-menu-item-label-text-size: 16px;\n  --mat-menu-item-label-text-tracking: 0.03125em;\n  --mat-menu-item-label-text-line-height: 24px;\n  --mat-menu-item-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-list-list-item-container-shape: 0;\n  --mdc-list-list-item-leading-avatar-shape: 50%;\n  --mdc-list-list-item-container-color: transparent;\n  --mdc-list-list-item-selected-container-color: transparent;\n  --mdc-list-list-item-leading-avatar-color: transparent;\n  --mdc-list-list-item-leading-icon-size: 24px;\n  --mdc-list-list-item-leading-avatar-size: 40px;\n  --mdc-list-list-item-trailing-icon-size: 24px;\n  --mdc-list-list-item-disabled-state-layer-color: transparent;\n  --mdc-list-list-item-disabled-state-layer-opacity: 0;\n  --mdc-list-list-item-disabled-label-text-opacity: 0.38;\n  --mdc-list-list-item-disabled-leading-icon-opacity: 0.38;\n  --mdc-list-list-item-disabled-trailing-icon-opacity: 0.38;\n  --mat-list-active-indicator-color: transparent;\n  --mat-list-active-indicator-shape: 0;\n}\n\nhtml {\n  --mdc-list-list-item-label-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-list-list-item-supporting-text-color: rgba(0, 0, 0, 0.54);\n  --mdc-list-list-item-leading-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-trailing-supporting-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-trailing-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-selected-trailing-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-disabled-label-text-color: black;\n  --mdc-list-list-item-disabled-leading-icon-color: black;\n  --mdc-list-list-item-disabled-trailing-icon-color: black;\n  --mdc-list-list-item-hover-label-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-list-list-item-hover-leading-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-hover-trailing-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-list-list-item-focus-label-text-color: rgba(0, 0, 0, 0.87);\n  --mdc-list-list-item-hover-state-layer-color: black;\n  --mdc-list-list-item-hover-state-layer-opacity: 0.04;\n  --mdc-list-list-item-focus-state-layer-color: black;\n  --mdc-list-list-item-focus-state-layer-opacity: 0.12;\n}\n\n.mdc-list-item__start,\n.mdc-list-item__end {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #a829c3;\n  --mdc-radio-selected-hover-icon-color: #a829c3;\n  --mdc-radio-selected-icon-color: #a829c3;\n  --mdc-radio-selected-pressed-icon-color: #a829c3;\n}\n\n.mat-accent .mdc-list-item__start,\n.mat-accent .mdc-list-item__end {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #fc9b2d;\n  --mdc-radio-selected-hover-icon-color: #fc9b2d;\n  --mdc-radio-selected-icon-color: #fc9b2d;\n  --mdc-radio-selected-pressed-icon-color: #fc9b2d;\n}\n\n.mat-warn .mdc-list-item__start,\n.mat-warn .mdc-list-item__end {\n  --mdc-radio-disabled-selected-icon-color: #000;\n  --mdc-radio-disabled-unselected-icon-color: #000;\n  --mdc-radio-unselected-hover-icon-color: #212121;\n  --mdc-radio-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-radio-selected-focus-icon-color: #f44336;\n  --mdc-radio-selected-hover-icon-color: #f44336;\n  --mdc-radio-selected-icon-color: #f44336;\n  --mdc-radio-selected-pressed-icon-color: #f44336;\n}\n\n.mat-mdc-list-option {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #a829c3;\n  --mdc-checkbox-selected-hover-icon-color: #a829c3;\n  --mdc-checkbox-selected-icon-color: #a829c3;\n  --mdc-checkbox-selected-pressed-icon-color: #a829c3;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #a829c3;\n  --mdc-checkbox-selected-hover-state-layer-color: #a829c3;\n  --mdc-checkbox-selected-pressed-state-layer-color: #a829c3;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\n.mat-mdc-list-option.mat-accent {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #000;\n  --mdc-checkbox-selected-focus-icon-color: #fc9b2d;\n  --mdc-checkbox-selected-hover-icon-color: #fc9b2d;\n  --mdc-checkbox-selected-icon-color: #fc9b2d;\n  --mdc-checkbox-selected-pressed-icon-color: #fc9b2d;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #fc9b2d;\n  --mdc-checkbox-selected-hover-state-layer-color: #fc9b2d;\n  --mdc-checkbox-selected-pressed-state-layer-color: #fc9b2d;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\n.mat-mdc-list-option.mat-warn {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #f44336;\n  --mdc-checkbox-selected-hover-icon-color: #f44336;\n  --mdc-checkbox-selected-icon-color: #f44336;\n  --mdc-checkbox-selected-pressed-icon-color: #f44336;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #f44336;\n  --mdc-checkbox-selected-hover-state-layer-color: #f44336;\n  --mdc-checkbox-selected-pressed-state-layer-color: #f44336;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--selected .mdc-list-item__primary-text,\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--activated .mdc-list-item__primary-text {\n  color: #a829c3;\n}\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--selected.mdc-list-item--with-leading-icon .mdc-list-item__start,\n.mat-mdc-list-base.mat-mdc-list-base .mdc-list-item--activated.mdc-list-item--with-leading-icon .mdc-list-item__start {\n  color: #a829c3;\n}\n\n.mat-mdc-list-base .mdc-list-item--disabled .mdc-list-item__start,\n.mat-mdc-list-base .mdc-list-item--disabled .mdc-list-item__content,\n.mat-mdc-list-base .mdc-list-item--disabled .mdc-list-item__end {\n  opacity: 1;\n}\n\nhtml {\n  --mdc-list-list-item-one-line-container-height: 48px;\n  --mdc-list-list-item-two-line-container-height: 64px;\n  --mdc-list-list-item-three-line-container-height: 88px;\n  --mat-list-list-item-leading-icon-start-space: 16px;\n  --mat-list-list-item-leading-icon-end-space: 32px;\n}\n\n.mdc-list-item__start,\n.mdc-list-item__end {\n  --mdc-radio-state-layer-size: 40px;\n}\n\n.mat-mdc-list-item.mdc-list-item--with-leading-avatar.mdc-list-item--with-one-line, .mat-mdc-list-item.mdc-list-item--with-leading-checkbox.mdc-list-item--with-one-line, .mat-mdc-list-item.mdc-list-item--with-leading-icon.mdc-list-item--with-one-line {\n  height: 56px;\n}\n.mat-mdc-list-item.mdc-list-item--with-leading-avatar.mdc-list-item--with-two-lines, .mat-mdc-list-item.mdc-list-item--with-leading-checkbox.mdc-list-item--with-two-lines, .mat-mdc-list-item.mdc-list-item--with-leading-icon.mdc-list-item--with-two-lines {\n  height: 72px;\n}\n\nhtml {\n  --mdc-list-list-item-label-text-font: Roboto, sans-serif;\n  --mdc-list-list-item-label-text-line-height: 24px;\n  --mdc-list-list-item-label-text-size: 16px;\n  --mdc-list-list-item-label-text-tracking: 0.03125em;\n  --mdc-list-list-item-label-text-weight: 400;\n  --mdc-list-list-item-supporting-text-font: Roboto, sans-serif;\n  --mdc-list-list-item-supporting-text-line-height: 20px;\n  --mdc-list-list-item-supporting-text-size: 14px;\n  --mdc-list-list-item-supporting-text-tracking: 0.0178571429em;\n  --mdc-list-list-item-supporting-text-weight: 400;\n  --mdc-list-list-item-trailing-supporting-text-font: Roboto, sans-serif;\n  --mdc-list-list-item-trailing-supporting-text-line-height: 20px;\n  --mdc-list-list-item-trailing-supporting-text-size: 12px;\n  --mdc-list-list-item-trailing-supporting-text-tracking: 0.0333333333em;\n  --mdc-list-list-item-trailing-supporting-text-weight: 400;\n}\n\n.mdc-list-group__subheader {\n  font: 400 16px / 28px Roboto, sans-serif;\n  letter-spacing: 0.009375em;\n}\n\nhtml {\n  --mat-paginator-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-paginator-container-background-color: white;\n  --mat-paginator-enabled-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-paginator-disabled-icon-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-paginator-container-size: 56px;\n  --mat-paginator-form-field-container-height: 40px;\n  --mat-paginator-form-field-container-vertical-padding: 8px;\n}\n\nhtml {\n  --mat-paginator-container-text-font: Roboto, sans-serif;\n  --mat-paginator-container-text-line-height: 20px;\n  --mat-paginator-container-text-size: 12px;\n  --mat-paginator-container-text-tracking: 0.0333333333em;\n  --mat-paginator-container-text-weight: 400;\n  --mat-paginator-select-trigger-text-size: 12px;\n}\n\nhtml {\n  --mdc-tab-indicator-active-indicator-height: 2px;\n  --mdc-tab-indicator-active-indicator-shape: 0;\n  --mdc-secondary-navigation-tab-container-height: 48px;\n  --mat-tab-header-divider-color: transparent;\n  --mat-tab-header-divider-height: 0;\n}\n\n.mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n  --mdc-tab-indicator-active-indicator-color: #a829c3;\n  --mat-tab-header-disabled-ripple-color: rgba(0, 0, 0, 0.38);\n  --mat-tab-header-pagination-icon-color: #000;\n  --mat-tab-header-inactive-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-label-text-color: #a829c3;\n  --mat-tab-header-active-ripple-color: #a829c3;\n  --mat-tab-header-inactive-ripple-color: #a829c3;\n  --mat-tab-header-inactive-focus-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-inactive-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-focus-label-text-color: #a829c3;\n  --mat-tab-header-active-hover-label-text-color: #a829c3;\n  --mat-tab-header-active-focus-indicator-color: #a829c3;\n  --mat-tab-header-active-hover-indicator-color: #a829c3;\n}\n.mat-mdc-tab-group.mat-accent, .mat-mdc-tab-nav-bar.mat-accent {\n  --mdc-tab-indicator-active-indicator-color: #fc9b2d;\n  --mat-tab-header-disabled-ripple-color: rgba(0, 0, 0, 0.38);\n  --mat-tab-header-pagination-icon-color: #000;\n  --mat-tab-header-inactive-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-label-text-color: #fc9b2d;\n  --mat-tab-header-active-ripple-color: #fc9b2d;\n  --mat-tab-header-inactive-ripple-color: #fc9b2d;\n  --mat-tab-header-inactive-focus-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-inactive-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-focus-label-text-color: #fc9b2d;\n  --mat-tab-header-active-hover-label-text-color: #fc9b2d;\n  --mat-tab-header-active-focus-indicator-color: #fc9b2d;\n  --mat-tab-header-active-hover-indicator-color: #fc9b2d;\n}\n.mat-mdc-tab-group.mat-warn, .mat-mdc-tab-nav-bar.mat-warn {\n  --mdc-tab-indicator-active-indicator-color: #f44336;\n  --mat-tab-header-disabled-ripple-color: rgba(0, 0, 0, 0.38);\n  --mat-tab-header-pagination-icon-color: #000;\n  --mat-tab-header-inactive-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-label-text-color: #f44336;\n  --mat-tab-header-active-ripple-color: #f44336;\n  --mat-tab-header-inactive-ripple-color: #f44336;\n  --mat-tab-header-inactive-focus-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-inactive-hover-label-text-color: rgba(0, 0, 0, 0.6);\n  --mat-tab-header-active-focus-label-text-color: #f44336;\n  --mat-tab-header-active-hover-label-text-color: #f44336;\n  --mat-tab-header-active-focus-indicator-color: #f44336;\n  --mat-tab-header-active-hover-indicator-color: #f44336;\n}\n.mat-mdc-tab-group.mat-background-primary, .mat-mdc-tab-nav-bar.mat-background-primary {\n  --mat-tab-header-with-background-background-color: #a829c3;\n  --mat-tab-header-with-background-foreground-color: white;\n}\n.mat-mdc-tab-group.mat-background-accent, .mat-mdc-tab-nav-bar.mat-background-accent {\n  --mat-tab-header-with-background-background-color: #fc9b2d;\n  --mat-tab-header-with-background-foreground-color: black;\n}\n.mat-mdc-tab-group.mat-background-warn, .mat-mdc-tab-nav-bar.mat-background-warn {\n  --mat-tab-header-with-background-background-color: #f44336;\n  --mat-tab-header-with-background-foreground-color: white;\n}\n\n.mat-mdc-tab-header {\n  --mdc-secondary-navigation-tab-container-height: 48px;\n}\n\n.mat-mdc-tab-header {\n  --mat-tab-header-label-text-font: Roboto, sans-serif;\n  --mat-tab-header-label-text-size: 14px;\n  --mat-tab-header-label-text-tracking: 0.0892857143em;\n  --mat-tab-header-label-text-line-height: 36px;\n  --mat-tab-header-label-text-weight: 500;\n}\n\nhtml {\n  --mdc-checkbox-disabled-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-state-layer-opacity: 0.16;\n  --mdc-checkbox-selected-hover-state-layer-opacity: 0.04;\n  --mdc-checkbox-selected-pressed-state-layer-opacity: 0.16;\n  --mdc-checkbox-unselected-focus-state-layer-opacity: 0.16;\n  --mdc-checkbox-unselected-hover-state-layer-opacity: 0.04;\n  --mdc-checkbox-unselected-pressed-state-layer-opacity: 0.16;\n}\n\nhtml {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #000;\n  --mdc-checkbox-selected-focus-icon-color: #fc9b2d;\n  --mdc-checkbox-selected-hover-icon-color: #fc9b2d;\n  --mdc-checkbox-selected-icon-color: #fc9b2d;\n  --mdc-checkbox-selected-pressed-icon-color: #fc9b2d;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #fc9b2d;\n  --mdc-checkbox-selected-hover-state-layer-color: #fc9b2d;\n  --mdc-checkbox-selected-pressed-state-layer-color: #fc9b2d;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n  --mat-checkbox-disabled-label-color: rgba(0, 0, 0, 0.38);\n}\n\n.mat-mdc-checkbox {\n  --mdc-form-field-label-text-color: rgba(0, 0, 0, 0.87);\n}\n.mat-mdc-checkbox.mat-primary {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #a829c3;\n  --mdc-checkbox-selected-hover-icon-color: #a829c3;\n  --mdc-checkbox-selected-icon-color: #a829c3;\n  --mdc-checkbox-selected-pressed-icon-color: #a829c3;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #a829c3;\n  --mdc-checkbox-selected-hover-state-layer-color: #a829c3;\n  --mdc-checkbox-selected-pressed-state-layer-color: #a829c3;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n.mat-mdc-checkbox.mat-warn {\n  --mdc-checkbox-disabled-selected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-disabled-unselected-icon-color: rgba(0, 0, 0, 0.38);\n  --mdc-checkbox-selected-checkmark-color: #fff;\n  --mdc-checkbox-selected-focus-icon-color: #f44336;\n  --mdc-checkbox-selected-hover-icon-color: #f44336;\n  --mdc-checkbox-selected-icon-color: #f44336;\n  --mdc-checkbox-selected-pressed-icon-color: #f44336;\n  --mdc-checkbox-unselected-focus-icon-color: #212121;\n  --mdc-checkbox-unselected-hover-icon-color: #212121;\n  --mdc-checkbox-unselected-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-unselected-pressed-icon-color: rgba(0, 0, 0, 0.54);\n  --mdc-checkbox-selected-focus-state-layer-color: #f44336;\n  --mdc-checkbox-selected-hover-state-layer-color: #f44336;\n  --mdc-checkbox-selected-pressed-state-layer-color: #f44336;\n  --mdc-checkbox-unselected-focus-state-layer-color: black;\n  --mdc-checkbox-unselected-hover-state-layer-color: black;\n  --mdc-checkbox-unselected-pressed-state-layer-color: black;\n}\n\nhtml {\n  --mdc-checkbox-state-layer-size: 40px;\n  --mat-checkbox-touch-target-display: block;\n}\n\n.mat-mdc-checkbox {\n  --mdc-form-field-label-text-font: Roboto, sans-serif;\n  --mdc-form-field-label-text-line-height: 20px;\n  --mdc-form-field-label-text-size: 14px;\n  --mdc-form-field-label-text-tracking: 0.0178571429em;\n  --mdc-form-field-label-text-weight: 400;\n}\n\nhtml {\n  --mdc-text-button-container-shape: 4px;\n  --mdc-text-button-keep-touch-target: false;\n  --mdc-filled-button-container-shape: 4px;\n  --mdc-filled-button-keep-touch-target: false;\n  --mdc-protected-button-container-shape: 4px;\n  --mdc-protected-button-keep-touch-target: false;\n  --mdc-outlined-button-keep-touch-target: false;\n  --mdc-outlined-button-outline-width: 1px;\n  --mdc-outlined-button-container-shape: 4px;\n  --mat-text-button-horizontal-padding: 8px;\n  --mat-text-button-with-icon-horizontal-padding: 8px;\n  --mat-text-button-icon-spacing: 8px;\n  --mat-text-button-icon-offset: 0;\n  --mat-filled-button-horizontal-padding: 16px;\n  --mat-filled-button-icon-spacing: 8px;\n  --mat-filled-button-icon-offset: -4px;\n  --mat-protected-button-horizontal-padding: 16px;\n  --mat-protected-button-icon-spacing: 8px;\n  --mat-protected-button-icon-offset: -4px;\n  --mat-outlined-button-horizontal-padding: 15px;\n  --mat-outlined-button-icon-spacing: 8px;\n  --mat-outlined-button-icon-offset: -4px;\n}\n\nhtml {\n  --mdc-text-button-label-text-color: #000;\n  --mdc-text-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mat-text-button-state-layer-color: #000;\n  --mat-text-button-disabled-state-layer-color: #000;\n  --mat-text-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-text-button-hover-state-layer-opacity: 0.04;\n  --mat-text-button-focus-state-layer-opacity: 0.12;\n  --mat-text-button-pressed-state-layer-opacity: 0.12;\n  --mdc-filled-button-container-color: white;\n  --mdc-filled-button-label-text-color: #000;\n  --mdc-filled-button-disabled-container-color: rgba(0, 0, 0, 0.12);\n  --mdc-filled-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mat-filled-button-state-layer-color: #000;\n  --mat-filled-button-disabled-state-layer-color: #000;\n  --mat-filled-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-filled-button-hover-state-layer-opacity: 0.04;\n  --mat-filled-button-focus-state-layer-opacity: 0.12;\n  --mat-filled-button-pressed-state-layer-opacity: 0.12;\n  --mdc-protected-button-container-color: white;\n  --mdc-protected-button-label-text-color: #000;\n  --mdc-protected-button-disabled-container-color: rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-protected-button-container-elevation-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-disabled-container-elevation-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-focus-container-elevation-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-hover-container-elevation-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-pressed-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-protected-button-container-shadow-color: #000;\n  --mat-protected-button-state-layer-color: #000;\n  --mat-protected-button-disabled-state-layer-color: #000;\n  --mat-protected-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-protected-button-hover-state-layer-opacity: 0.04;\n  --mat-protected-button-focus-state-layer-opacity: 0.12;\n  --mat-protected-button-pressed-state-layer-opacity: 0.12;\n  --mdc-outlined-button-disabled-outline-color: rgba(0, 0, 0, 0.12);\n  --mdc-outlined-button-disabled-label-text-color: rgba(0, 0, 0, 0.38);\n  --mdc-outlined-button-label-text-color: #000;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #000;\n  --mat-outlined-button-disabled-state-layer-color: #000;\n  --mat-outlined-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-outlined-button-hover-state-layer-opacity: 0.04;\n  --mat-outlined-button-focus-state-layer-opacity: 0.12;\n  --mat-outlined-button-pressed-state-layer-opacity: 0.12;\n}\n\n.mat-mdc-button.mat-primary {\n  --mdc-text-button-label-text-color: #a829c3;\n  --mat-text-button-state-layer-color: #a829c3;\n  --mat-text-button-ripple-color: rgba(168, 41, 195, 0.1);\n}\n.mat-mdc-button.mat-accent {\n  --mdc-text-button-label-text-color: #fc9b2d;\n  --mat-text-button-state-layer-color: #fc9b2d;\n  --mat-text-button-ripple-color: rgba(252, 155, 45, 0.1);\n}\n.mat-mdc-button.mat-warn {\n  --mdc-text-button-label-text-color: #f44336;\n  --mat-text-button-state-layer-color: #f44336;\n  --mat-text-button-ripple-color: rgba(244, 67, 54, 0.1);\n}\n\n.mat-mdc-unelevated-button.mat-primary {\n  --mdc-filled-button-container-color: #a829c3;\n  --mdc-filled-button-label-text-color: #fff;\n  --mat-filled-button-state-layer-color: #fff;\n  --mat-filled-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n.mat-mdc-unelevated-button.mat-accent {\n  --mdc-filled-button-container-color: #fc9b2d;\n  --mdc-filled-button-label-text-color: #000;\n  --mat-filled-button-state-layer-color: #000;\n  --mat-filled-button-ripple-color: rgba(0, 0, 0, 0.1);\n}\n.mat-mdc-unelevated-button.mat-warn {\n  --mdc-filled-button-container-color: #f44336;\n  --mdc-filled-button-label-text-color: #fff;\n  --mat-filled-button-state-layer-color: #fff;\n  --mat-filled-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n\n.mat-mdc-raised-button.mat-primary {\n  --mdc-protected-button-container-color: #a829c3;\n  --mdc-protected-button-label-text-color: #fff;\n  --mat-protected-button-state-layer-color: #fff;\n  --mat-protected-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n.mat-mdc-raised-button.mat-accent {\n  --mdc-protected-button-container-color: #fc9b2d;\n  --mdc-protected-button-label-text-color: #000;\n  --mat-protected-button-state-layer-color: #000;\n  --mat-protected-button-ripple-color: rgba(0, 0, 0, 0.1);\n}\n.mat-mdc-raised-button.mat-warn {\n  --mdc-protected-button-container-color: #f44336;\n  --mdc-protected-button-label-text-color: #fff;\n  --mat-protected-button-state-layer-color: #fff;\n  --mat-protected-button-ripple-color: rgba(255, 255, 255, 0.1);\n}\n\n.mat-mdc-outlined-button.mat-primary {\n  --mdc-outlined-button-label-text-color: #a829c3;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #a829c3;\n  --mat-outlined-button-ripple-color: rgba(168, 41, 195, 0.1);\n}\n.mat-mdc-outlined-button.mat-accent {\n  --mdc-outlined-button-label-text-color: #fc9b2d;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #fc9b2d;\n  --mat-outlined-button-ripple-color: rgba(252, 155, 45, 0.1);\n}\n.mat-mdc-outlined-button.mat-warn {\n  --mdc-outlined-button-label-text-color: #f44336;\n  --mdc-outlined-button-outline-color: rgba(0, 0, 0, 0.12);\n  --mat-outlined-button-state-layer-color: #f44336;\n  --mat-outlined-button-ripple-color: rgba(244, 67, 54, 0.1);\n}\n\nhtml {\n  --mdc-text-button-container-height: 36px;\n  --mdc-filled-button-container-height: 36px;\n  --mdc-outlined-button-container-height: 36px;\n  --mdc-protected-button-container-height: 36px;\n  --mat-text-button-touch-target-display: block;\n  --mat-filled-button-touch-target-display: block;\n  --mat-protected-button-touch-target-display: block;\n  --mat-outlined-button-touch-target-display: block;\n}\n\nhtml {\n  --mdc-text-button-label-text-font: Roboto, sans-serif;\n  --mdc-text-button-label-text-size: 14px;\n  --mdc-text-button-label-text-tracking: 0.0892857143em;\n  --mdc-text-button-label-text-weight: 500;\n  --mdc-text-button-label-text-transform: none;\n  --mdc-filled-button-label-text-font: Roboto, sans-serif;\n  --mdc-filled-button-label-text-size: 14px;\n  --mdc-filled-button-label-text-tracking: 0.0892857143em;\n  --mdc-filled-button-label-text-weight: 500;\n  --mdc-filled-button-label-text-transform: none;\n  --mdc-outlined-button-label-text-font: Roboto, sans-serif;\n  --mdc-outlined-button-label-text-size: 14px;\n  --mdc-outlined-button-label-text-tracking: 0.0892857143em;\n  --mdc-outlined-button-label-text-weight: 500;\n  --mdc-outlined-button-label-text-transform: none;\n  --mdc-protected-button-label-text-font: Roboto, sans-serif;\n  --mdc-protected-button-label-text-size: 14px;\n  --mdc-protected-button-label-text-tracking: 0.0892857143em;\n  --mdc-protected-button-label-text-weight: 500;\n  --mdc-protected-button-label-text-transform: none;\n}\n\nhtml {\n  --mdc-icon-button-icon-size: 24px;\n}\n\nhtml {\n  --mdc-icon-button-icon-color: inherit;\n  --mdc-icon-button-disabled-icon-color: rgba(0, 0, 0, 0.38);\n  --mat-icon-button-state-layer-color: #000;\n  --mat-icon-button-disabled-state-layer-color: #000;\n  --mat-icon-button-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-icon-button-hover-state-layer-opacity: 0.04;\n  --mat-icon-button-focus-state-layer-opacity: 0.12;\n  --mat-icon-button-pressed-state-layer-opacity: 0.12;\n}\nhtml .mat-mdc-icon-button.mat-primary {\n  --mdc-icon-button-icon-color: #a829c3;\n  --mat-icon-button-state-layer-color: #a829c3;\n  --mat-icon-button-ripple-color: rgba(168, 41, 195, 0.1);\n}\nhtml .mat-mdc-icon-button.mat-accent {\n  --mdc-icon-button-icon-color: #fc9b2d;\n  --mat-icon-button-state-layer-color: #fc9b2d;\n  --mat-icon-button-ripple-color: rgba(252, 155, 45, 0.1);\n}\nhtml .mat-mdc-icon-button.mat-warn {\n  --mdc-icon-button-icon-color: #f44336;\n  --mat-icon-button-state-layer-color: #f44336;\n  --mat-icon-button-ripple-color: rgba(244, 67, 54, 0.1);\n}\n\nhtml {\n  --mat-icon-button-touch-target-display: block;\n}\n\n.mat-mdc-icon-button.mat-mdc-button-base {\n  --mdc-icon-button-state-layer-size: 48px;\n  width: var(--mdc-icon-button-state-layer-size);\n  height: var(--mdc-icon-button-state-layer-size);\n  padding: 12px;\n}\n\nhtml {\n  --mdc-fab-container-shape: 50%;\n  --mdc-fab-icon-size: 24px;\n  --mdc-fab-small-container-shape: 50%;\n  --mdc-fab-small-icon-size: 24px;\n  --mdc-extended-fab-container-height: 48px;\n  --mdc-extended-fab-container-shape: 24px;\n}\n\nhtml {\n  --mdc-fab-container-color: white;\n  --mdc-fab-container-elevation-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n  --mdc-fab-focus-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-hover-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-pressed-container-elevation-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n  --mdc-fab-container-shadow-color: #000;\n  --mat-fab-foreground-color: black;\n  --mat-fab-state-layer-color: #000;\n  --mat-fab-disabled-state-layer-color: #000;\n  --mat-fab-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-fab-hover-state-layer-opacity: 0.04;\n  --mat-fab-focus-state-layer-opacity: 0.12;\n  --mat-fab-pressed-state-layer-opacity: 0.12;\n  --mat-fab-disabled-state-container-color: rgba(0, 0, 0, 0.12);\n  --mat-fab-disabled-state-foreground-color: rgba(0, 0, 0, 0.38);\n  --mdc-fab-small-container-color: white;\n  --mdc-fab-small-container-elevation-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-focus-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-hover-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-pressed-container-elevation-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n  --mdc-fab-small-container-shadow-color: #000;\n  --mat-fab-small-foreground-color: black;\n  --mat-fab-small-state-layer-color: #000;\n  --mat-fab-small-disabled-state-layer-color: #000;\n  --mat-fab-small-ripple-color: rgba(0, 0, 0, 0.1);\n  --mat-fab-small-hover-state-layer-opacity: 0.04;\n  --mat-fab-small-focus-state-layer-opacity: 0.12;\n  --mat-fab-small-pressed-state-layer-opacity: 0.12;\n  --mat-fab-small-disabled-state-container-color: rgba(0, 0, 0, 0.12);\n  --mat-fab-small-disabled-state-foreground-color: rgba(0, 0, 0, 0.38);\n  --mdc-extended-fab-container-elevation-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-focus-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-hover-container-elevation-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-pressed-container-elevation-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n  --mdc-extended-fab-container-shadow-color: #000;\n}\nhtml .mat-mdc-fab.mat-primary {\n  --mdc-fab-container-color: #a829c3;\n  --mat-fab-foreground-color: #fff;\n  --mat-fab-state-layer-color: #fff;\n  --mat-fab-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-fab.mat-accent {\n  --mdc-fab-container-color: #fc9b2d;\n  --mat-fab-foreground-color: #000;\n  --mat-fab-state-layer-color: #000;\n  --mat-fab-ripple-color: rgba(0, 0, 0, 0.1);\n}\nhtml .mat-mdc-fab.mat-warn {\n  --mdc-fab-container-color: #f44336;\n  --mat-fab-foreground-color: #fff;\n  --mat-fab-state-layer-color: #fff;\n  --mat-fab-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-mini-fab.mat-primary {\n  --mdc-fab-small-container-color: #a829c3;\n  --mat-fab-small-foreground-color: #fff;\n  --mat-fab-small-state-layer-color: #fff;\n  --mat-fab-small-ripple-color: rgba(255, 255, 255, 0.1);\n}\nhtml .mat-mdc-mini-fab.mat-accent {\n  --mdc-fab-small-container-color: #fc9b2d;\n  --mat-fab-small-foreground-color: #000;\n  --mat-fab-small-state-layer-color: #000;\n  --mat-fab-small-ripple-color: rgba(0, 0, 0, 0.1);\n}\nhtml .mat-mdc-mini-fab.mat-warn {\n  --mdc-fab-small-container-color: #f44336;\n  --mat-fab-small-foreground-color: #fff;\n  --mat-fab-small-state-layer-color: #fff;\n  --mat-fab-small-ripple-color: rgba(255, 255, 255, 0.1);\n}\n\nhtml {\n  --mat-fab-touch-target-display: block;\n  --mat-fab-small-touch-target-display: block;\n}\n\nhtml {\n  --mdc-extended-fab-label-text-font: Roboto, sans-serif;\n  --mdc-extended-fab-label-text-size: 14px;\n  --mdc-extended-fab-label-text-tracking: 0.0892857143em;\n  --mdc-extended-fab-label-text-weight: 500;\n}\n\nhtml {\n  --mdc-snackbar-container-shape: 4px;\n}\n\nhtml {\n  --mdc-snackbar-container-color: #333333;\n  --mdc-snackbar-supporting-text-color: rgba(255, 255, 255, 0.87);\n  --mat-snack-bar-button-color: #fc9b2d;\n}\n\nhtml {\n  --mdc-snackbar-supporting-text-font: Roboto, sans-serif;\n  --mdc-snackbar-supporting-text-line-height: 20px;\n  --mdc-snackbar-supporting-text-size: 14px;\n  --mdc-snackbar-supporting-text-weight: 400;\n}\n\nhtml {\n  --mat-table-row-item-outline-width: 1px;\n}\n\nhtml {\n  --mat-table-background-color: white;\n  --mat-table-header-headline-color: rgba(0, 0, 0, 0.87);\n  --mat-table-row-item-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-table-row-item-outline-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-table-header-container-height: 56px;\n  --mat-table-footer-container-height: 52px;\n  --mat-table-row-item-container-height: 52px;\n}\n\nhtml {\n  --mat-table-header-headline-font: Roboto, sans-serif;\n  --mat-table-header-headline-line-height: 22px;\n  --mat-table-header-headline-size: 14px;\n  --mat-table-header-headline-weight: 500;\n  --mat-table-header-headline-tracking: 0.0071428571em;\n  --mat-table-row-item-label-text-font: Roboto, sans-serif;\n  --mat-table-row-item-label-text-line-height: 20px;\n  --mat-table-row-item-label-text-size: 14px;\n  --mat-table-row-item-label-text-weight: 400;\n  --mat-table-row-item-label-text-tracking: 0.0178571429em;\n  --mat-table-footer-supporting-text-font: Roboto, sans-serif;\n  --mat-table-footer-supporting-text-line-height: 20px;\n  --mat-table-footer-supporting-text-size: 14px;\n  --mat-table-footer-supporting-text-weight: 400;\n  --mat-table-footer-supporting-text-tracking: 0.0178571429em;\n}\n\nhtml {\n  --mdc-circular-progress-active-indicator-width: 4px;\n  --mdc-circular-progress-size: 48px;\n}\n\nhtml {\n  --mdc-circular-progress-active-indicator-color: #a829c3;\n}\nhtml .mat-accent {\n  --mdc-circular-progress-active-indicator-color: #fc9b2d;\n}\nhtml .mat-warn {\n  --mdc-circular-progress-active-indicator-color: #f44336;\n}\n\nhtml {\n  --mat-badge-container-shape: 50%;\n  --mat-badge-container-size: unset;\n  --mat-badge-small-size-container-size: unset;\n  --mat-badge-large-size-container-size: unset;\n  --mat-badge-legacy-container-size: 22px;\n  --mat-badge-legacy-small-size-container-size: 16px;\n  --mat-badge-legacy-large-size-container-size: 28px;\n  --mat-badge-container-offset: -11px 0;\n  --mat-badge-small-size-container-offset: -8px 0;\n  --mat-badge-large-size-container-offset: -14px 0;\n  --mat-badge-container-overlap-offset: -11px;\n  --mat-badge-small-size-container-overlap-offset: -8px;\n  --mat-badge-large-size-container-overlap-offset: -14px;\n  --mat-badge-container-padding: 0;\n  --mat-badge-small-size-container-padding: 0;\n  --mat-badge-large-size-container-padding: 0;\n}\n\nhtml {\n  --mat-badge-background-color: #a829c3;\n  --mat-badge-text-color: white;\n  --mat-badge-disabled-state-background-color: #b9b9b9;\n  --mat-badge-disabled-state-text-color: rgba(0, 0, 0, 0.38);\n}\n\n.mat-badge-accent {\n  --mat-badge-background-color: #fc9b2d;\n  --mat-badge-text-color: black;\n}\n\n.mat-badge-warn {\n  --mat-badge-background-color: #f44336;\n  --mat-badge-text-color: white;\n}\n\nhtml {\n  --mat-badge-text-font: Roboto, sans-serif;\n  --mat-badge-text-size: 12px;\n  --mat-badge-text-weight: 600;\n  --mat-badge-small-size-text-size: 9px;\n  --mat-badge-large-size-text-size: 24px;\n}\n\nhtml {\n  --mat-bottom-sheet-container-shape: 4px;\n}\n\nhtml {\n  --mat-bottom-sheet-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-bottom-sheet-container-background-color: white;\n}\n\nhtml {\n  --mat-bottom-sheet-container-text-font: Roboto, sans-serif;\n  --mat-bottom-sheet-container-text-line-height: 20px;\n  --mat-bottom-sheet-container-text-size: 14px;\n  --mat-bottom-sheet-container-text-tracking: 0.0178571429em;\n  --mat-bottom-sheet-container-text-weight: 400;\n}\n\nhtml {\n  --mat-legacy-button-toggle-height: 36px;\n  --mat-legacy-button-toggle-shape: 2px;\n  --mat-legacy-button-toggle-focus-state-layer-opacity: 1;\n  --mat-standard-button-toggle-shape: 4px;\n  --mat-standard-button-toggle-hover-state-layer-opacity: 0.04;\n  --mat-standard-button-toggle-focus-state-layer-opacity: 0.12;\n}\n\nhtml {\n  --mat-legacy-button-toggle-text-color: rgba(0, 0, 0, 0.38);\n  --mat-legacy-button-toggle-state-layer-color: rgba(0, 0, 0, 0.12);\n  --mat-legacy-button-toggle-selected-state-text-color: rgba(0, 0, 0, 0.54);\n  --mat-legacy-button-toggle-selected-state-background-color: #e0e0e0;\n  --mat-legacy-button-toggle-disabled-state-text-color: rgba(0, 0, 0, 0.26);\n  --mat-legacy-button-toggle-disabled-state-background-color: #eeeeee;\n  --mat-legacy-button-toggle-disabled-selected-state-background-color: #bdbdbd;\n  --mat-standard-button-toggle-text-color: rgba(0, 0, 0, 0.87);\n  --mat-standard-button-toggle-background-color: white;\n  --mat-standard-button-toggle-state-layer-color: black;\n  --mat-standard-button-toggle-selected-state-background-color: #e0e0e0;\n  --mat-standard-button-toggle-selected-state-text-color: rgba(0, 0, 0, 0.87);\n  --mat-standard-button-toggle-disabled-state-text-color: rgba(0, 0, 0, 0.26);\n  --mat-standard-button-toggle-disabled-state-background-color: white;\n  --mat-standard-button-toggle-disabled-selected-state-text-color: rgba(0, 0, 0, 0.87);\n  --mat-standard-button-toggle-disabled-selected-state-background-color: #bdbdbd;\n  --mat-standard-button-toggle-divider-color: #e0e0e0;\n}\n\nhtml {\n  --mat-standard-button-toggle-height: 48px;\n}\n\nhtml {\n  --mat-legacy-button-toggle-label-text-font: Roboto, sans-serif;\n  --mat-legacy-button-toggle-label-text-line-height: 24px;\n  --mat-legacy-button-toggle-label-text-size: 16px;\n  --mat-legacy-button-toggle-label-text-tracking: 0.03125em;\n  --mat-legacy-button-toggle-label-text-weight: 400;\n  --mat-standard-button-toggle-label-text-font: Roboto, sans-serif;\n  --mat-standard-button-toggle-label-text-line-height: 24px;\n  --mat-standard-button-toggle-label-text-size: 16px;\n  --mat-standard-button-toggle-label-text-tracking: 0.03125em;\n  --mat-standard-button-toggle-label-text-weight: 400;\n}\n\nhtml {\n  --mat-datepicker-calendar-container-shape: 4px;\n  --mat-datepicker-calendar-container-touch-shape: 4px;\n  --mat-datepicker-calendar-container-elevation-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  --mat-datepicker-calendar-container-touch-elevation-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-datepicker-calendar-date-selected-state-text-color: white;\n  --mat-datepicker-calendar-date-selected-state-background-color: #a829c3;\n  --mat-datepicker-calendar-date-selected-disabled-state-background-color: rgba(168, 41, 195, 0.4);\n  --mat-datepicker-calendar-date-today-selected-state-outline-color: white;\n  --mat-datepicker-calendar-date-focus-state-background-color: rgba(168, 41, 195, 0.3);\n  --mat-datepicker-calendar-date-hover-state-background-color: rgba(168, 41, 195, 0.3);\n  --mat-datepicker-toggle-active-state-icon-color: #a829c3;\n  --mat-datepicker-calendar-date-in-range-state-background-color: rgba(168, 41, 195, 0.2);\n  --mat-datepicker-calendar-date-in-comparison-range-state-background-color: rgba(249, 171, 0, 0.2);\n  --mat-datepicker-calendar-date-in-overlap-range-state-background-color: #a8dab5;\n  --mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color: #46a35e;\n  --mat-datepicker-toggle-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-body-label-text-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-period-button-text-color: #000;\n  --mat-datepicker-calendar-period-button-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-navigation-button-icon-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-header-divider-color: rgba(0, 0, 0, 0.12);\n  --mat-datepicker-calendar-header-text-color: rgba(0, 0, 0, 0.54);\n  --mat-datepicker-calendar-date-today-outline-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-calendar-date-today-disabled-state-outline-color: rgba(0, 0, 0, 0.18);\n  --mat-datepicker-calendar-date-text-color: rgba(0, 0, 0, 0.87);\n  --mat-datepicker-calendar-date-outline-color: transparent;\n  --mat-datepicker-calendar-date-disabled-state-text-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-calendar-date-preview-state-outline-color: rgba(0, 0, 0, 0.24);\n  --mat-datepicker-range-input-separator-color: rgba(0, 0, 0, 0.87);\n  --mat-datepicker-range-input-disabled-state-separator-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-range-input-disabled-state-text-color: rgba(0, 0, 0, 0.38);\n  --mat-datepicker-calendar-container-background-color: white;\n  --mat-datepicker-calendar-container-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-datepicker-content.mat-accent {\n  --mat-datepicker-calendar-date-selected-state-text-color: black;\n  --mat-datepicker-calendar-date-selected-state-background-color: #fc9b2d;\n  --mat-datepicker-calendar-date-selected-disabled-state-background-color: rgba(252, 155, 45, 0.4);\n  --mat-datepicker-calendar-date-today-selected-state-outline-color: black;\n  --mat-datepicker-calendar-date-focus-state-background-color: rgba(252, 155, 45, 0.3);\n  --mat-datepicker-calendar-date-hover-state-background-color: rgba(252, 155, 45, 0.3);\n  --mat-datepicker-calendar-date-in-range-state-background-color: rgba(252, 155, 45, 0.2);\n  --mat-datepicker-calendar-date-in-comparison-range-state-background-color: rgba(249, 171, 0, 0.2);\n  --mat-datepicker-calendar-date-in-overlap-range-state-background-color: #a8dab5;\n  --mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color: #46a35e;\n}\n.mat-datepicker-content.mat-warn {\n  --mat-datepicker-calendar-date-selected-state-text-color: white;\n  --mat-datepicker-calendar-date-selected-state-background-color: #f44336;\n  --mat-datepicker-calendar-date-selected-disabled-state-background-color: rgba(244, 67, 54, 0.4);\n  --mat-datepicker-calendar-date-today-selected-state-outline-color: white;\n  --mat-datepicker-calendar-date-focus-state-background-color: rgba(244, 67, 54, 0.3);\n  --mat-datepicker-calendar-date-hover-state-background-color: rgba(244, 67, 54, 0.3);\n  --mat-datepicker-calendar-date-in-range-state-background-color: rgba(244, 67, 54, 0.2);\n  --mat-datepicker-calendar-date-in-comparison-range-state-background-color: rgba(249, 171, 0, 0.2);\n  --mat-datepicker-calendar-date-in-overlap-range-state-background-color: #a8dab5;\n  --mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color: #46a35e;\n}\n\n.mat-datepicker-toggle-active.mat-accent {\n  --mat-datepicker-toggle-active-state-icon-color: #fc9b2d;\n}\n.mat-datepicker-toggle-active.mat-warn {\n  --mat-datepicker-toggle-active-state-icon-color: #f44336;\n}\n\n.mat-calendar-controls {\n  --mat-icon-button-touch-target-display: none;\n}\n.mat-calendar-controls .mat-mdc-icon-button.mat-mdc-button-base {\n  --mdc-icon-button-state-layer-size: 40px;\n  width: var(--mdc-icon-button-state-layer-size);\n  height: var(--mdc-icon-button-state-layer-size);\n  padding: 8px;\n}\n\nhtml {\n  --mat-datepicker-calendar-text-font: Roboto, sans-serif;\n  --mat-datepicker-calendar-text-size: 13px;\n  --mat-datepicker-calendar-body-label-text-size: 14px;\n  --mat-datepicker-calendar-body-label-text-weight: 500;\n  --mat-datepicker-calendar-period-button-text-size: 14px;\n  --mat-datepicker-calendar-period-button-text-weight: 500;\n  --mat-datepicker-calendar-header-text-size: 11px;\n  --mat-datepicker-calendar-header-text-weight: 400;\n}\n\nhtml {\n  --mat-divider-width: 1px;\n}\n\nhtml {\n  --mat-divider-color: rgba(0, 0, 0, 0.12);\n}\n\nhtml {\n  --mat-expansion-container-shape: 4px;\n}\n\nhtml {\n  --mat-expansion-container-background-color: white;\n  --mat-expansion-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-expansion-actions-divider-color: rgba(0, 0, 0, 0.12);\n  --mat-expansion-header-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-expansion-header-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-expansion-header-disabled-state-text-color: rgba(0, 0, 0, 0.26);\n  --mat-expansion-header-text-color: rgba(0, 0, 0, 0.87);\n  --mat-expansion-header-description-color: rgba(0, 0, 0, 0.54);\n  --mat-expansion-header-indicator-color: rgba(0, 0, 0, 0.54);\n}\n\nhtml {\n  --mat-expansion-header-collapsed-state-height: 48px;\n  --mat-expansion-header-expanded-state-height: 64px;\n}\n\nhtml {\n  --mat-expansion-header-text-font: Roboto, sans-serif;\n  --mat-expansion-header-text-size: 14px;\n  --mat-expansion-header-text-weight: 500;\n  --mat-expansion-header-text-line-height: inherit;\n  --mat-expansion-header-text-tracking: inherit;\n  --mat-expansion-container-text-font: Roboto, sans-serif;\n  --mat-expansion-container-text-line-height: 20px;\n  --mat-expansion-container-text-size: 14px;\n  --mat-expansion-container-text-tracking: 0.0178571429em;\n  --mat-expansion-container-text-weight: 400;\n}\n\nhtml {\n  --mat-grid-list-tile-header-primary-text-size: 14px;\n  --mat-grid-list-tile-header-secondary-text-size: 12px;\n  --mat-grid-list-tile-footer-primary-text-size: 14px;\n  --mat-grid-list-tile-footer-secondary-text-size: 12px;\n}\n\nhtml {\n  --mat-icon-color: inherit;\n}\n\n.mat-icon.mat-primary {\n  --mat-icon-color: #a829c3;\n}\n.mat-icon.mat-accent {\n  --mat-icon-color: #fc9b2d;\n}\n.mat-icon.mat-warn {\n  --mat-icon-color: #f44336;\n}\n\nhtml {\n  --mat-sidenav-container-shape: 0;\n  --mat-sidenav-container-elevation-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n  --mat-sidenav-container-width: auto;\n}\n\nhtml {\n  --mat-sidenav-container-divider-color: rgba(0, 0, 0, 0.12);\n  --mat-sidenav-container-background-color: white;\n  --mat-sidenav-container-text-color: rgba(0, 0, 0, 0.87);\n  --mat-sidenav-content-background-color: #fafafa;\n  --mat-sidenav-content-text-color: rgba(0, 0, 0, 0.87);\n  --mat-sidenav-scrim-color: rgba(0, 0, 0, 0.6);\n}\n\nhtml {\n  --mat-stepper-header-icon-foreground-color: white;\n  --mat-stepper-header-selected-state-icon-background-color: #a829c3;\n  --mat-stepper-header-selected-state-icon-foreground-color: white;\n  --mat-stepper-header-done-state-icon-background-color: #a829c3;\n  --mat-stepper-header-done-state-icon-foreground-color: white;\n  --mat-stepper-header-edit-state-icon-background-color: #a829c3;\n  --mat-stepper-header-edit-state-icon-foreground-color: white;\n  --mat-stepper-container-color: white;\n  --mat-stepper-line-color: rgba(0, 0, 0, 0.12);\n  --mat-stepper-header-hover-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-stepper-header-focus-state-layer-color: rgba(0, 0, 0, 0.04);\n  --mat-stepper-header-label-text-color: rgba(0, 0, 0, 0.54);\n  --mat-stepper-header-optional-label-text-color: rgba(0, 0, 0, 0.54);\n  --mat-stepper-header-selected-state-label-text-color: rgba(0, 0, 0, 0.87);\n  --mat-stepper-header-error-state-label-text-color: #f44336;\n  --mat-stepper-header-icon-background-color: rgba(0, 0, 0, 0.54);\n  --mat-stepper-header-error-state-icon-foreground-color: #f44336;\n  --mat-stepper-header-error-state-icon-background-color: transparent;\n}\nhtml .mat-step-header.mat-accent {\n  --mat-stepper-header-icon-foreground-color: black;\n  --mat-stepper-header-selected-state-icon-background-color: #fc9b2d;\n  --mat-stepper-header-selected-state-icon-foreground-color: black;\n  --mat-stepper-header-done-state-icon-background-color: #fc9b2d;\n  --mat-stepper-header-done-state-icon-foreground-color: black;\n  --mat-stepper-header-edit-state-icon-background-color: #fc9b2d;\n  --mat-stepper-header-edit-state-icon-foreground-color: black;\n}\nhtml .mat-step-header.mat-warn {\n  --mat-stepper-header-icon-foreground-color: white;\n  --mat-stepper-header-selected-state-icon-background-color: #f44336;\n  --mat-stepper-header-selected-state-icon-foreground-color: white;\n  --mat-stepper-header-done-state-icon-background-color: #f44336;\n  --mat-stepper-header-done-state-icon-foreground-color: white;\n  --mat-stepper-header-edit-state-icon-background-color: #f44336;\n  --mat-stepper-header-edit-state-icon-foreground-color: white;\n}\n\nhtml {\n  --mat-stepper-header-height: 72px;\n}\n\nhtml {\n  --mat-stepper-container-text-font: Roboto, sans-serif;\n  --mat-stepper-header-label-text-font: Roboto, sans-serif;\n  --mat-stepper-header-label-text-size: 14px;\n  --mat-stepper-header-label-text-weight: 400;\n  --mat-stepper-header-error-state-label-text-size: 16px;\n  --mat-stepper-header-selected-state-label-text-size: 16px;\n  --mat-stepper-header-selected-state-label-text-weight: 400;\n}\n\nhtml {\n  --mat-sort-arrow-color: #757575;\n}\n\nhtml {\n  --mat-toolbar-container-background-color: whitesmoke;\n  --mat-toolbar-container-text-color: rgba(0, 0, 0, 0.87);\n}\n\n.mat-toolbar.mat-primary {\n  --mat-toolbar-container-background-color: #a829c3;\n  --mat-toolbar-container-text-color: white;\n}\n.mat-toolbar.mat-accent {\n  --mat-toolbar-container-background-color: #fc9b2d;\n  --mat-toolbar-container-text-color: black;\n}\n.mat-toolbar.mat-warn {\n  --mat-toolbar-container-background-color: #f44336;\n  --mat-toolbar-container-text-color: white;\n}\n\nhtml {\n  --mat-toolbar-standard-height: 64px;\n  --mat-toolbar-mobile-height: 56px;\n}\n\nhtml {\n  --mat-toolbar-title-text-font: Roboto, sans-serif;\n  --mat-toolbar-title-text-line-height: 32px;\n  --mat-toolbar-title-text-size: 20px;\n  --mat-toolbar-title-text-tracking: 0.0125em;\n  --mat-toolbar-title-text-weight: 500;\n}\n\nhtml {\n  --mat-tree-container-background-color: white;\n  --mat-tree-node-text-color: rgba(0, 0, 0, 0.87);\n}\n\nhtml {\n  --mat-tree-node-min-height: 48px;\n}\n\nhtml {\n  --mat-tree-node-text-font: Roboto, sans-serif;\n  --mat-tree-node-text-size: 14px;\n  --mat-tree-node-text-weight: 400;\n}\n\nbody {\n  color: #444444;\n}\n\nh6 {\n  color: #6e6e6e;\n}\n\np,\nol,\nul,\nol,\nli,\ninput,\na {\n  color: #444444;\n}\n\n.app-toolbar a {\n  color: #FFFFFF;\n}\n\ncode {\n  color: #444444;\n}\n\n.sidenav-content a {\n  color: #84438a;\n}\n.sidenav-content a:hover {\n  color: #6e6e6e;\n}\n\nfooter {\n  background-color: #a829c3;\n}\nfooter aio-footer > * {\n  color: #FFFFFF;\n}\nfooter aio-footer a {\n  color: #FFFFFF;\n}\nfooter aio-footer h3 {\n  color: #FFFFFF;\n}\n\nbody {\n  background: #FAFAFA;\n}\n\n.background-sky {\n  color: rgba(0, 0, 0, 0.87);\n}\n\nsection#intro {\n  color: #FFFFFF;\n}\nsection#intro .hero-logo {\n  background-image: url(/assets/images/logos/angular/angular.svg);\n}\n\n.announcement-bar {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.announcement-bar .button {\n  color: #FFFFFF;\n  background-color: #412846;\n}\n.announcement-bar .button:hover {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n.home-row .card {\n  background-color: #FFFFFF;\n}\n.home-row .card .card-text-container p {\n  color: #444444;\n}\n.home-row .card:hover h2 {\n  color: #412846;\n}\n\n.button.hero-cta {\n  background-color: #FFFFFF;\n}\n\n.cta-bar .hero-cta {\n  color: #412846;\n}\n\n.text-headline {\n  color: #FFFFFF;\n}\n\n.marketing-banner {\n  background-color: #5f3b66;\n}\n.marketing-banner .banner-headline {\n  color: #FFFFFF;\n}\n\naio-shell.page-home article {\n  color: #FFFFFF;\n  background-color: #412846;\n}\naio-shell.page-home, aio-shell.page-resources, aio-shell.page-events, aio-shell.page-contribute {\n  color: #FFFFFF;\n}\n\n.nf-response h1 {\n  color: #412846;\n}\n\n.nf-icon.material-icons {\n  color: #412846;\n}\n\nmat-sidenav-container.sidenav-container {\n  background-color: #FAFAFA;\n}\nmat-sidenav-container.sidenav-container mat-sidenav.sidenav {\n  background-color: #FFFFFF;\n  border-right: 1px solid #DBDBDB;\n}\nmat-sidenav-container.sidenav-container mat-sidenav.sidenav .doc-version {\n  border-top: 1px solid #DBDBDB;\n}\nmat-sidenav-container.sidenav-container mat-sidenav.sidenav .doc-version select {\n  color: #444444;\n  background: rgba(219, 219, 219, 0.5);\n}\n\naio-nav-menu aio-nav-item .vertical-menu-item {\n  color: #444444;\n}\naio-nav-menu aio-nav-item .vertical-menu-item.level-2 {\n  color: #6e6e6e;\n}\naio-nav-menu aio-nav-item .vertical-menu-item.level-3 {\n  color: #6e6e6e;\n}\naio-nav-menu aio-nav-item .vertical-menu-item.level-4 {\n  color: #6e6e6e;\n}\naio-nav-menu aio-nav-item .vertical-menu-item:hover {\n  background-color: #DBDBDB;\n  color: #412846;\n  text-shadow: 0 0 5px #FFFFFF;\n}\naio-nav-menu aio-nav-item .vertical-menu-item:hover.selected {\n  color: #412846;\n}\naio-nav-menu aio-nav-item .vertical-menu-item.selected {\n  color: #412846;\n}\n\n.heading {\n  color: #444444;\n}\n\nmat-toolbar.mat-toolbar {\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.3);\n}\nmat-toolbar.mat-toolbar mat-icon {\n  color: #FFFFFF;\n}\n\naio-shell.page-home mat-toolbar.mat-toolbar {\n  background: #412846;\n}\n\n.hamburger.mat-mdc-button:hover {\n  color: #FAFAFA;\n}\n.hamburger.mat-mdc-button > .mat-icon {\n  color: #FFFFFF;\n}\n\n.nav-link[href=workshops] {\n  background: rgba(128, 0, 128, 0.1803921569);\n}\n\naio-top-menu ul li:focus {\n  background-color: #1E88E5;\n}\naio-top-menu a.nav-link:focus {\n  background: rgba(255, 255, 255, 0.15);\n}\n\naio-search-box.search-container input {\n  color: #444444;\n  background-color: #FAFAFA;\n}\n\n@media screen and (min-width: 351px) {\n  aio-theme-toggle {\n    border-right: 1px solid #FFFFFF;\n  }\n}\n\n.alert {\n  color: #444444;\n}\n.alert.is-critical {\n  border-left: 8px solid #DD0031;\n  background-color: rgba(221, 0, 49, 0.05);\n}\n.alert.is-critical h1,\n.alert.is-critical h2,\n.alert.is-critical h3,\n.alert.is-critical h4,\n.alert.is-critical h5,\n.alert.is-critical h6 {\n  color: #DD0031;\n}\n.alert.is-important {\n  border-left: 8px solid #FF9800;\n  background-color: rgba(255, 152, 0, 0.05);\n}\n.alert.is-important h1,\n.alert.is-important h2,\n.alert.is-important h3,\n.alert.is-important h4,\n.alert.is-important h5,\n.alert.is-important h6 {\n  color: #FF9800;\n}\n.alert.is-helpful {\n  border-left: 8px solid #412846;\n  background-color: rgba(65, 40, 70, 0.05);\n}\n.alert.is-helpful h1,\n.alert.is-helpful h2,\n.alert.is-helpful h3,\n.alert.is-helpful h4,\n.alert.is-helpful h5,\n.alert.is-helpful h6 {\n  color: #412846;\n}\n\naio-api-list .api-filter .form-search input {\n  box-shadow: 0 2px 2px rgba(10, 16, 20, 0.24), 0 0 2px rgba(10, 16, 20, 0.12);\n  border: 1px solid #FFFFFF;\n  background-color: #FFFFFF;\n  color: #a829c3;\n}\naio-api-list .api-filter .form-search input::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n  color: #CFD8DC;\n}\naio-api-list .api-filter .form-search input::-moz-placeholder { /* Firefox 19+ */\n  color: #CFD8DC;\n}\naio-api-list .api-filter .form-search input:-ms-input-placeholder { /* IE 10+ */\n  color: #CFD8DC;\n}\naio-api-list .api-filter .form-search input:-moz-placeholder { /* Firefox 18- */\n  color: #CFD8DC;\n}\naio-api-list .api-filter .form-search input:focus {\n  border: 1px solid #42A5F5;\n  box-shadow: 0 2px 2px rgba(66, 165, 245, 0.24), 0 0 2px rgba(66, 165, 245, 0.12);\n}\naio-api-list .api-filter .form-search .material-icons {\n  color: #CFD8DC;\n}\naio-api-list .api-list-container a {\n  color: #84438a;\n}\naio-api-list .api-list-container .api-list li a {\n  color: #546E7A;\n}\naio-api-list .api-list-container .api-list li a:hover {\n  background: #ECEFF1;\n  color: #2196F3;\n}\n\n.symbol {\n  box-shadow: 0 1px 2px rgba(10, 16, 20, 0.24);\n  color: #FFFFFF;\n}\n.symbol.all {\n  background: #FFFFFF;\n}\n.symbol.all:before {\n  content: \" \";\n}\n.symbol.decorator {\n  background: #1565C0;\n}\n.symbol.decorator:before {\n  content: \"@\";\n}\n.symbol.directive {\n  background: #D81B60;\n}\n.symbol.directive:before {\n  content: \"D\";\n}\n.symbol.pipe {\n  background: #546E7A;\n}\n.symbol.pipe:before {\n  content: \"P\";\n}\n.symbol.class {\n  background: #2196F3;\n}\n.symbol.class:before {\n  content: \"C\";\n}\n.symbol.interface {\n  background: #009688;\n}\n.symbol.interface:before {\n  content: \"I\";\n}\n.symbol.function {\n  background: #4CAF50;\n}\n.symbol.function:before {\n  content: \"F\";\n}\n.symbol.enum {\n  background: #FFA000;\n}\n.symbol.enum:before {\n  content: \"E\";\n}\n.symbol.const {\n  background: #6e6e6e;\n}\n.symbol.const:before {\n  content: \"K\";\n}\n.symbol.let {\n  background: #6e6e6e;\n}\n.symbol.let:before {\n  content: \"K\";\n}\n.symbol.var {\n  background: #6e6e6e;\n}\n.symbol.var:before {\n  content: \"K\";\n}\n.symbol.ngmodule {\n  background: #940;\n}\n.symbol.ngmodule:before {\n  content: \"M\";\n}\n.symbol.type-alias {\n  background: #7CB342;\n}\n.symbol.type-alias:before {\n  content: \"T\";\n}\n.symbol.package {\n  background: #8E24AA;\n}\n.symbol.package:before {\n  content: \"Pk\";\n}\n\n.docs-content .api-list a {\n  color: #546E7A;\n}\n.docs-content .api-list a:hover {\n  background: #ECEFF1;\n  color: #2196F3;\n}\n\n.code-links a code, .code-links a .api-doc-code {\n  color: #1E88E5 !important;\n}\n\n.code-background span.pln {\n  color: #1E88E5 !important;\n}\n\n.api-doc-code {\n  color: #1a2326;\n}\n\na.button.mat-button.button-secondary,\n.button.button-secondary {\n  background: #6e6e6e;\n  color: rgba(255, 255, 255, 0.87);\n}\na.button.mat-button.button-plain,\n.button.button-plain {\n  background: #FFFFFF;\n  color: rgba(68, 68, 68, 0.87);\n}\na.button.mat-button.button-subtle,\n.button.button-subtle {\n  background: #6e6e6e;\n  color: #e1e1e1;\n}\na.button.mat-button.button-subtle:hover,\n.button.button-subtle:hover {\n  color: rgba(255, 255, 255, 0.7);\n}\na.button.mat-button.button-blue,\n.button.button-blue {\n  background: #412846;\n  color: rgba(255, 255, 255, 0.87);\n}\na.button.mat-button.button-blue:hover,\n.button.button-blue:hover {\n  color: rgba(255, 255, 255, 0.7);\n}\na.button.mat-button.button-shield, a.button.mat-button.button-shield.mat-button,\n.button.button-shield,\n.button.button-shield.mat-button {\n  background-color: #412846;\n  background: #412846 url(\"/projects/ngrx.io/src/assets/images/logos/angular/angular_whiteTransparent.svg\") 24px 13px no-repeat;\n}\n@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {\n  a.button.mat-button.button-shield, a.button.mat-button.button-shield.mat-button,\n  .button.button-shield,\n  .button.button-shield.mat-button {\n    background: #412846 url(\"/projects/ngrx.io/src/assets/images/logos/angular/angular_whiteTransparent.svg\") 24px 13px no-repeat;\n    background-size: 22px 22px;\n  }\n}\na.button.mat-button.button-banner,\n.button.button-banner {\n  background: #444444;\n  color: rgba(255, 255, 255, 0.87);\n}\n\n.cta-bar .button:hover {\n  color: #FAFAFA;\n}\n\n.group-buttons a.button.mat-button.filter-button {\n  border: 2px solid #412846;\n  background-color: rgba(65, 40, 70, 0.2);\n}\n.group-buttons a.button.mat-button.filter-button.selected, .group-buttons a.button.mat-button.filter-button:hover {\n  background-color: #412846;\n  color: #FFFFFF;\n}\n\n.callout header {\n  color: #FFFFFF;\n}\n.callout.is-critical {\n  border-color: #DD0031;\n  background: rgba(221, 0, 49, 0.05);\n}\n.callout.is-critical header {\n  background: #DD0031;\n}\n.callout.is-important {\n  border-color: #FF9800;\n  background: rgba(255, 152, 0, 0.05);\n}\n.callout.is-important header {\n  background: #FFA000;\n}\n.callout.is-helpful {\n  border-color: #412846;\n  background: rgba(65, 40, 70, 0.05);\n}\n.callout.is-helpful header {\n  background: #412846;\n}\n\n.card-container .docs-card {\n  background-color: #FFFFFF;\n}\n.card-container .docs-card section {\n  color: #444444;\n}\n.card-container .docs-card p {\n  color: #444444;\n}\n.card-container .docs-card .card-footer {\n  color: #6e6e6e;\n  border-top: 0.5px solid #DBDBDB;\n}\n.card-container .docs-card .card-footer a {\n  color: #6e6e6e;\n}\n.card-container .docs-card:hover section {\n  color: #412846;\n}\n.card-container .docs-card:hover p {\n  color: #444444;\n}\n.card-container .docs-card:hover .card-footer {\n  background-color: rgba(65, 40, 70, 0.1);\n  color: #412846;\n}\n\n.card-section:hover {\n  box-shadow: 0 2px 2px rgba(10, 16, 20, 0.24), 0 0 2px rgba(10, 16, 20, 0.12);\n}\n\ncode-example:not(.no-box) {\n  background-color: rgba(241, 241, 241, 0.2);\n  border: 0.5px solid #DBDBDB;\n  color: #444444;\n}\ncode-example.code-shell, code-example[language=sh], code-example[language=bash] {\n  background-color: #444444;\n}\ncode-example header {\n  background-color: #412846;\n  color: #FAFAFA;\n}\n\ncode-tabs .code-tab-group .mat-tab-label:hover {\n  background: rgba(0, 0, 0, 0.04);\n}\n\ncode-example.avoid header,\ncode-example.avoidFile header {\n  border: 2px solid #DD0031;\n  background: #DD0031;\n}\n\ncode-example.avoid,\ncode-example.avoidFile,\ncode-tabs.avoid mat-tab-body,\ncode-tabs.avoidFile mat-tab-body {\n  border: 0.5px solid #DD0031;\n}\n\naio-code pre.prettyprint code ol.linenums {\n  color: #f4f5f5;\n}\naio-code pre.prettyprint code .code-missing {\n  color: #C3002F;\n}\naio-code pre.prettyprint .copy-button {\n  color: #B0BEC5;\n}\naio-code pre.prettyprint .copy-button:hover {\n  color: #6e6e6e;\n}\naio-code pre.prettyprint.lang-sh .copy-button, aio-code pre.prettyprint.lang-bash .copy-button {\n  color: #6e6e6e;\n}\naio-code pre.prettyprint.lang-sh .copy-button:hover, aio-code pre.prettyprint.lang-bash .copy-button:hover {\n  color: #DBDBDB;\n}\n\n.sidenav-content code a {\n  color: inherit;\n}\n.sidenav-content code a:hover {\n  color: #6e6e6e;\n}\n.sidenav-content :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6):not(pre) > code {\n  background-color: rgba(219, 219, 219, 0.5);\n  color: #444444;\n}\n\n.code-tab-group .mat-tab-label:hover {\n  background: rgba(0, 0, 0, 0.04);\n}\n\n/* PRETTY PRINTING STYLES for prettify.js. */\n/* The following class|color styles are derived from https://github.com/google/code-prettify/blob/master/src/prettify.css*/\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln {\n  color: #000;\n} /* plain text */\n@media screen {\n  .str {\n    color: #800;\n  } /* string content */\n  .kwd {\n    color: #D86703;\n  } /* a keyword */\n  .com {\n    color: #060;\n  } /* a comment */\n  .typ {\n    color: purple;\n  } /* a type name */\n  .lit {\n    color: #D86703;\n  } /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun,\n  .opn,\n  .clo {\n    color: #660;\n  }\n  .tag {\n    color: #008;\n  } /* a markup tag name */\n  .atn {\n    color: #606;\n  } /* a markup attribute name */\n  .atv {\n    color: #800;\n  } /* a markup attribute value */\n  .dec,\n  .var {\n    color: #606;\n  } /* a declaration; a variable name */\n  .fun {\n    color: red;\n  } /* a function name */\n}\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str {\n    color: #060;\n  }\n  .kwd {\n    color: #006;\n    font-weight: bold;\n  }\n  .com {\n    color: #600;\n    font-style: italic;\n  }\n  .typ {\n    color: #404;\n    font-weight: bold;\n  }\n  .lit {\n    color: #044;\n  }\n  .pun,\n  .opn,\n  .clo {\n    color: #440;\n  }\n  .tag {\n    color: #006;\n    font-weight: bold;\n  }\n  .atn {\n    color: #404;\n  }\n  .atv {\n    color: #060;\n  }\n}\n/* SHELL / TERMINAL CODE BLOCKS */\ncode-example.code-shell .pnk,\ncode-example.code-shell .blk,\ncode-example.code-shell .pln,\ncode-example.code-shell .otl,\ncode-example.code-shell .kwd,\ncode-example.code-shell .typ,\ncode-example.code-shell .tag,\ncode-example.code-shell .str,\ncode-example.code-shell .atv,\ncode-example.code-shell .atn,\ncode-example.code-shell .com,\ncode-example.code-shell .lit,\ncode-example.code-shell .pun,\ncode-example.code-shell .dec, code-example[language=sh] .pnk,\ncode-example[language=sh] .blk,\ncode-example[language=sh] .pln,\ncode-example[language=sh] .otl,\ncode-example[language=sh] .kwd,\ncode-example[language=sh] .typ,\ncode-example[language=sh] .tag,\ncode-example[language=sh] .str,\ncode-example[language=sh] .atv,\ncode-example[language=sh] .atn,\ncode-example[language=sh] .com,\ncode-example[language=sh] .lit,\ncode-example[language=sh] .pun,\ncode-example[language=sh] .dec, code-example[language=bash] .pnk,\ncode-example[language=bash] .blk,\ncode-example[language=bash] .pln,\ncode-example[language=bash] .otl,\ncode-example[language=bash] .kwd,\ncode-example[language=bash] .typ,\ncode-example[language=bash] .tag,\ncode-example[language=bash] .str,\ncode-example[language=bash] .atv,\ncode-example[language=bash] .atn,\ncode-example[language=bash] .com,\ncode-example[language=bash] .lit,\ncode-example[language=bash] .pun,\ncode-example[language=bash] .dec {\n  color: #17ff0b;\n}\n\n.group-buttons a.selected {\n  background-color: #412846;\n  color: #FFFFFF;\n}\n\naio-contributor, ngrx-contributor {\n  background: #FFFFFF;\n  box-shadow: 0 2px 2px rgba(10, 16, 20, 0.24), 0 0 2px rgba(10, 16, 20, 0.12);\n}\naio-contributor .contributor-info, ngrx-contributor .contributor-info {\n  background: rgba(68, 68, 68, 0.5);\n}\naio-contributor .contributor-info .info-item, ngrx-contributor .contributor-info .info-item {\n  color: #FFFFFF;\n}\naio-contributor .contributor-info .info-item:hover, ngrx-contributor .contributor-info .info-item:hover {\n  box-shadow: 0 8px 8px rgba(10, 16, 20, 0.24), 0 0 8px rgba(10, 16, 20, 0.12);\n  color: #DBDBDB;\n}\naio-contributor .contributor-info [mat-button], ngrx-contributor .contributor-info [mat-button] {\n  color: #FFFFFF;\n}\naio-contributor .contributor-info [mat-button]:hover, ngrx-contributor .contributor-info [mat-button]:hover {\n  color: #DBDBDB;\n}\naio-contributor .contributor-image, ngrx-contributor .contributor-image {\n  border: 2px solid #DBDBDB;\n}\n\ndetails {\n  box-shadow: 0 1px 4px 0 rgba(10, 16, 20, 0.37);\n}\n\ndetails + details {\n  margin-top: 1em;\n}\n\nsummary {\n  color: #0A1014;\n}\n\n.filetree {\n  background: #FAFAFA;\n  border: 4px solid #DBDBDB;\n}\n.filetree .file {\n  color: #444444;\n}\n.filetree .children .file:before {\n  border-color: #DBDBDB;\n}\n\n.sidenav-content h1 .header-link,\n.sidenav-content h2 .header-link,\n.sidenav-content h3 .header-link,\n.sidenav-content h4 .header-link,\n.sidenav-content h5 .header-link,\n.sidenav-content h6 .header-link {\n  color: #6e6e6e;\n}\n\nhr {\n  background: #36203A;\n}\n\n.content figure {\n  background: #FFFFFF;\n  box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.2);\n}\n\nlabel.raised, .api-header label {\n  color: #FFFFFF;\n}\nlabel.raised.api-status-label, .api-header label.api-status-label {\n  background-color: #6e6e6e;\n}\nlabel.raised.api-status-label.deprecated, label.raised.api-status-label.security, label.raised.api-status-label.impure-pipe, .api-header label.api-status-label.deprecated, .api-header label.api-status-label.security, .api-header label.api-status-label.impure-pipe {\n  background-color: #DD0031;\n}\nlabel.raised.api-type-label, .api-header label.api-type-label {\n  background-color: #1E88E5;\n}\nlabel.raised.api-type-label.all, .api-header label.api-type-label.all {\n  background: #FFFFFF;\n}\nlabel.raised.api-type-label.decorator, .api-header label.api-type-label.decorator {\n  background: #1565C0;\n}\nlabel.raised.api-type-label.directive, .api-header label.api-type-label.directive {\n  background: #D81B60;\n}\nlabel.raised.api-type-label.pipe, .api-header label.api-type-label.pipe {\n  background: #546E7A;\n}\nlabel.raised.api-type-label.class, .api-header label.api-type-label.class {\n  background: #2196F3;\n}\nlabel.raised.api-type-label.interface, .api-header label.api-type-label.interface {\n  background: #009688;\n}\nlabel.raised.api-type-label.function, .api-header label.api-type-label.function {\n  background: #4CAF50;\n}\nlabel.raised.api-type-label.enum, .api-header label.api-type-label.enum {\n  background: #FFA000;\n}\nlabel.raised.api-type-label.const, .api-header label.api-type-label.const {\n  background: #6e6e6e;\n}\nlabel.raised.api-type-label.let, .api-header label.api-type-label.let {\n  background: #6e6e6e;\n}\nlabel.raised.api-type-label.var, .api-header label.api-type-label.var {\n  background: #6e6e6e;\n}\nlabel.raised.api-type-label.ngmodule, .api-header label.api-type-label.ngmodule {\n  background: #940;\n}\nlabel.raised.api-type-label.type-alias, .api-header label.api-type-label.type-alias {\n  background: #7CB342;\n}\nlabel.raised.api-type-label.package, .api-header label.api-type-label.package {\n  background: #8E24AA;\n}\nlabel.raised.page-label, .api-header label.page-label {\n  background-color: #ECEFF1;\n  color: #6e6e6e;\n}\nlabel.raised.property-type-label, .api-header label.property-type-label {\n  background-color: #444444;\n  color: #FFFFFF;\n}\n\naio-notification {\n  background: #412846;\n}\naio-notification .close-button {\n  background: #444444;\n}\naio-notification .content .message {\n  color: #FAFAFA;\n}\naio-notification .content .action-button {\n  background: #a829c3;\n  color: #FAFAFA;\n}\n\n.presskit-container h2 {\n  color: #37474F;\n}\n.presskit-container .cc-by-anchor {\n  color: grey !important;\n}\n.presskit-container .presskit-row .presskit-inner h3 {\n  color: #455A64;\n}\n.presskit-container .presskit-row .presskit-inner .transparent-img-bg {\n  background-color: #34474F;\n}\n\naio-resource-list .shadow-1 {\n  box-shadow: 0 1px 4px 0 rgba(10, 16, 20, 0.37);\n}\naio-resource-list c-resource-nav {\n  background-color: #fff;\n}\naio-resource-list c-resource-nav a {\n  color: #373E41;\n}\naio-resource-list c-resource-nav .category .category-link:hover {\n  background: #edf0f2;\n  color: #2B85E7;\n}\naio-resource-list c-resource-nav .subcategory .subcategory-link:hover {\n  background: #edf0f2;\n  color: #2B85E7;\n}\naio-resource-list .subcategory-title {\n  background-color: #ECEFF1;\n  color: #373E41;\n}\naio-resource-list .resource-row-link {\n  color: #1a2326;\n}\naio-resource-list .resource-row-link:hover {\n  color: #1a2326;\n  border-color: rgba(25, 118, 210, 0.5);\n  box-shadow: 0 8px 8px rgba(1, 131, 163, 0.24), 0 0 8px rgba(1, 67, 163, 0.12), 0 6px 18px rgba(43, 133, 231, 0.12);\n}\n\naio-search-results.embedded .search-results .search-area .search-section-header {\n  color: #444444;\n}\naio-search-results.embedded .search-results .search-area a {\n  color: #5e5e5e;\n}\naio-search-results.embedded .search-results .search-area a:hover {\n  color: #1E88E5;\n}\n\n.search-results {\n  background-color: #444444;\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.3);\n}\n.search-results .search-area .search-section-header {\n  color: #FFFFFF;\n}\n.search-results .no-results {\n  color: rgba(0, 0, 0, 0.87);\n}\n.search-results a {\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.search-area a {\n  color: #DBDBDB;\n}\n.search-area a:hover {\n  color: #FFFFFF;\n}\n\n.form-select-button {\n  background: #FFFFFF;\n  box-shadow: 0 2px 2px rgba(10, 16, 20, 0.24), 0 0 2px rgba(10, 16, 20, 0.12);\n  border: 1px solid #FFFFFF;\n  color: #546E7A;\n}\n.form-select-button:focus {\n  border: 1px solid #42A5F5;\n  box-shadow: 0 2px 2px rgba(66, 165, 245, 0.24), 0 0 2px rgba(66, 165, 245, 0.12);\n}\n.form-select-button[disabled] {\n  color: lightgrey;\n}\n\n.form-select-dropdown {\n  background: #fafafa;\n  box-shadow: 0 16px 16px rgba(10, 16, 20, 0.24), 0 0 16px rgba(10, 16, 20, 0.12);\n}\n.form-select-dropdown li:hover {\n  background-color: #ECEFF1;\n}\n.form-select-dropdown li.selected {\n  background-color: #CFD8DC;\n}\n\n.heading {\n  color: #444444;\n}\n\ntable {\n  box-shadow: 0 2px 2px rgba(110, 110, 110, 0.24), 0 0 2px rgba(10, 16, 20, 0.12);\n  background-color: #FAFAFA;\n}\ntable thead > tr > th {\n  background: rgba(219, 219, 219, 0.2);\n  border-bottom: 1px solid #DBDBDB;\n  color: #444444;\n}\ntable tbody > tr > th,\ntable tbody > tr > td {\n  border-bottom: 1px solid #DBDBDB;\n}\n@media (max-width: 480px) {\n  table tbody > tr > td tr td:first-child {\n    background-color: #DBDBDB;\n  }\n}\ntable tbody > tr > th {\n  background: rgba(219, 219, 219, 0.2);\n}\ntable tbody > tr > th:not(:last-child) {\n  border-right: 1px solid #DBDBDB;\n}\n@media (max-width: 480px) {\n  table tbody > tr:last-child td {\n    border-bottom: 1px solid #DBDBDB;\n  }\n}\n\n.toc-inner .toc-heading.secondary:hover {\n  color: #1E88E5;\n}\n.toc-inner button.toc-heading.embedded:focus, .toc-inner button.toc-more-items.embedded:focus {\n  background: #DBDBDB;\n  color: #6e6e6e;\n}\n.toc-inner button.toc-heading:hover:not(.embedded) {\n  color: #1E88E5;\n}\n.toc-inner button.toc-more-items {\n  color: #6e6e6e;\n}\n.toc-inner button.toc-more-items:hover {\n  color: #1E88E5;\n}\n.toc-inner ul.toc-list li.h1:after {\n  background: #DBDBDB;\n}\n.toc-inner ul.toc-list li a {\n  color: #5e5e5e;\n}\n.toc-inner ul.toc-list li:hover * {\n  color: #1E88E5;\n}\n.toc-inner ul.toc-list li.active * {\n  color: #412846;\n}\n.toc-inner ul.toc-list li.active a:before {\n  background: #412846;\n}\n.toc-inner ul.toc-list:not(.embedded) li:before {\n  border-left-color: #DBDBDB;\n}\n.toc-inner ul.toc-list:not(.embedded) li:not(.active):hover a:before {\n  background: #DBDBDB;\n}\n.toc-inner.embedded .toc-inner .toc-heading.secondary {\n  color: rgba(0, 0, 0, 0.87);\n}","@use \"../../constants\";\naio-shell.mode-archive {\n  .mat-toolbar.mat-primary, footer {\n    background: linear-gradient(145deg,#263238,#78909C);\n  }\n\n  .vertical-menu-item {\n    &.selected, &:hover {\n      color: #263238;\n    }\n  }\n\n  .toc-inner ul.toc-list li.active a {\n    color: #263238;\n\n    &:before {\n      background-color: #263238;\n    }\n  }\n\n  .toc-inner ul.toc-list li:hover a {\n    color: #263238;\n  }\n}\n\naio-shell.mode-next {\n\n footer {\n    background: linear-gradient(145deg,#84438a,#84438a);\n  }\n\n  .vertical-menu-item {\n    &.selected, &:hover {\n      color: constants.$lightpurple;\n    }\n  }\n\n  .toc-inner ul.toc-list li.active a {\n    color: constants.$lightpurple;\n\n    &:before {\n      background-color: constants.$lightpurple;\n    }\n  }\n\n  .toc-inner ul.toc-list li:hover a {\n    color: constants.$lightpurple;\n  }\n}\n","// TYPOGRAPHY\n$main-font: \"Roboto\",\"Helvetica Neue Light\",\"Helvetica Neue\",Helvetica,Arial,\"Lucida Grande\",sans-serif;\n$code-font: \"Droid Sans Mono\", monospace;\n$bold-font-weight: 600;\n\n// Z-LAYER\n$layer-1: 1;\n$layer-2: 2;\n$layer-3: 3;\n$layer-4: 4;\n$layer-5: 5;\n\n// COLOR PALETTE\n$lightblue: #7fc9ff;\n$blue: #1976D2;\n$purple: #412846;\n$lightpurple: #84438a;\n$accentblue: #1E88E5;\n$brightred: #DD0031;\n$darkred: #C3002F;\n$white: #FFFFFF;\n$offwhite: #FAFAFA;\n$backgroundgray: #F1F1F1;\n$lightgray: #DBDBDB;\n$mist: #ECEFF1;\n$mediumgray: #6e6e6e;\n$darkgray: #444444;\n$deepgray: #333333;\n$black: #0A1014;\n$orange: #FF9800;\n$darkorange: #940;\n$anti-pattern: $brightred;\n\n// API & CODE COLORS\n$amber-700: #FFA000;\n$purple-400: #42A5F5;\n$purple-500: #2196F3;\n$purple-600: #1E88E5;\n$purple-800: #1565C0;\n$purple-900: #0D47A1;\n$purple-grey-50: #ECEFF1;\n$purple-grey-100: #CFD8DC;\n$purple-grey-200: #B0BEC5;\n$purple-grey-300: #90A4AE;\n$purple-grey-400: #78909C;\n$purple-grey-500: #607D8B;\n$purple-grey-600: #546E7A;\n$purple-grey-700: #455A64;\n$purple-grey-800: #37474F;\n$purple-grey-900: #263238;\n$codegreen: #17ff0b;\n$green-500: #4CAF50;\n$green-800: #2E7D32;\n$light-green-600: #7CB342;\n$pink-600: #D81B60;\n$purple-600: #8E24AA;\n$purple-700: #a829c3;\n$dull-magenta-700: #dc65ff;\n$teal-500: #009688;\n$lightgrey: #F5F6F7;\n\n// GRADIENTS\n$bluegradient: linear-gradient(145deg,#0D47A1,#42A5F5);\n$redgradient: linear-gradient(145deg,$darkred,$brightred);\n\n// API LABEL COLOR AND SYMBOLS MAP\n$api-symbols: (\n  all: (\n    content: ' ',\n    background: $white\n  ),\n  decorator: (\n    content: '@',\n    background: $purple-800\n  ),\n  directive: (\n    content: 'D',\n    background: $pink-600\n  ),\n  pipe: (\n    content: 'P',\n    background: $purple-grey-600\n  ),\n  class: (\n    content: 'C',\n    background: $purple-500\n  ),\n  interface: (\n    content: 'I',\n    background: $teal-500\n  ),\n  function: (\n    content: 'F',\n    background: $green-500\n  ),\n  enum: (\n    content: 'E',\n    background: $amber-700\n  ),\n  const: (\n    content: 'K',\n    background: $mediumgray\n  ),\n  let: (\n    content: 'K',\n    background: $mediumgray\n  ),\n  var: (\n    content: 'K',\n    background: $mediumgray\n  ),\n  ngmodule: (\n    content: 'M',\n    background: $darkorange\n  ),\n  type-alias: (\n    content: 'T',\n    background: $light-green-600\n  ),\n  package: (\n    content: 'Pk',\n    background: $purple-600\n  )\n);\n\n// OTHER\n$small-breakpoint-width: 840px;\n$phone-breakpoint: 480px;\n$tablet-breakpoint: 800px;\n","@use 'sass:color';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n\n/// Include content under the current selector (&) or the document root if there is no current\n/// selector.\n/// @param {String} $root [html] The default root selector to use when there is no current selector.\n/// @output The given content under the current selector, or root selector if there is no current\n///     selector.\n/// @content Content to output under the current selector, or root selector if there is no current\n///     selector.\n@mixin current-selector-or-root($root: html) {\n  @if & {\n    @content;\n  }\n  @else {\n    #{$root} {\n      @content;\n    }\n  }\n}\n\n/// A version of the standard `map.merge` function that takes a variable number of arguments.\n/// Each argument is merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.merge\n/// @return {Map} The combined result of successively calling map.merge with each parameter.\n@function merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n\n/// A version of the standard `map.deep-merge` function that takes a variable number of arguments.\n/// Each argument is deep-merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.deep-merge\n/// @return {Map} The combined result of successively calling map.deep-merge with each parameter.\n@function deep-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.deep-merge($result, $map);\n  }\n  @return $result;\n}\n\n/// Coerces the given value to a list, by converting any non-list value into a single-item list.\n/// This should be used when dealing with user-passed lists of args to avoid confusing errors,\n/// since Sass treats `($x)` as equivalent to `$x`.\n/// @param {Any} $value The value to coerce to a list.\n/// @return {List} The original $value if it was a list, otherwise a single-item list containing\n///     $value.\n@function coerce-to-list($value) {\n  @return if(meta.type-of($value) != 'list', ($value,), $value);\n}\n\n/// A version of the Sass `color.change` function that is safe ot use with CSS variables.\n@function safe-color-change($color, $args...) {\n  $args: meta.keywords($args);\n  @return if(meta.type-of($color) == 'color', color.change($color, $args...), $color);\n}\n\n/// Gets the given arguments as a map of keywords and validates that only supported arguments were\n/// passed.\n/// @param {ArgList} $args The arguments to convert to a keywords map.\n/// @param {List} $supported-args The supported argument names.\n/// @return {Map} The $args as a map of argument name to argument value.\n@function validate-keyword-args($args, $supported-args) {\n  @if list.length($args) > 0 {\n    @error #{'Expected keyword args, but got positional args: '}#{$args};\n  }\n  $kwargs: meta.keywords($args);\n  @each $arg, $v in $kwargs {\n    @if list.index($supported-args, $arg) == null {\n      @error #{'Unsupported argument '}#{$arg}#{'. Valid arguments are: '}#{$supported-args};\n    }\n  }\n  @return $kwargs;\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use './gss';\n\n/// When true, add an additional property/value declaration before declarations\n/// that use advanced features such as custom properties or CSS functions. This\n/// adds fallback support for older browsers such as IE11 that do not support\n/// these features at the cost of additional CSS. Set this variable to false to\n/// disable generating fallback declarations.\n$enable-fallback-declarations: true !default;\n\n/// Writes a CSS property/value declaration. This mixin is used throughout the\n/// theme package for consistency for dynamically setting CSS property values.\n///\n/// This mixin may optionally take a fallback value. For advanced features such\n/// as custom properties or CSS functions like min and max, a fallback value is\n/// recommended to support older browsers.\n///\n/// @param {String} $property - The CSS property of the declaration.\n/// @param {*} $value - The value of the CSS declaration. The value should be\n///     resolved by other theme functions first (i.e. custom property Maps and\n///     Material theme keys are not supported in this mixin). If the value is\n///     null, no declarations will be emitted.\n/// @param {*} $fallback - An optional fallback value for older browsers. If\n///     provided, a second property/value declaration will be added before the\n///     main property/value declaration.\n/// @param {Map} $gss - An optional Map of GSS annotations to add.\n/// @param {Bool} $important - If true, add `!important` to the declaration.\n@mixin declaration(\n  $property,\n  $value,\n  $fallback-value: null,\n  $gss: (),\n  $important: false\n) {\n  // Normally setting a null value to a property will not emit CSS, so mixins\n  // wouldn't need to check this. However, Sass will throw an error if the\n  // interpolated property is a custom property.\n  @if $value != null {\n    $important-rule: if($important, ' !important', '');\n\n    @if $fallback-value and $enable-fallback-declarations {\n      @include gss.annotate($gss);\n      #{$property}: #{$fallback-value} #{$important-rule};\n\n      // Add @alternate to annotations.\n      $gss: map.merge(\n        $gss,\n        (\n          alternate: true,\n        )\n      );\n    }\n\n    @include gss.annotate($gss);\n    #{$property}: #{$value}#{$important-rule};\n  }\n}\n\n/// Unpacks shorthand values for CSS properties (i.e. lists of 1-3 values).\n/// If a list of 4 values is given, it is returned as-is.\n///\n/// Examples:\n///\n/// unpack-value(4px) => 4px 4px 4px 4px\n/// unpack-value(4px 2px) => 4px 2px 4px 2px\n/// unpack-value(4px 2px 2px) => 4px 2px 2px 2px\n/// unpack-value(4px 2px 0 2px) => 4px 2px 0 2px\n///\n/// @param {Number | Map | List} $value - List of 1 to 4 value numbers.\n/// @return {List} a List of 4 value numbers.\n@function unpack-value($value) {\n  @if meta.type-of($value) == 'map' or list.length($value) == 1 {\n    @return $value $value $value $value;\n  } @else if list.length($value) == 4 {\n    @return $value;\n  } @else if list.length($value) == 3 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 3)\n      list.nth($value, 2);\n  } @else if list.length($value) == 2 {\n    @return list.nth($value, 1) list.nth($value, 2) list.nth($value, 1)\n      list.nth($value, 2);\n  }\n\n  @error \"Invalid CSS property value: '#{$value}' is more than 4 values\";\n}\n","@use '../tokens/m2/mat/option' as tokens-mat-option;\n@use '../tokens/token-utils';\n@use '../style/sass-utils';\n@use '../theming/theming';\n@use '../theming/inspection';\n@use '../theming/validation';\n@use '../typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-option.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme));\n    }\n\n    .mat-accent {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, accent));\n    }\n\n    .mat-warn {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n}\n","@use '../../theming/theming';\n@use '../../theming/inspection';\n@use '../../theming/validation';\n@use '../../style/sass-utils';\n@use '../../tokens/token-utils';\n@use '../../tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use '../../tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n      tokens-mat-full-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n    @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n      tokens-mat-minimal-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-full-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n  @include token-utils.create-token-values(\n      tokens-mat-full-pseudo-checkbox.$prefix, $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-minimal-pseudo-checkbox.$prefix, $mat-minimal-pseudo-checkbox-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {}\n\n/// Outputs color theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-primary {\n      @include _palette-styles($theme, primary);\n    }\n\n    // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n    // theme from their parent, rather than implementing their own theming, which is why we\n    // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n    // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n    // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n    @include _palette-styles($theme, accent);\n    .mat-accent {\n      @include _palette-styles($theme, accent);\n    }\n\n    .mat-warn {\n      @include _palette-styles($theme, warn);\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n","@use './theming/theming';\n@use './theming/inspection';\n@use './theming/validation';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n@use './style/sass-utils';\n@use './typography/typography';\n@use './tokens/token-utils';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use './tokens/m2/mat/option' as tokens-mat-option;\n@use './tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use './tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include ripple-theme.base($theme);\n    @include option-theme.base($theme);\n    @include optgroup-theme.base($theme);\n    @include pseudo-checkbox-theme.base($theme);\n  }\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include ripple-theme.color($theme);\n    @include option-theme.color($theme);\n    @include optgroup-theme.color($theme);\n    @include pseudo-checkbox-theme.color($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-color-tokens($theme));\n    }\n\n    // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n    // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n    // elevated.\n    @for $zValue from 0 through 24 {\n      $selector: elevation.$prefix + $zValue;\n      // We need the `mat-mdc-elevation-specific`, because some MDC mixins\n      // come with elevation baked in and we don't have a way of removing it.\n      .#{$selector}, .mat-mdc-elevation-specific.#{$selector} {\n        @include private.private-theme-elevation($zValue, $theme);\n      }\n    }\n  }\n\n  // TODO(crisbeto): move this into the base.\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include option-theme.typography($theme);\n    @include optgroup-theme.typography($theme);\n    @include pseudo-checkbox-theme.typography($theme);\n    @include ripple-theme.typography($theme);\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include option-theme.density($theme);\n    @include optgroup-theme.density($theme);\n    @include pseudo-checkbox-theme.density($theme);\n    @include ripple-theme.density($theme);\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme, $options...) {\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-app-tokens: token-utils.get-tokens-for($tokens, tokens-mat-app.$prefix, $options...);\n  $mat-ripple-tokens: token-utils.get-tokens-for($tokens, tokens-mat-ripple.$prefix, $options...);\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  $mat-full-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mat-app.$prefix, $mat-app-tokens);\n  @include token-utils.create-token-values(tokens-mat-ripple.$prefix, $mat-ripple-tokens);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n  @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n    $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n    $mat-minimal-pseudo-checkbox-tokens);\n}\n","@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/linear-progress' as tokens-mdc-linear-progress;\n@use '@material/linear-progress/linear-progress-theme' as mdc-linear-progress-theme;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-linear-progress-theme.theme(tokens-mdc-linear-progress.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include mdc-linear-progress-theme.theme(\n    tokens-mdc-linear-progress.get-color-tokens($theme, $palette-name));\n}\n\n/// Outputs color theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-progress-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {}\n\n\n/// Outputs density theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-linear-progress-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-linear-progress.$prefix, $options...);\n  @include mdc-linear-progress-theme.theme($mdc-linear-progress-tokens);\n}\n","@use '@material/textfield/filled-text-field-theme' as mdc-filled-text-field-theme;\n@use '@material/textfield/outlined-text-field-theme' as mdc-outlined-text-field-theme;\n@use '../core/tokens/m2/mdc/filled-text-field' as tokens-mdc-filled-text-field;\n@use '../core/tokens/m2/mdc/outlined-text-field' as tokens-mdc-outlined-text-field;\n@use '../core/tokens/m2/mat/form-field' as tokens-mat-form-field;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-form-field.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n          tokens-mdc-filled-text-field.$prefix,\n          tokens-mdc-filled-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mdc-outlined-text-field.$prefix,\n          tokens-mdc-outlined-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-form-field.$prefix,\n          tokens-mat-form-field.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.get-color-tokens($theme));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-color-tokens($theme));\n    }\n\n    .mat-mdc-form-field.mat-accent {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-mdc-form-field.mat-warn {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-filled-text-field-theme.theme(\n          tokens-mdc-filled-text-field.get-typography-tokens($theme));\n      @include mdc-outlined-text-field-theme.theme(\n          tokens-mdc-outlined-text-field.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-filled-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-filled-text-field.$prefix, $options...);\n  $mdc-outlined-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-outlined-text-field.$prefix, $options...);\n  $mat-form-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-form-field.$prefix, $options...);\n  @include mdc-filled-text-field-theme.theme($mdc-filled-text-field-tokens);\n  @include mdc-outlined-text-field-theme.theme($mdc-outlined-text-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-form-field.$prefix, $mat-form-field-tokens);\n}\n","@use '../core/tokens/m2/mat/select' as tokens-mat-select;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-select.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-select.get-unthemable-tokens();\n      @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-tokens);\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-color-tokens($theme));\n\n      .mat-mdc-form-field.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, accent));\n      }\n\n      .mat-mdc-form-field.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-select-tokens: token-utils.get-tokens-for($tokens, tokens-mat-select.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-select-tokens);\n}\n","@use 'sass:color';\n@use '@material/chips/chip-theme' as mdc-chip-theme;\n@use '../core/tokens/m2/mdc/chip' as tokens-mdc-chip;\n@use '../core/tokens/m2/mat/chip' as tokens-mat-chip;\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-chips.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include mdc-chip-theme.theme(tokens-mdc-chip.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      $default-color-tokens: tokens-mdc-chip.get-color-tokens($theme);\n      @include mdc-chip-theme.theme($default-color-tokens);\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme));\n\n      &.mat-mdc-chip-selected,\n      &.mat-mdc-chip-highlighted {\n        &.mat-primary {\n          $primary-color-tokens: tokens-mdc-chip.get-color-tokens($theme, primary);\n          @include mdc-chip-theme.theme($primary-color-tokens);\n          @include token-utils.create-token-values(\n              tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, primary));\n        }\n\n        &.mat-accent {\n          $accent-color-tokens: tokens-mdc-chip.get-color-tokens($theme, accent);\n          @include mdc-chip-theme.theme($accent-color-tokens);\n          @include token-utils.create-token-values(\n              tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          $warn-color-tokens: tokens-mdc-chip.get-color-tokens($theme, warn);\n          @include mdc-chip-theme.theme($warn-color-tokens);\n          @include token-utils.create-token-values(\n              tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    $typography-tokens: tokens-mdc-chip.get-typography-tokens($theme);\n\n    .mat-mdc-standard-chip {\n      @include mdc-chip-theme.theme($typography-tokens);\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-tokens: tokens-mdc-chip.get-density-tokens($theme);\n\n    .mat-mdc-chip.mat-mdc-standard-chip {\n      @include mdc-chip-theme.theme($density-tokens);\n      @include token-utils.create-token-values(\n          tokens-mat-chip.$prefix, tokens-mat-chip.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-chip.$prefix, $options...);\n  $mat-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mat-chip.$prefix, $options...);\n  @include mdc-chip-theme.theme($mdc-chip-tokens);\n  @include token-utils.create-token-values(tokens-mat-chip.$prefix, $mat-chip-tokens);\n}\n","@use '@material/switch/switch-theme' as mdc-switch-theme;\n@use '@material/form-field/form-field-theme' as mdc-form-field-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/form-field' as tokens-mdc-form-field;\n@use '../core/tokens/m2/mat/switch' as tokens-mat-switch;\n@use '../core/tokens/m2/mdc/switch' as tokens-mdc-switch;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-switch.get-unthemable-tokens();\n      $mdc-tokens: tokens-mdc-switch.get-unthemable-tokens();\n      @include mdc-switch-theme.theme($mdc-tokens);\n      @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-tokens);\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    $is-dark: inspection.get-theme-type($theme) == dark;\n    $mat-tokens: tokens-mat-switch.get-color-tokens($theme);\n    $mdc-tokens: tokens-mdc-switch.get-color-tokens($theme);\n\n    // Add values for MDC slide toggles tokens\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-switch-theme.theme($mdc-tokens);\n      @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-tokens);\n\n      // TODO(wagnermaciel): Use our token system to define this css variable.\n    --mdc-switch-disabled-label-text-color: #{inspection.get-theme-color(\n      $theme,\n      foreground,\n      disabled-text\n    )};\n\n    .mat-mdc-slide-toggle {\n        @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-color-tokens($theme));\n\n        // Change the color palette related tokens to accent or warn if applicable\n        &.mat-accent {\n          @include mdc-switch-theme.theme(\n              tokens-mdc-switch.private-get-color-palette-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          @include mdc-switch-theme.theme(\n              tokens-mdc-switch.private-get-color-palette-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    $mat-tokens: tokens-mat-switch.get-typography-tokens($theme);\n    $mdc-tokens: tokens-mdc-switch.get-typography-tokens($theme);\n\n    // Add values for MDC slide toggle tokens\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-switch-theme.theme($mdc-tokens);\n      @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-tokens);\n\n      .mat-mdc-slide-toggle {\n        @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-typography-tokens($theme));\n      }\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-switch.get-density-tokens($theme);\n      $mdc-tokens: tokens-mdc-switch.get-density-tokens($theme);\n      @include mdc-switch-theme.theme(tokens-mdc-switch.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  // Don't pass $options here, since the mdc-form-field doesn't support color options,\n  // only the mdc-switch does.\n  $mdc-form-field-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-form-field.$prefix);\n  $mat-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mat-switch.$prefix);\n  $mdc-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-switch.$prefix, $options...);\n\n  @include mdc-form-field-theme.theme($mdc-form-field-tokens);\n  @include mdc-switch-theme.theme($mdc-switch-tokens);\n  @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-switch-tokens);\n}\n","@use '@material/radio/radio-theme' as mdc-radio-theme;\n@use '@material/form-field/form-field-theme' as mdc-form-field-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/form-field' as tokens-mdc-form-field;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mat/radio' as tokens-mat-radio;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-radio.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-radio.$prefix, tokens-mat-radio.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-radio-button {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-color-tokens($theme));\n\n      &.mat-primary {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, primary));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, primary));\n      }\n\n      &.mat-accent {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme));\n      }\n\n      &.mat-warn {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, warn));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-radio.$prefix, tokens-mat-radio.get-typography-tokens($theme));\n    }\n\n    .mat-mdc-radio-button {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-scale: inspection.get-theme-density($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-radio.$prefix, tokens-mat-radio.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-radio.$prefix, $options...);\n  $mat-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mat-radio.$prefix, $options...);\n  // Don't pass $options here, since the mdc-form-field doesn't support color options,\n  // only the mdc-radio and mat-radio do.\n  $mdc-form-field-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-form-field.$prefix);\n  @include mdc-radio-theme.theme($mdc-radio-tokens);\n  @include mdc-form-field-theme.theme($mdc-form-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-radio.$prefix, $mat-radio-tokens);\n}\n","@use '@material/slider/slider-theme' as mdc-slider-theme;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/slider' as tokens-mat-slider;\n@use '../core/tokens/m2/mdc/slider' as tokens-mdc-slider;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slider.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-slider.get-unthemable-tokens();\n      @include token-utils.create-token-values(tokens-mat-slider.$prefix, $mat-tokens);\n      @include mdc-slider-theme.theme(tokens-mdc-slider.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    $is-dark: inspection.get-theme-type($theme) == dark;\n\n    $mdc-color-tokens: token-utils.resolve-elevation(\n        tokens-mdc-slider.get-color-tokens($theme),\n        handle-elevation,\n        handle-shadow-color\n    );\n\n    $mat-slider-color-tokens: tokens-mat-slider.get-color-tokens($theme);\n\n  // Add values for MDC slider tokens.\n  @include sass-utils.current-selector-or-root() {\n    @include mdc-slider-theme.theme($mdc-color-tokens);\n    @include token-utils.create-token-values(\n      tokens-mat-slider.$prefix,\n      $mat-slider-color-tokens\n    );\n\n    .mat-accent {\n      @include token-utils.create-token-values(\n        tokens-mat-slider.$prefix,\n        tokens-mat-slider.private-get-color-palette-color-tokens($theme, accent),\n      );\n      @include mdc-slider-theme.theme(\n        tokens-mdc-slider.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n      .mat-warn {\n        @include token-utils.create-token-values(\n          tokens-mat-slider.$prefix,\n          tokens-mat-slider.private-get-color-palette-color-tokens($theme, warn),\n        );\n        @include mdc-slider-theme.theme(\n            tokens-mdc-slider.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n\n/// Outputs typography theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    // Add values for MDC slider tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-slider-theme.theme(tokens-mdc-slider.get-typography-tokens($theme));\n    }\n  }\n}\n\n\n/// Outputs density theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    // Add values for MDC slider tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-slider-theme.theme(tokens-mdc-slider.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-slider.$prefix, $options...);\n  $mat-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mat-slider.$prefix, $options...);\n  @include mdc-slider-theme.theme($mdc-slider-tokens);\n  @include token-utils.create-token-values(tokens-mat-slider.$prefix, $mat-slider-tokens);\n}\n","@use 'sass:map';\n@use '@material/list/evolution-mixins';\n@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;\n@use '@material/radio/radio-theme' as mdc-radio-theme;\n@use '@material/list/list-theme' as mdc-list-theme;\n\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/list' as tokens-mat-list;\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mdc/list' as tokens-mdc-list;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n@mixin base($theme) {\n  // Add default values for tokens not related to color, typography, or density.\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme(tokens-mdc-list.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    $mdc-list-color-tokens: tokens-mdc-list.get-color-tokens($theme);\n\n    // Add values for MDC list tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme($mdc-list-color-tokens);\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-color-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, primary));\n    }\n\n    .mat-accent {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, accent));\n      }\n    }\n\n    .mat-warn {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include mdc-radio-theme.theme(tokens-mdc-radio.get-color-tokens($theme, warn));\n      }\n    }\n\n    .mat-mdc-list-option {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, primary));\n    }\n    .mat-mdc-list-option.mat-accent {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, accent));\n    }\n    .mat-mdc-list-option.mat-warn {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, warn));\n    }\n\n    // There is no token for activated color on nav list.\n    // TODO(mmalerba): Add a token to MDC or make a custom one.\n    .mat-mdc-list-base.mat-mdc-list-base {\n      @include evolution-mixins.list-selected-ink-color(\n          inspection.get-theme-color($theme, primary));\n    }\n\n    // TODO(mmalerba): Leaking styles from the old MDC list mixins used in other components can\n    //  cause opacity issues, so we need this override for now. We can remove it when all\n    //  Angular Material components stop using the old MDC mixins.\n    .mat-mdc-list-base .mdc-list-item--disabled {\n      .mdc-list-item__start,\n      .mdc-list-item__content,\n      .mdc-list-item__end {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-scale: inspection.get-theme-density($theme);\n    $mdc-list-density-tokens: tokens-mdc-list.get-density-tokens($theme);\n\n    // Add values for MDC list tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme($mdc-list-density-tokens);\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-density-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include mdc-radio-theme.theme(tokens-mdc-radio.get-density-tokens($theme));\n    }\n\n    // TODO(mmalerba): This is added to maintain the same style MDC used prior to the token-based\n    //  API, to avoid screenshot diffs. We should remove it in favor of following MDC's current\n    //  style, or add custom tokens for it.\n    .mat-mdc-list-item {\n      &.mdc-list-item--with-leading-avatar,\n      &.mdc-list-item--with-leading-checkbox,\n      &.mdc-list-item--with-leading-icon {\n        &.mdc-list-item--with-one-line {\n          height: map.get((\n            0: 56px,\n            -1: 52px,\n            -2: 48px,\n            -3: 44px,\n            -4: 40px,\n            -5: 40px,\n          ), $density-scale);\n        }\n\n        &.mdc-list-item--with-two-lines {\n          height: map.get((\n            0: 72px,\n            -1: 68px,\n            -2: 64px,\n            -3: 60px,\n            -4: 56px,\n            -5: 56px,\n          ), $density-scale);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    $mdc-list-typography-tokens: tokens-mdc-list.get-typography-tokens($theme);\n\n    // Add values for MDC list tokens.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-list-theme.theme($mdc-list-typography-tokens);\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-typography-tokens($theme));\n    }\n\n    // MDC does not have tokens for the subheader.\n    // TODO(mmalerba): Discuss with MDC about adding them, or create custom tokens.\n    .mdc-list-group__subheader {\n      font: inspection.get-theme-typography($theme, subtitle-1, font);\n      letter-spacing: inspection.get-theme-typography($theme, subtitle-1, letter-spacing);\n    }\n  }\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @include mdc-list-theme.theme(token-utils.get-tokens-for($tokens, tokens-mdc-list.$prefix));\n\n  $mat-list-tokens: token-utils.get-tokens-for($tokens, tokens-mat-list.$prefix);\n  @include token-utils.create-token-values(tokens-mat-list.$prefix, $mat-list-tokens);\n}\n","//\n// Copyright 2022 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// stylelint-disable selector-class-pattern --\n// Internal stylesheet for material list component. Selector '.mdc-*' should\n// only be used in this project.\n\n@use '@material/density/functions' as density-functions;\n@use '@material/dom/mixins' as dom-mixins;\n@use '@material/feature-targeting/feature-targeting';\n@use '@material/ripple/ripple-theme';\n@use '@material/ripple/ripple';\n@use '@material/rtl/rtl';\n@use '@material/shape/mixins' as shape-mixins;\n@use '@material/theme/theme-color';\n@use '@material/theme/theme';\n@use '@material/typography/typography';\n@use './evolution-variables' as variables;\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n\n$ripple-target: variables.$ripple-target;\n\n@mixin static-styles($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include _high-contrast-mode($query: $query);\n  .mdc-list {\n    @include _static-list-base($query: $query);\n  }\n\n  .mdc-list-item__wrapper {\n    @include feature-targeting.targets($feat-structure) {\n      display: block;\n    }\n  }\n\n  .mdc-list-item {\n    @include item-base($query: $query);\n    @include _list-item-baseline-height($query: $query);\n    @include one-line-item-start-alignment(center, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n    @include three-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n\n    @include one-line-item-end-alignment(center, $query: $query);\n    @include two-line-item-end-alignment(center, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n\n    @include feature-targeting.targets($feat-structure) {\n      align-items: stretch;\n      cursor: pointer;\n    }\n\n    // Reset mouse cursor for disabled and non-interactive items.\n    &.mdc-list-item--disabled,\n    &.mdc-list-item--non-interactive {\n      @include feature-targeting.targets($feat-structure) {\n        cursor: auto;\n      }\n    }\n\n    // TODO(b/254711887): Likely need to update this to adhere to a HCM focus\n    // ring spec.\n    // For components using aria-activedescendant, the focus pseudoclass is\n    // never applied and use `.mdc-ripple-upgraded--background-focused` instead.\n    &:not(.mdc-list-item--selected):focus::before,\n    &.mdc-ripple-upgraded--background-focused::before {\n      @include dom-mixins.transparent-border($query: $query);\n    }\n\n    &.mdc-list-item--selected::before {\n      @include dom-mixins.transparent-border(\n        $border-width: 3px,\n        $border-style: double,\n        $query: $query\n      );\n    }\n\n    &.mdc-list-item--selected:focus::before {\n      @include dom-mixins.transparent-border(\n        $border-width: 3px,\n        $query: $query\n      );\n    }\n  }\n\n  // stylelint-disable selector-max-type --\n  // Override anchor tag styles for the use-case of a list being used for navigation\n  a.mdc-list-item {\n    @include feature-targeting.targets($feat-structure) {\n      color: inherit;\n      text-decoration: none;\n    }\n  }\n  // stylelint-enable selector-max-type\n\n  .mdc-list-item__start {\n    @include feature-targeting.targets($feat-structure) {\n      fill: currentColor;\n      flex-shrink: 0;\n      pointer-events: none;\n    }\n  }\n\n  .mdc-list-item__end {\n    @include feature-targeting.targets($feat-structure) {\n      flex-shrink: 0;\n      pointer-events: none;\n    }\n  }\n\n  .mdc-list-item__content {\n    @include typography.overflow-ellipsis($query);\n    @include feature-targeting.targets($feat-structure) {\n      align-self: center;\n      flex: 1;\n      pointer-events: none;\n    }\n\n    .mdc-list-item--with-two-lines &,\n    .mdc-list-item--with-three-lines & {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: stretch;\n      }\n    }\n\n    // Disable interaction on label elements that may automatically\n    // toggle corresponding checkbox / radio input.\n    &[for] {\n      @include feature-targeting.targets($feat-structure) {\n        pointer-events: none;\n      }\n    }\n  }\n\n  .mdc-list-item__primary-text {\n    @include typography.overflow-ellipsis($query);\n\n    .mdc-list-item--with-two-lines &,\n    .mdc-list-item--with-three-lines & {\n      @include typography.text-baseline(\n        $top: 28px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-list-item__secondary-text {\n    @include typography.overflow-ellipsis($query);\n    @include typography.text-baseline(\n      $top: 20px,\n      $display: block,\n      $query: $query\n    );\n\n    .mdc-list-item--with-three-lines & {\n      @include feature-targeting.targets($feat-structure) {\n        white-space: normal;\n        line-height: 20px;\n      }\n    }\n\n    .mdc-list-item--with-overline & {\n      @include feature-targeting.targets($feat-structure) {\n        white-space: nowrap;\n        line-height: auto;\n      }\n    }\n  }\n\n  .mdc-list-item__overline-text {\n    @include typography.overflow-ellipsis($query);\n\n    .mdc-list-item--with-two-lines & {\n      @include typography.text-baseline(\n        $top: 24px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n\n    .mdc-list-item--with-three-lines & {\n      @include typography.text-baseline(\n        $top: 28px,\n        $bottom: 20px,\n        $query: $query\n      );\n    }\n  }\n\n  .mdc-list-item--with-leading-avatar {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        border-radius: 50%;\n      }\n    }\n  }\n\n  .mdc-list-item--with-leading-icon {\n    @include item-start-spacing(\n      $leading: 16px,\n      $trailing: 32px,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-thumbnail {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-image {\n    @include item-start-spacing(16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _one-line-item-taller-density(\n      variables.$one-line-item-density-scale,\n      $query: $query\n    );\n    @include _two-line-item-tall-density(\n      variables.$two-line-item-density-scale,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-leading-video {\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 8px,\n      $query: $query\n    );\n    @include item-start-spacing($leading: 0, $trailing: 16px, $query: $query);\n    @include _two-line-item-text-baseline($query: $query);\n    @include _one-line-item-taller-density(\n      variables.$one-line-item-density-scale,\n      $query: $query\n    );\n    @include _two-line-item-tall-density(\n      variables.$two-line-item-density-scale,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-leading-checkbox {\n    $leading: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-start-spacing($leading, $trailing, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-radio {\n    $leading: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-start-spacing($leading, $trailing, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-leading-switch {\n    @include item-start-spacing(16px, $query: $query);\n    @include two-line-item-start-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n    @include _two-line-item-text-baseline($query: $query);\n    @include _tall-list-item-baseline-height($query: $query);\n  }\n\n  .mdc-list-item--with-trailing-icon {\n    @include item-end-spacing(16px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-meta {\n    @include two-line-item-end-alignment(flex-start, $query: $query);\n    @include three-line-item-end-alignment(flex-start, $query: $query);\n    @include item-end-spacing($leading: 28px, $trailing: 16px, $query: $query);\n    @include _multi-line-item-end-text-baseline($query: $query);\n\n    .mdc-list-item__end {\n      @include typography.typography(caption, $query);\n    }\n  }\n\n  .mdc-list-item--with-trailing-checkbox {\n    $leading: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-end-spacing($leading, $trailing, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-trailing-radio {\n    $leading: absorb-overflow(32px, $actual: 40px, $available: 24px);\n    $trailing: absorb-overflow(16px, $actual: 40px, $available: 24px);\n    $top: absorb-overflow(16px, $actual: 40px, $available: 24px);\n\n    @include item-end-spacing($leading, $trailing, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: $top,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-trailing-switch {\n    @include item-end-spacing(16px, $query: $query);\n    @include three-line-item-end-alignment(\n      $alignment: flex-start,\n      $offset: 16px,\n      $query: $query\n    );\n  }\n\n  .mdc-list-item--with-overline {\n    @include _two-line-item-primary-text-baseline(20px, 0px, $query: $query);\n    @include _three-line-item-primary-baseline(20px, 0px, $query: $query);\n  }\n\n  // This must be specified last to ensure that RTL padding takes priority over\n  // LTR padding in the cascade.\n  .mdc-list-item {\n    @include item-spacing(16px, $query: $query);\n  }\n\n  //\n  // Grouping\n  //\n  .mdc-list-group {\n    @include feature-targeting.targets($feat-structure) {\n      // Cancel top/bottom padding on individual lists within group\n      .mdc-deprecated-list {\n        padding: 0;\n      }\n    }\n  }\n  .mdc-list-group__subheader {\n    @include _list-group-subheader-margin($query: $query);\n  }\n\n  //\n  // Dividers\n  //\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      padding: 0;\n\n      // Allows the use of padding to specify leading and trailing insets\n      // independently.\n      background-clip: content-box;\n    }\n  }\n\n  // The base inset variant corresponds to the item's padding.\n  .mdc-list-divider,\n  .mdc-list-divider--with-leading-text,\n  .mdc-list-divider--with-leading-icon,\n  .mdc-list-divider--with-leading-image,\n  .mdc-list-divider--with-leading-thumbnail,\n  .mdc-list-divider--with-leading-avatar,\n  .mdc-list-divider--with-leading-checkbox,\n  .mdc-list-divider--with-leading-switch,\n  .mdc-list-divider--with-leading-radio {\n    @include divider-leading-inset(16px, $query: $query);\n    @include divider-trailing-inset(16px, $query: $query);\n  }\n\n  .mdc-list-divider--with-leading-video {\n    @include divider-leading-inset(0px, $query: $query);\n  }\n\n  // This is needed to ensure that default padding isn't applied in RTL locales.\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      @include rtl.rtl {\n        padding: 0;\n      }\n    }\n  }\n}\n\n@mixin core-styles($query: feature-targeting.all()) {\n  @include without-ripple($query);\n  @include with-ripple($query);\n}\n\n@mixin without-ripple($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $feat-typography: feature-targeting.create-target($query, typography);\n\n  //\n  // Items\n  //\n\n  @include list-primary-text-ink-color(text-primary-on-background, $query);\n  @include list-secondary-text-ink-color(text-secondary-on-background, $query);\n  @include list-overline-text-ink-color(text-hint-on-background, $query);\n  @include list-icon-fill-color(transparent, $query);\n  @include list-icon-ink-color(text-icon-on-background, $query);\n  @include list-meta-text-ink-color(text-hint-on-background, $query);\n  @include list-disabled-opacity(variables.$content-disabled-opacity, $query);\n  @include list-disabled-ink-color(variables.$content-disabled-color, $query);\n  @include list-selected-ink-color(variables.$content-selected-color, $query);\n\n  @include group-subheader-ink-color(text-primary-on-background, $query);\n\n  @include _high-contrast-mode-border-color($query);\n\n  .mdc-list {\n    @include _typography-list-base($query: $query);\n  }\n\n  .mdc-list-item__primary-text {\n    @include typography.typography(subtitle1, $query);\n  }\n\n  .mdc-list-item__secondary-text {\n    @include typography.typography(body2, $query);\n  }\n\n  .mdc-list-item__overline-text {\n    @include typography.typography(overline, $query);\n  }\n\n  .mdc-list-item--with-leading-avatar {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-icon {\n    @include item-start-size(24px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-thumbnail {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-image {\n    @include item-start-size(56px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-video {\n    @include item-start-size($width: 100px, $height: 56px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-checkbox {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-radio {\n    @include item-start-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-leading-switch {\n    @include item-start-size($width: 36px, $height: 20px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-icon {\n    @include item-end-size(24px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-meta {\n    .mdc-list-item__end {\n      @include typography.typography(caption, $query);\n    }\n  }\n\n  .mdc-list-item--with-trailing-checkbox {\n    @include item-end-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-radio {\n    @include item-end-size(40px, $query: $query);\n  }\n\n  .mdc-list-item--with-trailing-switch {\n    @include item-end-size($width: 36px, $height: 20px, $query: $query);\n  }\n\n  .mdc-list-group__subheader {\n    @include typography.typography(subtitle1, $query);\n  }\n\n  //\n  // Dividers\n  //\n\n  $divider-color: if(\n    theme-color.tone(theme-color.$background) == 'dark',\n    variables.$divider-color-on-dark-bg,\n    variables.$divider-color-on-light-bg\n  );\n\n  @include divider-color($divider-color, $query: $query);\n  @include divider-height(1px, $query: $query);\n  @include static-styles($query: $query);\n} // end of without-ripple\n\n@mixin with-ripple($query: feature-targeting.all()) {\n  @include ripple.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  :not(.mdc-list-item--disabled).mdc-list-item {\n    @include _item-interactive-ripple($query);\n  }\n}\n\n///\n/// Adjusts an offset (i.e., margin) to accomodate contents that are larger than\n/// the space allocated by the specification.\n///\n/// For instance, the specification provides 24x24dp for a checkbox with a 16dp\n/// margin. However, checkboxes are actually 40x40dp. To ensure that the\n/// checkbox is positioned correctly, the margin is reduced by 8dp to reflect\n/// that the margin is already \"baked into\" the checkbox.\n///\n/// Concretely, 40dp - 24dp = 16dp. Assuming that the control is symmetrical,\n/// half of the overflow (8dp) is on the leading side and half on the trailing\n/// side. Therefore, the leading and trailing margins are reduced by 8dp.\n///\n/// Note: this might be more useful if it's added into the leading/trailing\n/// margin mixins as a parameter.\n///\n@function absorb-overflow($offset, $actual, $available, $symmetric: true) {\n  @if $actual <= $available {\n    @return $offset;\n  }\n  $overflow: $actual - $available;\n  @return $offset - math.div($overflow, if($symmetric, 2, 1));\n}\n\n@mixin one-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n\n@mixin two-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n@mixin three-line-item-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    @include feature-targeting.targets($feat-structure) {\n      height: $height;\n    }\n  }\n}\n\n@mixin list-item-height($height) {\n  &.mdc-list-item--with-one-line,\n  &.mdc-list-item--with-two-lines,\n  &.mdc-list-item--with-three-lines {\n    @include theme.property(height, $height);\n  }\n}\n\n@mixin item-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    @include rtl.reflexive-property(padding, $leading, $trailing);\n  }\n}\n\n@mixin one-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin two-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin three-line-item-start-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin one-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-one-line {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin two-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin three-line-item-end-alignment(\n  $alignment,\n  $offset: 0,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-structure) {\n        align-self: $alignment;\n        margin-top: $offset;\n      }\n    }\n  }\n}\n\n@mixin item-start-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    // Extra specificity needed to override default customizations.\n    &.mdc-list-item {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, 0, auto);\n    }\n\n    .mdc-list-item__start {\n      @include rtl.reflexive-property(margin, $leading, $trailing);\n    }\n  }\n}\n\n@mixin item-end-spacing(\n  $leading,\n  $trailing: $leading,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    // Extra specificity needed to override default customizations.\n    &.mdc-list-item {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, auto, 0);\n    }\n\n    .mdc-list-item__end {\n      @include rtl.reflexive-property(margin, $leading, $trailing);\n    }\n  }\n}\n\n@mixin item-start-size(\n  $width,\n  $height: $width,\n  $query: feature-targeting.all()\n) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-list-item__start {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin item-end-size($width, $height: $width, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    .mdc-list-item__end {\n      @include theme.property(width, $width);\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin list-item-selected-container-color($color) {\n  &.mdc-list-item.mdc-list-item--selected {\n    @include theme.property(background-color, $color);\n  }\n}\n\n@mixin list-primary-text-typography($typography-theme) {\n  .mdc-list-item__primary-text {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n@mixin list-primary-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__primary-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-secondary-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__secondary-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-secondary-text-typography($typography-theme) {\n  .mdc-list-item__secondary-text {\n    @include typography.theme-styles($typography-theme);\n  }\n}\n\n@mixin list-overline-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__overline-text {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-meta-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-icon-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--with-leading-icon .mdc-list-item__start,\n  .mdc-list-item--with-trailing-icon .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n@mixin list-icon-fill-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--with-leading-icon .mdc-list-item__start,\n  .mdc-list-item--with-trailing-icon .mdc-list-item__end {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n@mixin list-selected-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--selected,\n  .mdc-list-item--activated {\n    @include list-primary-text-ink-color($color, $query);\n    @include _item-icon-ink-color($color, $leading-only: true, $query: $query);\n  }\n}\n\n@mixin list-selected-meta-text-ink-color(\n  $color,\n  $query: feature-targeting.all()\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--selected,\n  .mdc-list-item--activated {\n    @include list-meta-text-ink-color($color, $query);\n  }\n}\n\n@mixin list-disabled-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--disabled {\n    @include list-primary-text-ink-color($color, $query);\n    @include list-secondary-text-ink-color($color, $query);\n    @include list-overline-text-ink-color($color, $query);\n    @include _item-icon-ink-color($color, $query: $query);\n    @include item-meta-text-ink-color($color, $query);\n  }\n}\n\n@mixin list-disabled-opacity($opacity, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-item--disabled {\n    .mdc-list-item__start,\n    .mdc-list-item__content,\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(opacity, $opacity);\n      }\n    }\n  }\n}\n\n@mixin group-subheader-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-deprecated-list-group__subheader {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(color, $color);\n    }\n  }\n}\n\n///\n/// Sets shape radius (rounded) to single line list variant.\n///\n/// @param {Number | List<Number>} $radius Radius size in `px` or percentage. It can be 4 value corner or single radius.\n///     Set to `50%` for rounded shape.\n/// @param {Boolean} $rtl-reflexive Set to true to flip border radius in RTL context. Defaults to `false`.\n/// @param {Number} $density-scale Density scale of single line list. Set this only when custom density is applied.\n///     Defaults to `$mdc-deprecated-list-single-line-density-scale`.\n///\n/// @access public\n///\n@mixin one-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$one-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-one-line {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$one-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$one-line-item-tall-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$one-line-item-taller-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin two-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$two-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-two-lines {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$two-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch,\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include shape-mixins.radius(\n        $radius,\n        $rtl-reflexive,\n        $component-height:\n          density-functions.prop-value(\n            $density-config: variables.$two-line-item-tall-density-config,\n            $density-scale: $density-scale,\n            $property-name: height\n          ),\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin three-line-list-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$three-line-item-density-scale,\n  $query: feature-targeting.all()\n) {\n  .mdc-list-item--with-three-lines {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height:\n        density-functions.prop-value(\n          $density-config: variables.$three-line-item-density-config,\n          $density-scale: $density-scale,\n          $property-name: height\n        ),\n      $query: $query\n    );\n  }\n}\n\n@mixin divider-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-color) {\n      @include theme.property(background-color, $color);\n    }\n  }\n}\n\n@mixin divider-height($height, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  .mdc-list-divider {\n    @include feature-targeting.targets($feat-structure) {\n      @include theme.property(height, $height);\n    }\n  }\n}\n\n@mixin divider-leading-inset($inset, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-divider--with-leading-inset {\n    @include feature-targeting.targets($feat-structure) {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, $inset, auto);\n    }\n  }\n}\n\n@mixin divider-trailing-inset($inset, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  &.mdc-list-divider--with-trailing-inset {\n    @include feature-targeting.targets($feat-structure) {\n      // We rely on auto to avoid clobbering the opposite padding.\n      @include rtl.reflexive-property(padding, auto, $inset);\n    }\n  }\n}\n\n// The public density mixins apply the appropriate density styles regardless of\n// the item's start contents.\n@mixin one-line-item-density(\n  $density-scale,\n  $exclude-variants: false,\n  $query: feature-targeting.all()\n) {\n  @include _one-line-item-density($density-scale, $query: $query);\n\n  @if not $exclude-variants {\n    &.mdc-list-item--with-leading-avatar,\n    &.mdc-list-item--with-leading-icon,\n    &.mdc-list-item--with-leading-thumbnail,\n    &.mdc-list-item--with-leading-checkbox,\n    &.mdc-list-item--with-leading-radio,\n    &.mdc-list-item--with-leading-switch {\n      @include _one-line-item-tall-density($density-scale, $query: $query);\n    }\n\n    &.mdc-list-item--with-leading-image,\n    &.mdc-list-item--with-leading-video {\n      @include _one-line-item-taller-density($density-scale, $query: $query);\n    }\n  }\n}\n\n@mixin two-line-item-density($density-scale, $query: feature-targeting.all()) {\n  @include _two-line-item-density($density-scale, $query: $query);\n\n  &.mdc-list-item--with-leading-avatar,\n  &.mdc-list-item--with-leading-icon,\n  &.mdc-list-item--with-leading-thumbnail,\n  &.mdc-list-item--with-leading-checkbox,\n  &.mdc-list-item--with-leading-radio,\n  &.mdc-list-item--with-leading-switch,\n  &.mdc-list-item--with-leading-image,\n  &.mdc-list-item--with-leading-video {\n    @include _two-line-item-tall-density($density-scale, $query: $query);\n  }\n}\n\n@mixin three-line-item-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  @include _three-line-item-density($density-scale, $query: $query);\n}\n\n//\n// Private\n//\n\n// Mixins that apply baseline height for one-, two-, and three- line item\n// container heights. This mixin calls the density mixins so that the styles\n// can be overwritten by future density mixin calls.\n@mixin _list-item-baseline-height($query: feature-targeting.all()) {\n  @include _one-line-item-density(\n    variables.$one-line-item-density-scale,\n    $query: $query\n  );\n\n  @include _two-line-item-density(\n    variables.$two-line-item-density-scale,\n    $query: $query\n  );\n\n  @include _three-line-item-density(\n    variables.$three-line-item-density-scale,\n    $query: $query\n  );\n}\n\n@mixin _tall-list-item-baseline-height($query: feature-targeting.all()) {\n  @include _one-line-item-tall-density(\n    variables.$one-line-item-density-scale,\n    $query: $query\n  );\n  @include _two-line-item-tall-density(\n    variables.$two-line-item-density-scale,\n    $query: $query\n  );\n}\n\n// The private density mixins allow density properties to be overridden\n// individually to avoid increasing specificity.\n\n@mixin _one-line-item-density($density-scale, $query: feature-targeting.all()) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _one-line-item-tall-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-tall-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _one-line-item-taller-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$one-line-item-taller-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include one-line-item-height($height, $query: $query);\n}\n\n@mixin _two-line-item-density($density-scale, $query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  $height: density-functions.prop-value(\n    $density-config: variables.$two-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include two-line-item-height($height, $query: $query);\n\n  @if ($density-scale and $density-scale != 0) {\n    &.mdc-list-item--with-two-lines {\n      .mdc-list-item__content {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n      .mdc-list-item__primary-text,\n      .mdc-list-item__secondary-text {\n        margin-top: 0px;\n        margin-bottom: 0px;\n        line-height: 1.4;\n        &::before,\n        &::after {\n          display: none;\n        }\n      }\n    }\n  }\n}\n\n@mixin _two-line-item-tall-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$two-line-item-tall-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include two-line-item-height($height, $query: $query);\n}\n\n@mixin _three-line-item-density(\n  $density-scale,\n  $query: feature-targeting.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$three-line-item-density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include three-line-item-height($height, $query: $query);\n}\n\n// Split the list-base mixin into two sub-mixins, one holding the\n// structural/static styles (static-list-base) and the other holding styles\n// that are themable (typography-list-base). However, the existing list-base\n// mixin need to be preserved as Angular calls this mixin for autocomplete\n// base styling.\n@mixin _typography-list-base($query: feature-targeting.all()) {\n  $feat-typography: feature-targeting.create-target($query, typography);\n  @include typography.typography(subtitle1, $query);\n  @include feature-targeting.targets($feat-typography) {\n    // According to the mocks and stickersheet, the line-height is\n    // adjusted to 24px for text content, same as for body1.\n    /* @alternate */\n    line-height: map.get(map.get(typography.$styles, body1), line-height);\n  }\n}\n\n@mixin _static-list-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include feature-targeting.targets($feat-structure) {\n    margin: 0;\n    padding: 8px 0;\n    list-style-type: none;\n\n    &:focus // lint-disable-focus-psuedo-selector\n    {\n      outline: none;\n    }\n  }\n}\n\n@mixin list-base($query: feature-targeting.all()) {\n  @include _typography-list-base($query: $query);\n  @include _static-list-base($query: $query);\n}\n\n@mixin item-base($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n  @include feature-targeting.targets($feat-structure) {\n    display: flex;\n    position: relative;\n    align-items: center;\n    justify-content: flex-start;\n    overflow: hidden;\n    padding: 0;\n\n    &:focus // lint-disable-focus-psuedo-selector\n    {\n      outline: none;\n    }\n  }\n}\n\n@mixin _item-interactive-ripple($query: feature-targeting.all()) {\n  @include ripple.surface(\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple.radius-bounded(\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states(\n    theme-color.prop-value(on-surface),\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states-activated(\n    primary,\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n  @include ripple-theme.states-selected(\n    primary,\n    false,\n    $ripple-target: variables.$ripple-target,\n    $query: $query\n  );\n\n  #{variables.$ripple-target} {\n    @include ripple.surface-styles($query: $query);\n    @include ripple.target-common($query: $query);\n  }\n}\n\n@mixin _two-line-item-text-baseline($query: feature-targeting.all()) {\n  @include _two-line-item-primary-text-baseline(32px, 20px, $query: $query);\n  @include _two-line-item-overline-text-baseline(28px, 20px, $query: $query);\n  @include _two-line-item-meta-text-baseline($top: 32px, $query: $query);\n}\n\n@mixin _two-line-item-primary-text-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__primary-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _three-line-item-primary-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__primary-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _two-line-item-overline-text-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__overline-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _three-line-item-overline-baseline(\n  $top,\n  $bottom,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__overline-text {\n      @include typography.text-baseline(\n        $top: $top,\n        $bottom: $bottom,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _multi-line-item-end-text-baseline($query: feature-targeting.all()) {\n  &.mdc-list-item--with-two-lines {\n    .mdc-list-item__end {\n      @include typography.text-baseline(\n        $display: block,\n        $top: 28px,\n        $query: $query\n      );\n    }\n  }\n\n  &.mdc-list-item--with-three-lines {\n    .mdc-list-item__end {\n      @include typography.text-baseline(\n        $display: block,\n        $top: 28px,\n        $query: $query\n      );\n    }\n  }\n}\n\n@mixin _two-line-item-meta-text-baseline(\n  $top,\n  $query: feature-targeting.all()\n) {\n  &.mdc-list-item--with-two-lines {\n    &.mdc-list-item--with-trailing-meta {\n      .mdc-list-item__end {\n        @include typography.text-baseline(\n          $display: block,\n          $top: $top,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin item-meta-text-ink-color($color, $query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  &.mdc-list-item--with-trailing-meta {\n    .mdc-list-item__end {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n}\n\n@mixin _item-icon-ink-color(\n  $color,\n  $leading-only: false,\n  $query: feature-targeting.all()\n) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  &.mdc-list-item--with-leading-icon {\n    .mdc-list-item__start {\n      @include feature-targeting.targets($feat-color) {\n        @include theme.property(color, $color);\n      }\n    }\n  }\n\n  @if (not $leading-only) {\n    &.mdc-list-item--with-trailing-icon {\n      .mdc-list-item__end {\n        @include feature-targeting.targets($feat-color) {\n          @include theme.property(color, $color);\n        }\n      }\n    }\n  }\n}\n\n@mixin _high-contrast-mode-border-color($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n  .mdc-list-divider::after {\n    @include feature-targeting.targets($feat-color) {\n      // Color ensures border is shown, but will be overridden by the browser.\n      @include theme.property(border-bottom-color, white);\n    }\n  }\n}\n\n@mixin _high-contrast-mode($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  @include dom-mixins.forced-colors-mode {\n    .mdc-list-divider::after {\n      @include feature-targeting.targets($feat-structure) {\n        content: '';\n        display: block;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n      }\n    }\n  }\n}\n\n@mixin _list-group-subheader-margin($query: feature-targeting.all()) {\n  $feat-structure: feature-targeting.create-target($query, structure);\n\n  $mdc-list-subheader-virtual-height: 3rem;\n  $mdc-list-subheader-leading: map.get(\n    map.get(typography.$styles, body1),\n    line-height\n  );\n  $mdc-list-subheader-margin: calc(\n    (#{$mdc-list-subheader-virtual-height} - #{$mdc-list-subheader-leading}) / 2\n  );\n\n  @include feature-targeting.targets($feat-structure) {\n    margin: $mdc-list-subheader-margin variables.$side-padding;\n  }\n}\n","@use '@material/tab-indicator/tab-indicator-theme' as mdc-tab-indicator-theme;\n@use '@material/tab/tab-theme' as mdc-tab-theme;\n@use '../core/style/sass-utils';\n@use '../core/tokens/m2/mdc/tab' as tokens-mdc-tab;\n@use '../core/tokens/m2/mdc/tab-indicator' as tokens-mdc-tab-indicator;\n@use '../core/tokens/m2/mat/tab-header' as tokens-mat-tab-header;\n@use '../core/tokens/m2/mat/tab-header-with-background' as tokens-mat-tab-header-with-background;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-tab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-tab-indicator-theme.theme(tokens-mdc-tab-indicator.get-unthemable-tokens());\n      @include mdc-tab-theme.secondary-navigation-tab-theme(tokens-mdc-tab.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-tab-header.$prefix, tokens-mat-tab-header.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-tab-header-with-background.$prefix,\n          tokens-mat-tab-header-with-background.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n\n      &.mat-background-primary {\n        @include _background-styles($theme, primary);\n      }\n\n      &.mat-background-accent {\n        @include _background-styles($theme, accent);\n      }\n\n      &.mat-background-warn {\n        @include _background-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin _background-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n    tokens-mat-tab-header-with-background.get-color-tokens($theme, $palette-name));\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include mdc-tab-theme.secondary-navigation-tab-theme(\n    tokens-mdc-tab.get-color-tokens($theme, $palette-name));\n  @include mdc-tab-indicator-theme.theme(\n    tokens-mdc-tab-indicator.get-color-tokens($theme, $palette-name));\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n   tokens-mat-tab-header.get-color-tokens($theme, $palette-name));\n}\n\n/// Outputs typography theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include mdc-tab-theme.secondary-navigation-tab-theme(\n          tokens-mdc-tab.get-typography-tokens($theme));\n      @include mdc-tab-indicator-theme.theme(\n          tokens-mdc-tab-indicator.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include mdc-tab-theme.secondary-navigation-tab-theme(\n          tokens-mdc-tab.get-density-tokens($theme));\n      @include mdc-tab-indicator-theme.theme(\n          tokens-mdc-tab-indicator.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-tab-indicator-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-tab-indicator.$prefix, $options...);\n  $mat-tab-header-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mat-tab-header.$prefix, $options...);\n  // Don't pass $options here, because the mdc-tab doesn't have color variants,\n  // only the mdc-tab-indicator and mat-tab-header do.\n  $mdc-tab-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-tab.$prefix);\n  @include mdc-tab-theme.secondary-navigation-tab-theme($mdc-tab-tokens);\n  @include mdc-tab-indicator-theme.theme($mdc-tab-indicator-tokens);\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix, $mat-tab-header-tokens);\n}\n","@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;\n@use '@material/form-field/form-field-theme' as mdc-form-field-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/form-field' as tokens-mdc-form-field;\n@use '../core/tokens/m2/mat/checkbox' as tokens-mat-checkbox;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-color-tokens($theme));\n    }\n\n    .mat-mdc-checkbox {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-color-tokens($theme));\n\n      &.mat-primary {\n        @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, primary));\n      }\n\n      &.mat-warn {\n        @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-typography-tokens($theme));\n    }\n\n    .mat-mdc-checkbox {\n      @include mdc-form-field-theme.theme(tokens-mdc-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  $density-scale: inspection.get-theme-density($theme);\n\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-checkbox-theme.theme(tokens-mdc-checkbox.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix, tokens-mat-checkbox.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-checkbox-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-checkbox.$prefix, $options...);\n  // Don't pass $options here, since the mdc-form-field doesn't support color options,\n  // only the mdc-checkbox does.\n  $mdc-form-field-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-form-field.$prefix);\n  $mat-checkbox-tokens: token-utils.get-tokens-for($tokens, tokens-mat-checkbox.$prefix);\n  @include mdc-checkbox-theme.theme($mdc-checkbox-tokens);\n  @include mdc-form-field-theme.theme($mdc-form-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-checkbox.$prefix, $mat-checkbox-tokens);\n}\n","@use '@material/button/button-text-theme' as mdc-button-text-theme;\n@use '@material/button/button-filled-theme' as mdc-button-filled-theme;\n@use '@material/button/button-protected-theme' as mdc-button-protected-theme;\n@use '@material/button/button-outlined-theme' as mdc-button-outlined-theme;\n\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/filled-button' as tokens-mdc-filled-button;\n@use '../core/tokens/m2/mat/filled-button' as tokens-mat-filled-button;\n@use '../core/tokens/m2/mdc/outlined-button' as tokens-mdc-outlined-button;\n@use '../core/tokens/m2/mat/outlined-button' as tokens-mat-outlined-button;\n@use '../core/tokens/m2/mdc/protected-button' as tokens-mdc-protected-button;\n@use '../core/tokens/m2/mat/protected-button' as tokens-mat-protected-button;\n@use '../core/tokens/m2/mdc/text-button' as tokens-mdc-text-button;\n@use '../core/tokens/m2/mat/text-button' as tokens-mat-text-button;\n@use '../core/style/sass-utils';\n\n@mixin _text-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-text-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-text-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-text-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-tokens);\n}\n\n@mixin _filled-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-filled-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-filled-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-filled-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-filled-button.$prefix, $mat-tokens);\n}\n\n@mixin _protected-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-protected-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-protected-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-protected-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-protected-button.$prefix, $mat-tokens);\n}\n\n@mixin _outlined-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-outlined-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-outlined-button.get-color-tokens($theme)\n  );\n\n  @include mdc-button-outlined-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix, $mat-tokens);\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-text-button.$prefix, $options...);\n  $mdc-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-protected-button.$prefix, $options...);\n  $mdc-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-filled-button.$prefix, $options...);\n  $mdc-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-outlined-button.$prefix, $options...);\n  $mat-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-text-button.$prefix, $options...);\n  $mat-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-protected-button.$prefix, $options...);\n  $mat-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-filled-button.$prefix, $options...);\n  $mat-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-outlined-button.$prefix, $options...);\n  @include mdc-button-text-theme.theme($mdc-text-button-tokens);\n  @include mdc-button-protected-theme.theme($mdc-protected-button-tokens);\n  @include mdc-button-filled-theme.theme($mdc-filled-button-tokens);\n  @include mdc-button-outlined-theme.theme($mdc-outlined-button-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-text-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-protected-button.$prefix, $mat-protected-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-filled-button.$prefix, $mat-filled-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-outlined-button.$prefix, $mat-outlined-button-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-button.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-button-text-theme.theme(\n        tokens-mdc-text-button.get-unthemable-tokens());\n      @include mdc-button-filled-theme.theme(\n        tokens-mdc-filled-button.get-unthemable-tokens());\n      @include mdc-button-protected-theme.theme(\n        tokens-mdc-protected-button.get-unthemable-tokens());\n      @include mdc-button-outlined-theme.theme(\n        tokens-mdc-outlined-button.get-unthemable-tokens());\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _text-button-variant($theme, null);\n      @include _filled-button-variant($theme, null);\n      @include _protected-button-variant($theme, null);\n      @include _outlined-button-variant($theme, null);\n    }\n\n    .mat-mdc-button {\n      &.mat-primary {\n        @include _text-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _text-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _text-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-unelevated-button {\n      &.mat-primary {\n        @include _filled-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _filled-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _filled-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-raised-button {\n      &.mat-primary {\n        @include _protected-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _protected-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _protected-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-outlined-button {\n      &.mat-primary {\n        @include _outlined-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _outlined-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _outlined-button-variant($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-button-text-theme.theme(\n        tokens-mdc-text-button.get-typography-tokens($theme));\n      @include mdc-button-filled-theme.theme(\n        tokens-mdc-filled-button.get-typography-tokens($theme));\n      @include mdc-button-outlined-theme.theme(\n        tokens-mdc-outlined-button.get-typography-tokens($theme));\n      @include mdc-button-protected-theme.theme(\n        tokens-mdc-protected-button.get-typography-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-button-text-theme.theme(\n        tokens-mdc-text-button.get-density-tokens($theme));\n      @include mdc-button-filled-theme.theme(\n        tokens-mdc-filled-button.get-density-tokens($theme));\n      @include mdc-button-outlined-theme.theme(\n        tokens-mdc-outlined-button.get-density-tokens($theme));\n      @include mdc-button-protected-theme.theme(\n        tokens-mdc-protected-button.get-density-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '@material/density/functions' as mdc-density-functions;\n@use '@material/icon-button/icon-button-theme' as mdc-icon-button-theme;\n@use '../core/tokens/m2/mdc/icon-button' as tokens-mdc-icon-button;\n@use '../core/tokens/m2/mat/icon-button' as tokens-mat-icon-button;\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-icon-button-theme.theme(tokens-mdc-icon-button.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _icon-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-icon-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-icon-button.get-color-tokens($theme)\n  );\n\n  @include mdc-icon-button-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _icon-button-variant($theme, null);\n\n      .mat-mdc-icon-button {\n        &.mat-primary {\n          @include _icon-button-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _icon-button-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _icon-button-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $icon-size: 24px;\n    $density-scale: inspection.get-theme-density($theme);\n    // Manually apply the expected density theming, and include the padding\n    // as it was applied before\n    $calculated-size: mdc-density-functions.prop-value(\n      $density-config: (\n        size: (\n          default: 48px,\n          maximum: 48px,\n          minimum: 28px,\n        ),\n      ),\n      $density-scale: $density-scale,\n      $property-name: size,\n    );\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-density-tokens($theme));\n    }\n\n    // Use `mat-mdc-button-base` to increase the specificity over the button's structural styles.\n    .mat-mdc-icon-button.mat-mdc-button-base {\n      // Match the styles that used to be present. This is necessary for backwards\n      // compat to match the previous implementations selector count (two classes).\n      @include mdc-icon-button-theme.theme((\n        state-layer-size: $calculated-size,\n      ));\n\n      // TODO: Switch calculated-size to \"var(--mdc-icon-button-state-layer-size)\"\n      // Currently fails validation because the variable is \"undefined\"\n      // in the sass stack.\n      // TODO: Switch icon-size to \"var(--mdc-icon-button-icon-size)\". Currently\n      // fails validation because the variable is \"undefined\" in the sass stack.\n      width: var(--mdc-icon-button-state-layer-size);\n      height: var(--mdc-icon-button-state-layer-size);\n      padding: math.div($calculated-size - $icon-size, 2);\n    }\n  }\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    @include mdc-icon-button-theme.theme(map.get($tokens, tokens-mdc-icon-button.$prefix));\n    @include token-utils.create-token-values(\n        tokens-mat-icon-button.$prefix, map.get($tokens, tokens-mat-icon-button.$prefix));\n  }\n}\n","@use '@material/fab/fab-theme' as mdc-fab-theme;\n@use '@material/fab/fab-small-theme' as mdc-fab-small-theme;\n@use '@material/fab/extended-fab-theme' as mdc-extended-fab-theme;\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mdc/fab' as tokens-mdc-fab;\n@use '../core/tokens/m2/mdc/fab-small' as tokens-mdc-fab-small;\n@use '../core/tokens/m2/mdc/extended-fab' as tokens-mdc-extended-fab;\n@use '../core/tokens/m2/mat/fab' as tokens-mat-fab;\n@use '../core/tokens/m2/mat/fab-small' as tokens-mat-fab-small;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-fab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-fab-theme.theme(tokens-mdc-fab.get-unthemable-tokens());\n      @include mdc-fab-small-theme.theme(tokens-mdc-fab-small.get-unthemable-tokens());\n      @include mdc-extended-fab-theme.theme(\n          tokens-mdc-extended-fab.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n@mixin _fab-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab.get-color-tokens($theme)\n  );\n\n  @include mdc-fab-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-tokens);\n}\n\n@mixin _fab-small-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab-small.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab-small.get-color-tokens($theme)\n  );\n\n  @include mdc-fab-small-theme.theme($mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-tokens);\n}\n\n/// Outputs color theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _fab-variant($theme, null);\n      @include _fab-small-variant($theme, null);\n      @include mdc-extended-fab-theme.theme(tokens-mdc-extended-fab.get-color-tokens($theme));\n\n      .mat-mdc-fab {\n        &.mat-primary {\n          @include _fab-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-variant($theme, warn);\n        }\n      }\n\n      .mat-mdc-mini-fab {\n        &.mat-primary {\n          @include _fab-small-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-small-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-small-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-extended-fab-theme.theme(tokens-mdc-extended-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-fab') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-extended-fab-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-extended-fab.$prefix, $options...);\n  $mdc-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab.$prefix, $options...);\n  $mdc-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab-small.$prefix,\n    $options...);\n  $mat-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab.$prefix, $options...);\n  $mat-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab-small.$prefix,\n    $options...);\n  @include mdc-extended-fab-theme.theme($mdc-extended-fab-tokens);\n  @include mdc-fab-theme.theme($mdc-fab-tokens);\n  @include mdc-fab-small-theme.theme($mdc-fab-small-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-fab-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-fab-small-tokens);\n}\n","@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/circular-progress' as tokens-mdc-circular-progress;\n@use '@material/circular-progress/circular-progress-theme' as mdc-circular-progress-theme;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-circular-progress-theme.theme(\n          tokens-mdc-circular-progress.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    $mdc-circular-progress-color-tokens: tokens-mdc-circular-progress.get-color-tokens($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include mdc-circular-progress-theme.theme($mdc-circular-progress-color-tokens);\n\n      .mat-accent {\n        $color: inspection.get-theme-color($theme, accent);\n        @include mdc-circular-progress-theme.theme((active-indicator-color: $color));\n      }\n\n      .mat-warn {\n        $color: inspection.get-theme-color($theme, warn);\n        @include mdc-circular-progress-theme.theme((active-indicator-color: $color));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-circular-progress-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-circular-progress.$prefix, $options...);\n  @include mdc-circular-progress-theme.theme($mdc-circular-progress-tokens);\n}\n","@use 'sass:color';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/badge' as tokens-mat-badge;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-badge.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-color-tokens($theme));\n    }\n\n    .mat-badge-accent {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-badge-warn {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-badge-tokens: token-utils.get-tokens-for($tokens, tokens-mat-badge.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-badge.$prefix, $mat-badge-tokens);\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use '../core/tokens/m2/mat/datepicker' as tokens-mat-datepicker;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n@use '../core/typography/typography';\n@use '../button/icon-button-theme';\n\n// TODO(crisbeto): these variables aren't used anymore and should be removed.\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _calendar-color($theme, $palette-name) {\n  $palette-color: inspection.get-theme-color($theme, $palette-name);\n  $range-color: tokens-mat-datepicker.private-get-range-background-color($palette-color);\n  $range-tokens: tokens-mat-datepicker.get-range-color-tokens($range-color);\n  $calendar-tokens:\n    tokens-mat-datepicker.private-get-calendar-color-palette-color-tokens($theme, $palette-name);\n\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n    map.merge($calendar-tokens, $range-tokens));\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-datepicker.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-color-tokens($theme));\n    }\n\n    .mat-datepicker-content {\n      &.mat-accent {\n        @include _calendar-color($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _calendar-color($theme, warn);\n      }\n    }\n\n    .mat-datepicker-toggle-active {\n      &.mat-accent {\n        $accent-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, accent);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $accent-tokens);\n      }\n\n      &.mat-warn {\n        $warn-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, warn);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $warn-tokens);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: tokens-mat-datepicker.$private-default-comparison-color,\n  $overlap-color: tokens-mat-datepicker.$private-default-overlap-color,\n  $overlap-selected-color:\n    tokens-mat-datepicker.private-get-default-overlap-selected-color($overlap-color)) {\n  $tokens: tokens-mat-datepicker.get-range-color-tokens(\n    $range-color: $range-color,\n    $comparison-color: $comparison-color,\n    $overlap-color: $overlap-color,\n    $overlap-selected-color: $overlap-selected-color,\n  );\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $tokens);\n  }\n}\n\n/// Outputs density theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    // TODO(crisbeto): move this into the structural styles\n    // once the icon button density is switched to tokens.\n\n    // Regardless of the user-passed density, we want the calendar\n    // previous/next buttons to remain at density -2\n    .mat-calendar-controls {\n      @include icon-button-theme.density(-2);\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-datepicker-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-datepicker.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $mat-datepicker-tokens);\n}\n","@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/icon' as tokens-mat-icon;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-colors($theme, $palette-name) {\n  $color: inspection.get-theme-color($theme, $palette-name, text);\n  $tokens: tokens-mat-icon.private-get-icon-color-tokens($color);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-icon.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: primary, secondary, tertiary, or error\n///     (If not specified, default neutral color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon.$prefix,\n        tokens-mat-icon.get-color-tokens($theme));\n    }\n\n    .mat-icon {\n      &.mat-primary {\n        @include _palette-colors($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-colors($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-colors($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {}\n}\n\n/// Outputs density theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: surface, primary, secondary, tertiary,\n///     or error (If not specified, default surface color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-icon-tokens: token-utils.get-tokens-for($tokens, tokens-mat-icon.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $mat-icon-tokens);\n}\n","@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/stepper' as tokens-mat-stepper;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for mat-stepper.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-color-tokens($theme));\n\n      .mat-step-header.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, accent));\n      }\n\n      .mat-step-header.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin theme($theme,  $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    $mat-stepper-tokens: token-utils.get-tokens-for(\n      $tokens,\n      tokens-mat-stepper.$prefix,\n      $options...\n    );\n    @include token-utils.create-token-values(\n        tokens-mat-stepper.$prefix, $mat-stepper-tokens);\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/toolbar' as tokens-mat-toolbar;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mat-toolbar.$prefix,\n    tokens-mat-toolbar.private-get-color-palette-color-tokens(\n      $background-color: inspection.get-theme-color($theme, $palette-name),\n      $text-color: inspection.get-theme-color($theme, $palette-name, default-contrast)\n    )\n  );\n}\n\n@mixin base($theme) {}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-color-tokens($theme));\n    }\n\n    .mat-toolbar {\n      &.mat-primary {\n        @include _palette-styles($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    // TODO(mmalerba): Stop calling this and resolve resulting screen diffs.\n    $theme: inspection.private-get-typography-back-compat-theme($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-density-tokens($theme));\n    }\n  }\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      map.get($tokens, tokens-mat-toolbar.$prefix));\n  }\n}\n","@use '../constants';\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  body {\n    color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n  }\n\n  h6 {\n    color: if($is-dark-theme, constants.$offwhite, constants.$mediumgray);\n  }\n\n  p,\n  ol,\n  ul,\n  ol,\n  li,\n  input,\n  a {\n    color: if($is-dark-theme, constants.$white, constants.$darkgray);\n  }\n\n  .app-toolbar a {\n    color: constants.$white;\n  }\n\n  code {\n    color: if($is-dark-theme, constants.$white, constants.$darkgray);\n  }\n\n  .sidenav-content a {\n    color: if($is-dark-theme, constants.$dull-magenta-700, constants.$lightpurple);\n\n    &:hover {\n      color: if($is-dark-theme, constants.$purple-700, constants.$mediumgray);\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map-get($theme, primary);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  footer {\n    // Because the footer background is always the same color in both light and dark mode, there is no need to specify a foreground color\n    background-color: mat.get-color-from-palette($primary, if($is-dark-theme, 900, 700));\n\n    aio-footer {\n      & > * {\n        color: constants.$white;\n      }\n\n      a {\n        color: constants.$white;\n      }\n\n      h3 {\n        color: constants.$white;\n      }\n    }\n  }\n}\n","@use '../../constants' ;\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $background: map-get($theme, background);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  body{\n    background: if($is-dark-theme,  mat.get-color-from-palette($background, background), constants.$offwhite);\n  }\n\n  @if $is-dark-theme {\n    :root {\n      color-scheme: dark;\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map-get($theme, primary);\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  .background-sky {\n    color: mat.get-color-from-palette($foreground, text);\n  }\n\n  section#intro {\n    color: constants.$white;\n\n    .hero-logo {\n      background-image: url(/assets/images/logos/angular/angular.svg);\n    }\n  }\n\n  .announcement-bar {\n    background-color: rgba(255, 255, 255, 0.1);\n\n    .button {\n      color: constants.$white;\n      background-color: constants.$purple;\n\n      &:hover {\n        color: rgba(constants.$white, 0.7);\n      }\n    }\n  }\n\n  .home-row .card {\n    background-color: if($is-dark-theme, constants.$darkgray, constants.$white);\n\n    .card-text-container {\n      p {\n        color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n      }\n    }\n\n    &:hover {\n      h2 {\n        color: constants.$purple\n      }\n    }\n  }\n\n  .button.hero-cta {\n    background-color: if($is-dark-theme, constants.$darkgray, constants.$white);\n  }\n\n  // Verify\n  .cta-bar {\n    .hero-cta {\n      color: constants.$purple\n    }\n  }\n\n  // Verify\n  .text-headline {\n    color: if($is-dark-theme, constants.$darkgray, constants.$white);\n  }\n\n  .marketing-banner {\n    background-color: lighten(constants.$purple, 10);\n\n    .banner-headline {\n      color: constants.$white;\n    }\n  }\n\n  aio-shell {\n    &.page-home {\n      article {\n        color: if($is-dark-theme, constants.$darkgray, constants.$white);\n        background-color: constants.$purple;\n      }\n    }\n\n    &.page-home, &.page-resources, &.page-events, &.page-contribute {\n      color: if($is-dark-theme, constants.$darkgray, constants.$white);;\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  .nf-response {\n    h1 {\n      color: if($is-dark-theme, constants.$lightpurple, constants.$purple);\n    }\n  }\n\n  .nf-icon.material-icons {\n    color: constants.$purple;\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $background: map-get($theme, background);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  mat-sidenav-container.sidenav-container {\n    background-color: if($is-dark-theme, mat.get-color-from-palette($background, background), constants.$offwhite);\n\n    mat-sidenav.sidenav {\n      background-color: if($is-dark-theme, constants.$deepgray, constants.$white);\n      border-right: 1px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n\n      .doc-version {\n        border-top: 1px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n\n        select {\n          // Verify\n          color: constants.$darkgray;\n          background: rgba(constants.$lightgray, 0.5);\n        }\n      }\n    }\n  }\n\n  aio-nav-menu {\n    aio-nav-item {\n      .vertical-menu-item {\n        color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n\n        &.level-2  {\n          color: if($is-dark-theme, constants.$offwhite, constants.$mediumgray);\n        }\n\n        &.level-3  {\n          color: if($is-dark-theme, constants.$offwhite, constants.$mediumgray);\n        }\n\n        &.level-4  {\n          color: if($is-dark-theme, constants.$offwhite, constants.$mediumgray);\n        }\n\n        &:hover {\n          background-color: if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n          color: if($is-dark-theme, constants.$dull-magenta-700, constants.$purple);\n          text-shadow: 0 0 5px if($is-dark-theme, constants.$black, constants.$white);\n\n          &.selected {\n            color: if($is-dark-theme, constants.$dull-magenta-700, constants.$purple);\n          }\n        }\n\n        &.selected {\n          color: if($is-dark-theme, constants.$dull-magenta-700, constants.$purple);\n        }\n      }\n    }\n  }\n\n  .heading {\n    color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n  }\n}\n","@use '../../constants';\n@use '../../mixins';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $primary: map-get($theme, primary);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  mat-toolbar.mat-toolbar {\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.3);\n\n    mat-icon {\n      color: constants.$white;\n    }\n  }\n\n  // HOME PAGE OVERRIDE: TOPNAV TOOLBAR\n  aio-shell.page-home mat-toolbar.mat-toolbar {\n    background: if($is-dark-theme,  mat.get-color-from-palette($primary, darker), constants.$purple);\n  }\n\n  // HAMBURGER BUTTON\n  .hamburger.mat-mdc-button {\n    &:hover {\n      color: constants.$offwhite;\n    }\n\n    > .mat-icon {\n      color: constants.$white;\n    }\n  }\n\n  .nav-link[href='workshops'] {\n    background: #8000802e;\n  }\n\n  aio-top-menu {\n    ul {\n      li {\n        &:focus {\n          background-color: constants.$accentblue;\n        }\n      }\n    }\n\n    a.nav-link {\n      &:focus {\n        background: rgba(constants.$white, 0.15);\n      }\n    }\n  }\n\n  // SEARCH BOX\n  aio-search-box.search-container {\n    input {\n      color: constants.$darkgray;\n      background-color: constants.$offwhite;\n    }\n  }\n\n  aio-theme-toggle {\n    @media screen and (min-width: 351px) {\n      border-right: 1px solid constants.$white;\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  .alert {\n    color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n\n    &.is-critical {\n      border-left: 8px solid constants.$brightred;\n      background-color: if($is-dark-theme, constants.$darkgray, rgba(constants.$brightred, 0.05));\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        color: constants.$brightred;\n      }\n    }\n\n    &.is-important {\n      border-left: 8px solid constants.$orange;\n      background-color: if($is-dark-theme, constants.$darkgray, rgba(constants.$orange, 0.05));\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        color: constants.$orange;\n      }\n    }\n\n    &.is-helpful {\n      border-left: 8px solid constants.$purple;\n      background-color: if($is-dark-theme, constants.$darkgray, rgba(constants.$purple, 0.05));\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        color: constants.$purple;\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '../../mixins';\n@use '../../ngrx';\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  aio-api-list {\n    .api-filter {\n      .form-search {\n        input {\n          box-shadow: 0 2px 2px rgba(constants.$black, 0.24), 0 0 2px rgba(constants.$black, 0.12);\n          border: 1px solid if($is-dark-theme, constants.$darkgray, constants.$white);\n          background-color: if($is-dark-theme, constants.$darkgray, constants.$white);\n          color: if($is-dark-theme, constants.$dull-magenta-700, constants.$purple-700);\n\n          &::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n            color: constants.$purple-grey-100;\n          }\n          &::-moz-placeholder { /* Firefox 19+ */\n            color: constants.$purple-grey-100;\n          }\n          &:-ms-input-placeholder { /* IE 10+ */\n            color: constants.$purple-grey-100;\n          }\n          &:-moz-placeholder { /* Firefox 18- */\n            color: constants.$purple-grey-100;\n          }\n\n          &:focus {\n            border: 1px solid constants.$purple-400;\n            box-shadow: 0 2px 2px rgba(constants.$purple-400, 0.24), 0 0 2px rgba(constants.$purple-400, 0.12);\n          }\n        }\n\n        .material-icons {\n          // TODO: verify\n          color: constants.$purple-grey-100;\n        }\n      }\n    }\n\n    .api-list-container {\n      a {\n        color: if($is-dark-theme, constants.$dull-magenta-700, constants.$lightpurple);\n      }\n\n      .api-list {\n        li {\n          a {\n            color: if($is-dark-theme, constants.$white, constants.$purple-grey-600);\n\n            &:hover {\n              background: if($is-dark-theme, transparent, constants.$purple-grey-50);\n              color: constants.$purple-500\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .symbol {\n    box-shadow: 0 1px 2px rgba(constants.$black, .24);\n    color: constants.$white;\n\n    // SYMBOL TYPES\n    // Symbol mapping variables in *constants*\n    @each $name, $symbol in constants.$api-symbols {\n      &.#{$name} {\n        background: map-get($symbol, background);\n\n        &:before {\n          content: map-get($symbol, content);\n        }\n      }\n    }\n  }\n\n  .docs-content .api-list {\n    a {\n      color: constants.$purple-grey-600;\n\n      &:hover {\n        background: constants.$purple-grey-50;\n        color: constants.$purple-500;\n      }\n    }\n  }\n\n  .code-links {\n    a {\n      code, .api-doc-code {\n        color: #1E88E5 !important;\n      }\n    }\n  }\n\n  .code-background {\n    span.pln {\n      color: #1E88E5 !important;\n    }\n  }\n\n  .api-doc-code {\n    color: #1a2326;\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  // This rule overrides some Angular Material styles defined for `.mat-button`\n  // (hence we include `.mat-button` in the selector).\n  a.button.mat-button,\n  .button {\n    // COLORS\n\n    &.button-secondary {\n      background: constants.$mediumgray;\n      color: rgba(constants.$white, 0.87);\n    }\n\n    &.button-plain {\n      background: constants.$white;\n      color: rgba(constants.$darkgray, 0.87);\n    }\n\n    &.button-subtle {\n      background: constants.$mediumgray;\n      color: darken(constants.$offwhite, 10%);\n\n      &:hover {\n        color: rgba(constants.$white, 0.7);\n      }\n    }\n\n    &.button-blue {\n      background: constants.$purple;\n      color: rgba(constants.$white, 0.87);\n\n      &:hover {\n        color: rgba(constants.$white, 0.7);\n      }\n    }\n\n    &.button-shield,\n    &.button-shield.mat-button {\n      background-color: constants.$purple;\n      background: constants.$purple url('/projects/ngrx.io/src/assets/images/logos/angular/angular_whiteTransparent.svg') 24px 13px no-repeat;\n      @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {\n        background: constants.$purple url('/projects/ngrx.io/src/assets/images/logos/angular/angular_whiteTransparent.svg') 24px 13px no-repeat;\n        background-size: 22px 22px;\n      }\n    }\n\n    &.button-banner {\n      background: constants.$darkgray;\n      color: rgba(constants.$white, 0.87);\n    }\n  }\n\n  .cta-bar {\n    .button {\n      &:hover {\n        color: constants.$offwhite;\n      }\n    }\n  }\n\n  .group-buttons {\n    // This rule overrides some Angular Material styles defined for `.mat-button`\n    // (hence we include `.mat-button` in the selector).\n    a.button.mat-button.filter-button {\n      border: 2px solid constants.$purple;\n      background-color: rgba(constants.$purple, 0.2);\n      &.selected,\n      &:hover {\n        background-color: constants.$purple;\n        color: constants.$white;\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  .callout {\n    header {\n      color: constants.$white;\n    }\n\n    &.is-critical {\n      border-color: constants.$brightred;\n      background: rgba(constants.$brightred, if($is-dark-theme, 0.1, 0.05));\n\n      header {\n        background: constants.$brightred;\n      }\n    }\n\n    &.is-important {\n      border-color: constants.$orange;\n      background: rgba(constants.$orange,if($is-dark-theme, 0.1, 0.05));\n\n      header {\n        background: constants.$amber-700;\n      }\n    }\n\n    &.is-helpful {\n      border-color: constants.$purple;\n      background: rgba(constants.$purple, if($is-dark-theme, 0.1, 0.05));\n\n      header {\n        background: constants.$purple;\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  .card-container {\n    .docs-card {\n      background-color: if($is-dark-theme, constants.$darkgray, constants.$white);\n\n      section {\n        color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n      }\n\n      p {\n        color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n      }\n\n      .card-footer {\n        color: if($is-dark-theme, constants.$lightgray, constants.$mediumgray);\n        border-top: 0.5px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n\n        a {\n          color: constants.$mediumgray;\n        }\n      }\n\n      &:hover {\n        section {\n          color: constants.$purple;\n        }\n\n        p {\n          color: constants.$darkgray;\n        }\n\n        .card-footer {\n          background-color: rgba(constants.$purple, 0.1);\n          color: constants.$purple;\n        }\n      }\n    }\n  }\n\n  .card-section {\n    &:hover {\n      box-shadow: 0 2px 2px rgba(constants.$black, 0.24), 0 0 2px rgba(constants.$black, 0.12);\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n@use '../../ngrx';\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  code-example {\n    &:not(.no-box) {\n      background-color: if($is-dark-theme, constants.$deepgray, rgb(constants.$backgroundgray, 0.2));\n      border: 0.5px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n      color: constants.$darkgray;\n    }\n\n    // TERMINAL / SHELL TEXT STYLES\n    &.code-shell,\n    &[language=\"sh\"],\n    &[language=\"bash\"] {\n      background-color: constants.$darkgray;\n    }\n\n    header {\n      background-color: constants.$purple;\n      color: constants.$offwhite;\n    }\n  }\n\n  code-tabs {\n    .code-tab-group {\n      .mat-tab-label {\n        &:hover {\n          background: rgba(black, 0.04);\n        }\n      }\n    }\n  }\n\n  code-example.avoid header,\n  code-example.avoidFile header {\n    border: 2px solid constants.$anti-pattern;\n    background: constants.$anti-pattern;\n  }\n\n  code-example.avoid,\n  code-example.avoidFile,\n  code-tabs.avoid mat-tab-body,\n  code-tabs.avoidFile mat-tab-body {\n    border: 0.5px solid constants.$anti-pattern;\n  }\n\n  aio-code {\n    pre.prettyprint {\n      code {\n        ol.linenums {\n          color: lighten(#b3b6b7, 25%);\n        }\n\n        .code-missing {\n          color: constants.$darkred;\n        }\n      }\n\n      .copy-button {\n        color: constants.$purple-grey-200;\n\n        &:hover {\n          color: if($is-dark-theme, constants.$purple-grey-300,  constants.$mediumgray);\n        }\n      }\n\n      &.lang-sh,\n      &.lang-bash {\n        .copy-button {\n          color: if($is-dark-theme, constants.$purple-grey-200, constants.$mediumgray);\n\n          &:hover {\n            color: if($is-dark-theme, constants.$purple-grey-300, constants.$lightgray);\n          }\n        }\n      }\n    }\n  }\n\n  .sidenav-content {\n    code {\n      a {\n        color: if($is-dark-theme, constants.$white, inherit);\n\n        &:hover {\n          color: if($is-dark-theme, constants.$offwhite, constants.$mediumgray);\n        }\n      }\n    }\n\n    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6):not(pre) {\n      > code {\n        background-color: if($is-dark-theme, rgba(constants.$lightgray, 0.1), rgba(constants.$lightgray, 0.5));\n        color: if($is-dark-theme, constants.$offwhite, constants.$darkgray);\n      }\n    }\n  }\n\n  .code-tab-group .mat-tab-label {\n    &:hover {\n      background: rgba(black, 0.04);\n    }\n  }\n\n  // Dark Mode Code Palette\n  $code-lightteal: #17d3ff;\n  $code-lightred: #ffb0b0;\n  $code-lightgreen: #c3e88d;\n  $code-lightpurple: #d1b4ff;\n  $code-lightorange: #ffd779;\n  $code-lightblue: #98caff;\n  $code-grey: rgba(255, 255, 255, 0.7);\n\n  /* PRETTY PRINTING STYLES for prettify.js. */\n\n  /* The following class|color styles are derived from https://github.com/google/code-prettify/blob/master/src/prettify.css*/\n\n  /* SPAN elements with the classes below are added by prettyprint. */\n  .pln {\n    color: if($is-dark-theme, constants.$white, #000);\n  } /* plain text */\n\n  @media screen {\n    .str {\n      color: if($is-dark-theme, $code-lightgreen, #800);\n    } /* string content */\n    .kwd {\n      color: if($is-dark-theme, $code-lightteal, #D86703);\n    } /* a keyword */\n    .com {\n      color: if($is-dark-theme, $code-grey, #060);\n    } /* a comment */\n    .typ {\n      color: if($is-dark-theme, $code-lightred, purple);\n    } /* a type name */\n    .lit {\n      color: if($is-dark-theme, $code-lightpurple, #D86703);\n    } /* a literal value */\n    /* punctuation, lisp open bracket, lisp close bracket */\n    .pun,\n    .opn,\n    .clo {\n      color: if($is-dark-theme, $code-lightorange, #660);\n    }\n    .tag {\n      color: if($is-dark-theme, $code-lightblue, #008);\n    } /* a markup tag name */\n    .atn {\n      color: if($is-dark-theme, $code-lightpurple, #606);\n    } /* a markup attribute name */\n    .atv {\n      color: if($is-dark-theme, $code-lightorange, #800);\n    } /* a markup attribute value */\n    .dec,\n    .var {\n      color: if($is-dark-theme, $code-lightpurple, #606);\n    } /* a declaration; a variable name */\n    .fun {\n      color: if($is-dark-theme, $code-lightred, red);\n    } /* a function name */\n  }\n\n  /* Use higher contrast and text-weight for printable form. */\n  @media print, projection {\n    .str {\n      color: #060;\n    }\n    .kwd {\n      color: #006;\n      font-weight: bold;\n    }\n    .com {\n      color: #600;\n      font-style: italic;\n    }\n    .typ {\n      color: #404;\n      font-weight: bold;\n    }\n    .lit {\n      color: #044;\n    }\n    .pun,\n    .opn,\n    .clo {\n      color: #440;\n    }\n    .tag {\n      color: #006;\n      font-weight: bold;\n    }\n    .atn {\n      color: #404;\n    }\n    .atv {\n      color: #060;\n    }\n  }\n\n  /* SHELL / TERMINAL CODE BLOCKS */\n\n  code-example {\n    &.code-shell,\n    &[language=\"sh\"],\n    &[language=\"bash\"] {\n      .pnk,\n      .blk,\n      .pln,\n      .otl,\n      .kwd,\n      .typ,\n      .tag,\n      .str,\n      .atv,\n      .atn,\n      .com,\n      .lit,\n      .pun,\n      .dec {\n        color: constants.$codegreen;\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $background: map-get($theme, background);\n\n  .group-buttons {\n    a {\n      &.selected {\n        background-color: constants.$purple;\n        color: constants.$white;\n      }\n    }\n  }\n\n  aio-contributor, ngrx-contributor {\n    background: if($is-dark-theme, constants.$deepgray, constants.$white);\n    box-shadow: 0 2px 2px rgba(10, 16, 20, 0.24), 0 0 2px rgba(10, 16, 20, 0.12);\n\n    .contributor-info {\n      background: rgba(constants.$darkgray, 0.5);\n\n      .info-item {\n        color: constants.$white;\n\n        &:hover {\n          box-shadow: 0 8px 8px rgba(10, 16, 20, 0.24), 0 0 8px rgba(10, 16, 20, 0.12);\n          color: constants.$lightgray;\n        }\n      }\n\n      [mat-button] {\n        color: constants.$white;\n\n        &:hover {\n          color: constants.$lightgray;\n        }\n      }\n    }\n\n    .contributor-image {\n      border: 2px solid constants.$lightgray;\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n\n  details {\n    box-shadow: 0 1px 4px 0 rgba(constants.$black, 0.37);\n  }\n\n  details + details {\n    margin-top: 1em;\n  }\n  \n  summary {\n    color: if($is-dark-theme, constants.$white, constants.$black);\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  .filetree {\n    background: constants.$offwhite;\n    border: 4px solid constants.$lightgray;\n\n    .file {\n      color: constants.$darkgray;\n    }\n\n    .children {\n      .file {\n        &:before {\n          border-color: constants.$lightgray;\n        }\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  .sidenav-content {\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      .header-link {\n        color: constants.$mediumgray;\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  hr {\n    background: if($is-dark-theme, constants.$lightpurple, #36203A);\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  .content {\n    figure {\n      background: constants.$white;\n      box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, .2);\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  label.raised, .api-header label {\n    color: constants.$white;\n\n    &.api-status-label {\n      background-color: constants.$mediumgray;\n\n      &.deprecated, &.security, &.impure-pipe {\n        background-color: constants.$brightred;\n      }\n    }\n\n    &.api-type-label {\n      background-color: constants.$accentblue;\n\n      @each $name, $symbol in constants.$api-symbols {\n        &.#{$name} {\n          background: map-get($symbol, background);\n        }\n      }\n    }\n\n    &.page-label {\n      background-color: constants.$mist;\n      color: constants.$mediumgray;\n    }\n\n    &.property-type-label {\n      background-color: constants.$darkgray;\n      color: constants.$white;\n    }\n  }\n}\n","@use '../../constants';\n@use '../../ngrx';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  aio-notification {\n    background: constants.$purple;\n\n    .close-button {\n      background: constants.$darkgray;\n    }\n\n    .content {\n      .message {\n        color: constants.$offwhite;\n      }\n\n      .action-button {\n        background: mat.get-color-from-palette(ngrx.$dull-magenta, 700);\n        color: constants.$offwhite;\n      }\n    }\n  }\n}\n","@mixin theme($theme) {\n  .presskit-container {\n    h2 {\n      color: #37474F;\n    }\n\n    .cc-by-anchor {\n      color: grey !important;\n    }\n\n    .presskit-row {\n      .presskit-inner {\n        h3 {\n          color: #455A64;\n        }\n\n        .transparent-img-bg {\n          background-color: #34474F;\n        }\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n\n  aio-resource-list {\n    .shadow-1 {\n      box-shadow: 0 1px 4px 0 rgba(constants.$black, 0.37);\n    }\n\n    c-resource-nav {\n      background-color: #fff;\n\n      a {\n        color: #373E41;\n      }\n\n      .category {\n        .category-link {\n          &:hover {\n            background: #edf0f2;\n            color: #2B85E7;\n          }\n        }\n      }\n\n      .subcategory {\n        .subcategory-link {\n          &:hover {\n            background: #edf0f2;\n            color: #2B85E7;\n          }\n        }\n      }\n    }\n\n    .subcategory-title {\n      background-color: if($is-dark-theme, constants.$darkgray, constants.$mist);\n      color: if($is-dark-theme, constants.$white, #373E41) ;\n    }\n\n    .resource-row-link {\n      color: if($is-dark-theme, constants.$offwhite, #1a2326);\n\n      &:hover {\n        color: if($is-dark-theme, constants.$offwhite, #1a2326);\n        border-color: if($is-dark-theme, rgba(constants.$accentblue, 0.5), rgba(constants.$blue, 0.5));\n        box-shadow: 0 8px 8px rgb(1 131 163 / 24%), 0 0 8px rgb(1 67 163 / 12%), 0 6px 18px rgb(43 133 231 / 12%);\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  aio-search-results {\n    &.embedded {\n      .search-results {\n        .search-area {\n          .search-section-header {\n            color: constants.$darkgray;\n          }\n\n          a {\n            color: if($is-dark-theme, constants.$offwhite ,lighten(constants.$darkgray, 10));\n            &:hover {\n              color: constants.$accentblue;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .search-results {\n    background-color: constants.$darkgray;\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.3);\n\n    .search-area {\n      .search-section-header {\n        color: constants.$white;\n      }\n    }\n\n    .no-results {\n      color:  mat.get-color-from-palette($foreground, text);\n    }\n\n    a {\n      color:  mat.get-color-from-palette($foreground, text);\n    }\n  }\n\n  .search-area {\n    a {\n      color: constants.$lightgray;\n      &:hover {\n        color: constants.$white;\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $background: map-get($theme, background);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  .form-select-button {\n    background: if($is-dark-theme, constants.$darkgray, constants.$white);\n    box-shadow: 0 2px 2px rgba(constants.$black, 0.24), 0 0 2px rgba(constants.$black, 0.12);\n    border: 1px solid if($is-dark-theme, constants.$darkgray, constants.$white);\n    color: if($is-dark-theme, constants.$purple-grey-200, constants.$purple-grey-600);\n\n    &:focus {\n      border: 1px solid constants.$purple-400;\n      box-shadow: 0 2px 2px rgba(constants.$purple-400, 0.24), 0 0 2px rgba(constants.$purple-400, 0.12);\n    }\n\n    &[disabled] {\n      color: lightgrey;\n    }\n  }\n\n  .form-select-dropdown {\n    background: mat.get-color-from-palette($background, background);\n    box-shadow: 0 16px 16px rgba(constants.$black, 0.24), 0 0 16px rgba(constants.$black, 0.12);\n\n    li {\n      &:hover {\n        background-color: if($is-dark-theme, #444, constants.$purple-grey-50);\n      }\n\n      &.selected {\n        background-color: if($is-dark-theme, constants.$darkgray, constants.$purple-grey-100);\n      }\n    }\n  }\n\n  .heading {\n    color: constants.$darkgray;\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $background: map-get($theme, background);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  table {\n    box-shadow: 0 2px 2px rgba(constants.$mediumgray, 0.24), 0 0 2px rgba(if($is-dark-theme, constants.$white, constants.$black), 0.12);\n    background-color: if($is-dark-theme,  mat.get-color-from-palette($background, background), constants.$offwhite);\n\n    thead > {\n      tr > th {\n        background: if($is-dark-theme, constants.$darkgray, rgba(constants.$lightgray, 0.2));\n        border-bottom: 1px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n        color: if($is-dark-theme, constants.$white, constants.$darkgray);\n      }\n    }\n\n    tbody > tr > {\n      th,\n      td {\n        border-bottom: 1px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n      }\n\n      td {\n        tr td:first-child {\n          @media (max-width: 480px) {\n            background-color: constants.$lightgray;\n          }\n        }\n      }\n\n      th {\n        background: if($is-dark-theme, constants.$deepgray, rgba(constants.$lightgray, 0.2));\n        &:not(:last-child) {\n          border-right: 1px solid if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n        }\n      }\n    }\n\n    tbody > tr {\n      &:last-child td {\n        @media (max-width: 480px) {\n          border-bottom: 1px solid if($is-dark-theme, constants.$deepgray, constants.$lightgray);\n        }\n      }\n    }\n  }\n}\n","@use '../../constants';\n@use '@angular/material' as mat;\n\n@mixin theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n\n  .toc-inner {\n    .toc-heading {\n      &.secondary {\n        &:hover {\n          color: constants.$accentblue;\n        }\n      }\n    }\n\n    button {\n      &.toc-heading,\n      &.toc-more-items {\n        &.embedded:focus {\n          background: if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n          color: if($is-dark-theme, constants.$white, constants.$mediumgray);\n        }\n      }\n\n      &.toc-heading {\n        &:hover:not(.embedded) {\n          color: constants.$accentblue;\n        }\n      }\n\n      &.toc-more-items {\n        color: if($is-dark-theme, constants.$lightgray, constants.$mediumgray);\n\n        &:hover {\n          color: constants.$accentblue;\n        }\n      }\n    }\n\n    ul.toc-list {\n      li {\n        &.h1:after {\n          background: if($is-dark-theme, constants.$mediumgray, constants.$lightgray);\n        }\n\n        a {\n          color: if($is-dark-theme, constants.$white, lighten(constants.$darkgray, 10));\n        }\n\n        &:hover {\n          * {\n            color: if($is-dark-theme, constants.$lightblue, constants.$accentblue);\n          }\n        }\n\n        &.active {\n          * {\n            color: if($is-dark-theme, constants.$dull-magenta-700, constants.$purple);\n          }\n\n          a:before {\n            background: if($is-dark-theme, constants.$dull-magenta-700, constants.$purple);\n          }\n        }\n      }\n\n      &:not(.embedded) li {\n        &:before {\n          border-left-color: if($is-dark-theme, constants.$darkgray, constants.$lightgray);\n        }\n\n        &:not(.active):hover {\n          a:before {\n            background: constants.$lightgray;\n          }\n        }\n      }\n    }\n\n    &.embedded {\n      .toc-inner {\n        .toc-heading {\n          &.secondary {\n            color:  mat.get-color-from-palette($foreground, text);\n          }\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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AA,CAAA,EAAA,IAAA,IAAA,SJmZJ,CO9aM,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,SJuZJ,COlbM,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,SJ2ZJ,COtbM,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,SAAA,CAAA,EAAA,IAAA,KAAA,SJ+ZJ,CO1bM,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJmaJ,CO9bM,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJuaJ,COlcM,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ2aJ,COtcM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ+aJ,CO1cM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJmbJ,CO9cM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJubJ,COldM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ2bJ,COtdM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ+bJ,CO1dM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJmcJ,CO9dM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJucJ,COleM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ2cJ,COteM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ+cJ,CO1eM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJmdJ,CO9eM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJudJ,COlfM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ2dJ,COtfM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJ+dJ,CO1fM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJmeJ,CO9fM,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBH2BF,WAAA,EAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,IAAA,SAAA,CAAA,EAAA,IAAA,KAAA,IAAA,SJueJ,COzfI,CAAA,wBACE,QAAA,IP4fN,CGxiBI,KC6DA,8BAAA,MAAA,EAAA,WAAA,qCAAA,KAAA,8BAAA,KAAA,kCAAA,SAAA,gCAAA,GJmfJ,CGhjBI,KC6DA,gCAAA,MAAA,EAAA,WAAA,uCAAA,KAAA,gCAAA,KAAA,oCAAA,SAAA,kCAAA,GJ2fJ,CGxjBI,KC6DA,qCAAA,IAAA,qCAAA,IAAA,mCAAA,GJigBJ,CG9jBI,KC6DA,qCAAA,MAAA,yCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,MAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJ0gBJ,CGvkBI,KC6DA,4BAAA,MAAA,EAAA,WAAA,mCAAA,KAAA,4BAAA,KAAA,gCAAA,QAAA,8BAAA,IAAA,+BAAA,MAAA,EAAA,WAAA,sCAAA,KAAA,+BAAA,KAAA,mCAAA,cAAA,iCAAA,GJuhBJ,CGplBI,KC6DA,+CAAA,IAAA,oCAAA,IAAA,mCAAA,CJ6hBJ,CQrkBI,CAAA,qBJwCA,8CAAA,QAAA,mCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IJkiBJ,CQvkBM,CAHF,oBAGE,CHRF,WD6CA,8CAAA,QAAA,mCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IJsiBJ,CQvkBM,CAPF,oBAOE,CHPF,SDwCA,8CAAA,QAAA,mCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IJ0iBJ,CGvmBI,KC6DA,qCAAA,IAAA,iDAAA,IJ+iBJ,CG5mBI,KC6DA,qCAAA,QAAA,2CAAA,IJojBJ,CGjnBI,KC6DA,0CAAA,MAAA,EAAA,WAAA,0CAAA,KAAA,4CAAA,IAAA,8CAAA,aJ2jBJ,CGxnBI,KC6DA,iDAAA,IAAA,uDAAA,IAAA,yCAAA,IAAA,yCAAA,IAAA,+CAAA,IAAA,2CAAA,GJokBJ,CGjoBI,KC6DA,qCAAA,QAAA,sDAAA,QAAA,gDAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,yCAAA,WAAA,kDAAA,QAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,mDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,sDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,sDAAA,QAAA,sDAAA,QAAA,gDAAA,QAAA,2CAAA,QAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,sDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,sDAAA,QAAA,4DAAA,QAAA,4DAAA,QAAA,uCAAA,QAAA,+CAAA,QAAA,kDAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,qDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,6CAAA,QAAA,wDAAA,QAAA,kDAAA,QAAA,wDAAA,QAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qDAAA,QAAA,qDAAA,QAAA,+CAAA,QAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mCAAA,QAAA,2CAAA,QAAA,oDAAA,SAAA,qCAAA,MAAA,8CAAA,MAAA,sCAAA,MAAA,+CAAA,MAAA,kDAAA,MAAA,kDAAA,MAAA,4CAAA,MAAA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4CAAA,IAAA,4CAAA,GJgoBJ,CSzpBI,CAAA,kBAAA,CJpBA,WD6CA,qCAAA,QAAA,sDAAA,QAAA,gDAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,uCAAA,QAAA,+CAAA,QAAA,kDAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,2CAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IJ0oBJ,CS1pBI,CATA,kBASA,CJxBA,SDwCA,qCAAA,QAAA,sDAAA,QAAA,gDAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,uCAAA,QAAA,+CAAA,QAAA,kDAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IJopBJ,CGjtBI,KC6DA,mCAAA,KAAA,uCAAA,MAAA,6CAAA,KAAA,0DAAA,KAAA,6DAAA,GJ4pBJ,CGztBI,KC6DA,yCAAA,MAAA,EAAA,WAAA,yCAAA,KAAA,6CAAA,SAAA,2CAAA,IAAA,2CAAA,MAAA,EAAA,WAAA,2CAAA,KAAA,+CAAA,SAAA,6CAAA,IAAA,sCAAA,MAAA,EAAA,WAAA,6CAAA,KAAA,sCAAA,KAAA,0CAAA,SAAA,wCAAA,IAAA,qDAAA,KAAA,sCAAA,MAAA,EAAA,WAAA,6CAAA,KAAA,sCAAA,KAAA,0CAAA,cAAA,wCAAA,GJkrBJ,CG/uBI,KC6DA,yCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJsrBJ,CGnvBI,KC6DA,qCAAA,MAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IJisBJ,CUzuBM,KAAA,CDeF,kBCfE,CLLF,WD6CA,qCAAA,MAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IJ2sBJ,CU9uBM,KAAA,CDUF,kBCVE,CLLF,SDwCA,qCAAA,MAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IJqtBJ,CGlxBI,KC6DA,8BAAA,WAAA,KJytBJ,CGtxBI,KC6DA,gCAAA,MAAA,EAAA,WAAA,uCAAA,KAAA,gCAAA,KAAA,oCAAA,SAAA,kCAAA,GJiuBJ,CG9xBI,KC6DA,oCAAA,IAAA,+CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJsuBJ,CGnyBI,KC6DA,qCAAA,KJ0uBJ,CGvyBI,KC6DA,yCAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,8BAAA,IAAA,kCAAA,KAAA,wCAAA,KAAA,kCAAA,EAAA,gCAAA,MAAA,8BAAA,IAAA,8BAAA,KAAA,KAAA,2CAAA,KAAA,KAAA,+BAAA,EAAA,KAAA,GJwvBJ,CGrzBI,KC6DA,8BAAA,MAAA,4BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GJ8vBJ,CG3zBI,KC6DA,2BAAA,MAAA,EAAA,WAAA,kCAAA,KAAA,2BAAA,KAAA,6BAAA,IAAA,+BAAA,QAAA,mCAAA,MAAA,EAAA,WAAA,0CAAA,KAAA,mCAAA,KAAA,qCAAA,IAAA,uCAAA,QJ2wBJ,CWv0BI,CAAA,sBP4DA,mCAAA,QAAA,mCAAA,KAAA,KAAA,KAAA,KAAA,4CAAA,QAAA,4CAAA,KAAA,KAAA,KAAA,KAAA,oCAAA,KAAA,gCAAA,KAAA,0BAAA,EAAA,0BAAA,YAAA,mCAAA,YAAA,gCAAA,YAAA,sCAAA,IAAA,gDAAA,EAAA,wCAAA,EAAA,+CAAA,IAAA,8DAAA,EAAA,4CAAA,EAAA,uCAAA,GAAA,oCAAA,IAAA,0CAAA,EAAA,8CAAA,YAAA,uDAAA,YAAA,sDAAA,EAAA,sDAAA,CJqyBJ,CW/0BI,CAlBA,sBP4DA,sCAAA,QAAA,qCAAA,QAAA,8CAAA,QAAA,8CAAA,QAAA,mDAAA,QAAA,oCAAA,MAAA,oCAAA,MAAA,6CAAA,MAAA,sCAAA,IAAA,6CAAA,MAAA,+CAAA,IAAA,6BAAA,QAAA,sCAAA,QAAA,iCAAA,QAAA,0CAAA,QAAA,0CAAA,QAAA,4DAAA,QAAA,mDAAA,QAAA,kDAAA,QAAA,yCAAA,OJ4zBJ,CW91BQ,CA1BJ,qBA0BI,CAAA,qBAAA,CV1CN,YU0CM,CA1BJ,qBA0BI,CAAA,wBAAA,CV1CN,YG4EE,sCAAA,MAAA,qCAAA,QAAA,8CAAA,QAAA,8CAAA,QAAA,mDAAA,QAAA,oCAAA,MAAA,oCAAA,MAAA,6CAAA,MAAA,sCAAA,IAAA,6CAAA,MAAA,+CAAA,IAAA,6BAAA,MAAA,sCAAA,MAAA,iCAAA,MAAA,0CAAA,MAAA,0CAAA,MAAA,4DAAA,MAAA,mDAAA,MAAA,kDAAA,MAAA,yCAAA,KJk1BJ,CW72BQ,CAjCJ,qBAiCI,CAPA,qBAOA,CNlBJ,WMkBI,CAjCJ,qBAiCI,CAPA,wBAOA,CNlBJ,WD6CA,sCAAA,MAAA,qCAAA,QAAA,8CAAA,QAAA,8CAAA,QAAA,mDAAA,QAAA,oCAAA,MAAA,oCAAA,MAAA,6CAAA,MAAA,sCAAA,IAAA,6CAAA,MAAA,+CAAA,IAAA,6BAAA,MAAA,sCAAA,MAAA,iCAAA,MAAA,0CAAA,MAAA,0CAAA,MAAA,4DAAA,MAAA,mDAAA,MAAA,kDAAA,MAAA,yCAAA,KJw2BJ,CW53BQ,CAxCJ,qBAwCI,CAdA,qBAcA,CNpBJ,SMoBI,CAxCJ,qBAwCI,CAdA,wBAcA,CNpBJ,SDwCA,sCAAA,MAAA,qCAAA,QAAA,8CAAA,QAAA,8CAAA,QAAA,mDAAA,QAAA,oCAAA,MAAA,oCAAA,MAAA,6CAAA,MAAA,sCAAA,IAAA,6CAAA,MAAA,+CAAA,IAAA,6BAAA,MAAA,sCAAA,MAAA,iCAAA,MAAA,0CAAA,MAAA,0CAAA,MAAA,4DAAA,MAAA,mDAAA,MAAA,kDAAA,MAAA,yCAAA,KJ83BJ,CW72BI,CAAA,YAAA,CA7EA,sBP4DA,6BAAA,IJk4BJ,CWl4BI,CA5DA,sBP4DA,4BAAA,MAAA,EAAA,WAAA,mCAAA,KAAA,4BAAA,KAAA,gCAAA,cAAA,8BAAA,GJ04BJ,CGv8BI,KC6DA,6CAAA,IAAA,qCAAA,IAAA,+CAAA,IAAA,4BAAA,KAAA,2BAAA,KAAA,2BAAA,KAAA,iCAAA,KAAA,2BAAA,KAAA,0BAAA,IAAA,0BAAA,KAAA,mCAAA,KAAA,iDAAA,IAAA,iDAAA,IAAA,mDAAA,GAAA,mDAAA,IAAA,mDAAA,IAAA,qDAAA,GAAA,+CAAA,IAAA,iDAAA,IAAA,qCAAA,KAAA,mCAAA,KAAA,kCAAA,KAAA,oCAAA,KAAA,gDAAA,EAAA,0DAAA,EAAA,wDAAA,EAAA,kDAAA,EAAA,4DAAA,EAAA,0DAAA,EAAA,oCAAA,EAAA,mCAAA,EAAA,uCAAA,UAAA,KAAA,IAAA,aAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,sCAAA,UAAA,KAAA,IAAA,aAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,kCAAA,IAAA,kCAAA,YAAA,sDAAA,IAAA,sDAAA,WJk7BJ,CG/+BI,KC6DA,+CAAA,QAAA,oCAAA,QAAA,+CAAA,QAAA,iDAAA,QAAA,0CAAA,QAAA,0CAAA,QAAA,4CAAA,QAAA,yCAAA,QAAA,yCAAA,QAAA,2CAAA,QAAA,mCAAA,QAAA,6CAAA,QAAA,2CAAA,KAAA,4CAAA,QAAA,+CAAA,QAAA,6CAAA,KAAA,8CAAA,QAAA,mCAAA,IAAA,mBAAA,EAAA,MAAA,sCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kCAAA,MAAA,+CAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kCAAA,KAAA,4CAAA,QAAA,iDAAA,QAAA,2CAAA,QAAA,sCAAA,QAAA,4CAAA,QAAA,iDAAA,QAAA,2CAAA,QAAA,oCAAA,KAAA,8CAAA,QAAA,mDAAA,QAAA,6CAAA,QAAA,qCAAA,QQ7BA,wCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IZq/BJ,CY/+BI,KAAA,CAAA,qBRuBA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJ29BJ,CY9+BQ,KAAA,CAJJ,oBAII,CP1BJ,WD6CA,+CAAA,QAAA,oCAAA,QAAA,+CAAA,QAAA,iDAAA,QAAA,0CAAA,QAAA,0CAAA,QAAA,4CAAA,QAAA,yCAAA,QAAA,yCAAA,QAAA,2CAAA,QAAA,mCAAA,OJw+BJ,CYt/BQ,KAAA,CATJ,oBASI,CP1BJ,SDwCA,+CAAA,QAAA,oCAAA,QAAA,+CAAA,QAAA,iDAAA,QAAA,0CAAA,QAAA,0CAAA,QAAA,4CAAA,QAAA,yCAAA,QAAA,yCAAA,QAAA,2CAAA,QAAA,mCAAA,OJq/BJ,CGljCI,KC6DA,+BAAA,IJy/BJ,CY/+BM,KAAA,CAjCF,qBRuBA,kCAAA,MAAA,EAAA,WAAA,yCAAA,KAAA,kCAAA,KAAA,sCAAA,cAAA,oCAAA,GJigCJ,CG9jCI,KC6DA,4CAAA,IAAA,8CAAA,IAAA,8BAAA,IJugCJ,Ca/iCI,CAAA,qBTwCA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJ2gCJ,CahjCM,CAHF,oBAGE,CZvCJ,YG4EE,0CAAA,KAAA,4CAAA,KAAA,yCAAA,QAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,QAAA,uCAAA,QAAA,iCAAA,QAAA,yCAAA,QAAA,0BAAA,KAAA,kCAAA,QAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJyhCJ,CaxjCM,CATF,oBASE,CRdF,WD6CA,0CAAA,KAAA,4CAAA,KAAA,yCAAA,QAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,QAAA,uCAAA,QAAA,iCAAA,QAAA,yCAAA,QAAA,0BAAA,KAAA,kCAAA,QAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJuiCJ,CahkCM,CAfF,oBAeE,CRfF,SDwCA,0CAAA,KAAA,4CAAA,KAAA,yCAAA,QAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,QAAA,uCAAA,QAAA,iCAAA,QAAA,yCAAA,QAAA,0BAAA,KAAA,kCAAA,QAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJqjCJ,CGlnCI,KC6DA,8BAAA,KAAA,kCAAA,KJ0jCJ,Ca7jCI,CArCA,qBTwCA,kCAAA,MAAA,EAAA,WAAA,yCAAA,KAAA,kCAAA,KAAA,sCAAA,cAAA,oCAAA,GJkkCJ,CG/nCI,KC6DA,oCAAA,KAAA,qCAAA,KAAA,4CAAA,MAAA,4CAAA,IAAA,sCAAA,EAAA,KAAA,6CAAA,KAAA,kDAAA,WAAA,MAAA,kCAAA,IAAA,iCAAA,OAAA,4BAAA,KAAA,2BAAA,IAAA,2BAAA,KAAA,oCAAA,IAAA,mCAAA,OAAA,gDAAA,IAAA,uDAAA,GAAA,8CAAA,IAAA,6CAAA,IAAA,yDAAA,EJwlCJ,CGrpCI,KC6DA,2BAAA,QAAA,iCAAA,QAAA,iCAAA,QAAA,iCAAA,QAAA,mCAAA,QAAA,uDAAA,QAAA,qDAAA,MAAA,0CAAA,KAAA,oCAAA,KAAA,4CAAA,KAAA,oCAAA,KAAA,qCAAA,KAAA,gDAAA,KAAA,uDAAA,KAAA,+BAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2BAAA,QAAA,sCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,sCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,sCAAA,EJ8mCJ,CcroCI,KAAA,CTtBA,WD6CA,2BAAA,QAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,2BAAA,QAAA,iCAAA,QAAA,iCAAA,QAAA,iCAAA,QAAA,mCAAA,QAAA,uDAAA,QAAA,qDAAA,KJ0nCJ,CcxoCM,KAAA,CT1BF,SDwCA,2BAAA,QAAA,sCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,sCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,2BAAA,QAAA,iCAAA,QAAA,iCAAA,QAAA,iCAAA,QAAA,mCAAA,QAAA,uDAAA,QAAA,qDAAA,KJsoCJ,CGnsCI,KC6DA,oCAAA,MAAA,EAAA,WAAA,oCAAA,KAAA,2CAAA,KAAA,wCAAA,cAAA,sCAAA,GJ8oCJ,CG3sCI,KC6DA,4BAAA,IAAA,mCAAA,EAAA,gCAAA,EAAA,yBAAA,KAAA,2BAAA,KAAA,iCAAA,KAAA,kCAAA,KAAA,2CAAA,KAAA,4CAAA,IJ0pCJ,CGvtCI,KC6DA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4BAAA,MAAA,0BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJmqCJ,CGhuCI,KC6DA,iCAAA,MAAA,EAAA,WAAA,iCAAA,KAAA,qCAAA,SAAA,wCAAA,KAAA,mCAAA,GJ2qCJ,CGxuCI,KC6DA,sCAAA,EAAA,2CAAA,IAAA,sCAAA,YAAA,+CAAA,YAAA,2CAAA,YAAA,wCAAA,KAAA,0CAAA,KAAA,yCAAA,KAAA,iDAAA,YAAA,mDAAA,EAAA,kDAAA,IAAA,oDAAA,IAAA,qDAAA,IAAA,mCAAA,YAAA,mCAAA,CJ6rCJ,CG1vCI,KC6DA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gDAAA,MAAA,kDAAA,MAAA,mDAAA,MAAA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,MAAA,gDAAA,IAAA,8CAAA,MAAA,gDAAA,GJitCJ,CelvCI,CAAA,yCXiCA,0CAAA,KAAA,4CAAA,KAAA,yCAAA,QAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,QAAA,uCAAA,QAAA,iCAAA,QAAA,yCAAA,OJ8tCJ,CezvCM,CVlBF,WUkBE,CANF,sBVZA,+BD6CA,0CAAA,KAAA,4CAAA,KAAA,yCAAA,QAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,QAAA,uCAAA,QAAA,iCAAA,QAAA,yCAAA,OJ2uCJ,Ce/vCM,CVpBF,SUoBE,CAbF,sBVPA,6BDwCA,0CAAA,KAAA,4CAAA,KAAA,yCAAA,QAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,QAAA,uCAAA,QAAA,iCAAA,QAAA,yCAAA,OJwvCJ,CetwCI,CAAA,oBXcA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,0CAAA,QAAA,0CAAA,QAAA,oCAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,QAAA,iDAAA,QAAA,mDAAA,QAAA,mDAAA,MAAA,mDAAA,MAAA,qDAAA,KJ4wCJ,CevxCI,CAHA,mBAGA,CVlCA,WD6CA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,0CAAA,QAAA,0CAAA,QAAA,oCAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,QAAA,iDAAA,QAAA,mDAAA,QAAA,mDAAA,MAAA,mDAAA,MAAA,qDAAA,KJgyCJ,CexyCI,CANA,mBAMA,CVhCA,SDwCA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,0CAAA,QAAA,0CAAA,QAAA,oCAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,QAAA,iDAAA,QAAA,mDAAA,QAAA,mDAAA,MAAA,mDAAA,MAAA,qDAAA,KJozCJ,CgB1lBE,CAAA,iBAAA,CAAA,kBAAA,CAAA,wBAAA,CAAA,6BAAA,kBAAA,6CAAA,4BA+qBE,CA/qBF,iBA+qBE,CA/qBF,kBA+qBE,CA/qBF,uBA+qBE,CAAA,iCAAA,CD16CA,sBC2vBF,kBAAA,4CA+qBE,kCD16CA,qBXiCA,MAAA,OJyzCJ,CelzCM,CCmtBJ,kBDntBI,CAAA,wBAAA,CAxCF,sBC2vBF,mBDntBI,iDCmtBJ,mBDntBI,4CAGE,QAAA,CfyzCR,CGh4CI,KC6DA,gDAAA,KAAA,gDAAA,KAAA,kDAAA,KAAA,+CAAA,KAAA,6CAAA,IJ20CJ,Ce5yCI,CAhEA,yCXiCA,8BAAA,IJg1CJ,CeryCQ,CAAA,iBAAA,CAAA,kCAAA,CAAA,6BAAA,CAAA,iBAAA,CAAA,oCAAA,CAAA,6BAAA,CAAA,iBAAA,CC81CJ,gCD91CI,CAAA,6BACE,OAAA,IfwyCV,Ce9xCQ,CAXA,iBAWA,CAXA,kCAWA,CAAA,8BAAA,CAXA,iBAWA,CAXA,oCAWA,CAAA,8BAAA,CAXA,iBAWA,CCm1CJ,gCDn1CI,CAAA,8BACE,OAAA,IfgyCV,CGp5CI,KC6DA,sCAAA,MAAA,EAAA,WAAA,6CAAA,KAAA,sCAAA,KAAA,0CAAA,SAAA,wCAAA,IAAA,2CAAA,MAAA,EAAA,WAAA,kDAAA,KAAA,2CAAA,KAAA,+CAAA,cAAA,6CAAA,IAAA,oDAAA,MAAA,EAAA,WAAA,2DAAA,KAAA,oDAAA,KAAA,wDAAA,cAAA,sDAAA,GJy2CJ,CepxCI,CAAA,0BACE,KAAA,IAAA,IAAA,CAAA,KAAA,MAAA,CAAA,WACA,eAAA,SfuxCN,CG36CI,KC6DA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4CAAA,MAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJq3CJ,CGl7CI,KC6DA,gCAAA,KAAA,6CAAA,KAAA,uDAAA,GJ23CJ,CGx7CI,KC6DA,qCAAA,MAAA,EAAA,WAAA,4CAAA,KAAA,qCAAA,KAAA,yCAAA,cAAA,uCAAA,IAAA,0CAAA,IJo4CJ,CGj8CI,KC6DA,6CAAA,IAAA,4CAAA,EAAA,iDAAA,KAAA,gCAAA,YAAA,iCAAA,CJ44CJ,CiB96CI,CAAA,kBAAA,CAAA,oBbkCA,4CAAA,QAAA,wCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,KAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,0CAAA,QAAA,sCAAA,QAAA,wCAAA,QAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,gDAAA,QAAA,gDAAA,QAAA,+CAAA,QAAA,+CAAA,OJ45CJ,CiB37CM,CAHF,iBAGE,CZdF,WYcE,CAHF,mBAGE,CZdF,WD6CA,4CAAA,QAAA,wCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,KAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,0CAAA,QAAA,sCAAA,QAAA,wCAAA,QAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,gDAAA,QAAA,gDAAA,QAAA,+CAAA,QAAA,+CAAA,OJ26CJ,CiBt8CM,CAPF,iBAOE,CZbF,SYaE,CAPF,mBAOE,CZbF,SDwCA,4CAAA,QAAA,wCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,KAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,0CAAA,QAAA,sCAAA,QAAA,wCAAA,QAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,gDAAA,QAAA,gDAAA,QAAA,+CAAA,QAAA,+CAAA,OJ07CJ,CiBj9CM,CAXF,iBAWE,CAAA,uBAAA,CAXF,mBAWE,CAAA,uBbuBF,mDAAA,QAAA,mDAAA,KJ87CJ,CiBj9CM,CAfF,iBAeE,CAAA,sBAAA,CAfF,mBAeE,CAAA,sBbmBF,mDAAA,QAAA,mDAAA,KJk8CJ,CiBj9CM,CAnBF,iBAmBE,CAAA,oBAAA,CAnBF,mBAmBE,CAAA,oBbeF,mDAAA,QAAA,mDAAA,KJs8CJ,CiBr6CI,CAAA,mBbjCA,iDAAA,IJ08CJ,CiB77CI,CAoBA,mBbjCA,kCAAA,MAAA,EAAA,WAAA,kCAAA,KAAA,sCAAA,cAAA,yCAAA,KAAA,oCAAA,GJk9CJ,CG/gDI,KC6DA,kDAAA,KAAA,mDAAA,IAAA,mDAAA,IAAA,qDAAA,IAAA,qDAAA,IAAA,qDAAA,IAAA,uDAAA,GJ49CJ,CGzhDI,KC6DA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,0CAAA,QAAA,0CAAA,QAAA,oCAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,QAAA,iDAAA,QAAA,mDAAA,QAAA,mDAAA,MAAA,mDAAA,MAAA,qDAAA,MAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJi/CJ,CkBnhDI,CAAA,iBdkCA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJq/CJ,CkBphDM,CAHF,gBAGE,CjB7CJ,YG4EE,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,0CAAA,QAAA,0CAAA,QAAA,oCAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,QAAA,iDAAA,QAAA,mDAAA,QAAA,mDAAA,MAAA,mDAAA,MAAA,qDAAA,KJwgDJ,CkBniDM,CAPF,gBAOE,CbbF,SDwCA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,0CAAA,QAAA,0CAAA,QAAA,oCAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,4CAAA,QAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,QAAA,iDAAA,QAAA,mDAAA,QAAA,mDAAA,MAAA,mDAAA,MAAA,qDAAA,KJ2hDJ,CGxlDI,KC6DA,iCAAA,KAAA,qCAAA,KJgiDJ,CkBviDI,CA3BA,iBdkCA,kCAAA,MAAA,EAAA,WAAA,yCAAA,KAAA,kCAAA,KAAA,sCAAA,cAAA,oCAAA,GJwiDJ,CGrmDI,KC6DA,mCAAA,IAAA,qCAAA,MAAA,qCAAA,IAAA,uCAAA,MAAA,wCAAA,IAAA,0CAAA,MAAA,yCAAA,MAAA,qCAAA,IAAA,uCAAA,IAAA,sCAAA,IAAA,gDAAA,IAAA,gCAAA,IAAA,+BAAA,EAAA,wCAAA,KAAA,kCAAA,IAAA,iCAAA,KAAA,2CAAA,KAAA,qCAAA,IAAA,oCAAA,KAAA,0CAAA,KAAA,oCAAA,IAAA,mCAAA,IJikDJ,CG9nDI,KC6DA,oCAAA,KAAA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,8CAAA,KAAA,gCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,6CAAA,IAAA,6CAAA,IAAA,+CAAA,IAAA,qCAAA,MAAA,sCAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,KAAA,gDAAA,KAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,+CAAA,IAAA,+CAAA,IAAA,iDAAA,IAAA,wCAAA,MAAA,yCAAA,KAAA,iDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4DAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2DAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KAAA,0CAAA,KAAA,mDAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,kDAAA,IAAA,kDAAA,IAAA,oDAAA,IAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,KAAA,kDAAA,KAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,iDAAA,IAAA,iDAAA,IAAA,mDAAA,GJgnDJ,CmB9hDM,CAAA,cAAA,ClB9JJ,YG4EE,oCAAA,QAAA,qCAAA,QAAA,gCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GJsnDJ,CmBhiDM,CAJA,cAIA,CdnIF,WD6CA,oCAAA,QAAA,qCAAA,QAAA,gCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GJ2nDJ,CmBjiDM,CARA,cAQA,CdlIF,SDwCA,oCAAA,QAAA,qCAAA,QAAA,gCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GJgoDJ,CmBhiDM,CAAA,yBAAA,ClB5KJ,YG4EE,qCAAA,QAAA,sCAAA,KAAA,uCAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJuoDJ,CmBniDM,CAJA,yBAIA,CdjJF,WD6CA,qCAAA,QAAA,sCAAA,KAAA,uCAAA,KAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GJ6oDJ,CmBriDM,CARA,yBAQA,CdhJF,SDwCA,qCAAA,QAAA,sCAAA,KAAA,uCAAA,KAAA,kCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJmpDJ,CmBriDM,CAAA,qBAAA,ClB1LJ,YG4EE,wCAAA,QAAA,yCAAA,KAAA,0CAAA,KAAA,qCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJ0pDJ,CmBxiDM,CAJA,qBAIA,Cd/JF,WD6CA,wCAAA,QAAA,yCAAA,KAAA,0CAAA,KAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GJgqDJ,CmB1iDM,CARA,qBAQA,Cd9JF,SDwCA,wCAAA,QAAA,yCAAA,KAAA,0CAAA,KAAA,qCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJsqDJ,CmB1iDM,CAAA,uBAAA,ClBxMJ,YG4EE,wCAAA,QAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,QAAA,oCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GJ6qDJ,CmB7iDM,CAJA,uBAIA,Cd7KF,WD6CA,wCAAA,QAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,QAAA,oCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GJmrDJ,CmB/iDM,CARA,uBAQA,Cd5KF,SDwCA,wCAAA,QAAA,qCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,yCAAA,QAAA,oCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GJyrDJ,CGtvDI,KC6DA,oCAAA,KAAA,sCAAA,KAAA,wCAAA,KAAA,yCAAA,KAAA,wCAAA,MAAA,0CAAA,MAAA,6CAAA,MAAA,4CAAA,KJosDJ,CGjwDI,KC6DA,mCAAA,MAAA,EAAA,WAAA,mCAAA,KAAA,uCAAA,cAAA,qCAAA,IAAA,wCAAA,KAAA,qCAAA,MAAA,EAAA,WAAA,qCAAA,KAAA,yCAAA,cAAA,uCAAA,IAAA,0CAAA,KAAA,uCAAA,MAAA,EAAA,WAAA,uCAAA,KAAA,2CAAA,cAAA,yCAAA,IAAA,4CAAA,KAAA,wCAAA,MAAA,EAAA,WAAA,wCAAA,KAAA,4CAAA,cAAA,0CAAA,IAAA,6CAAA,IJ2tDJ,CGxxDI,KC6DA,6BAAA,IJ+tDJ,CG5xDI,KC6DA,8BAAA,QAAA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,KAAA,8CAAA,KAAA,gCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,6CAAA,IAAA,6CAAA,IAAA,+CAAA,GJ0uDJ,CoBvwDQ,KAAA,CAAA,mBAAA,CnB/CN,YG4EE,8BAAA,QAAA,qCAAA,QAAA,gCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GJ+uDJ,CoBxwDQ,KAAA,CAJA,mBAIA,CfpBJ,WD6CA,8BAAA,QAAA,qCAAA,QAAA,gCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GJovDJ,CoBzwDQ,KAAA,CARA,mBAQA,CfnBJ,SDwCA,8BAAA,QAAA,qCAAA,QAAA,gCAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GJyvDJ,CGtzDI,KC6DA,wCAAA,KJ6vDJ,CoBnuDI,CAvDI,mBAuDJ,CAAA,oBhB1BA,oCAAA,KgBsCE,MAAA,IAAA,oCACA,OAAA,IAAA,oCtBnHN,QsBoHM,IpB4tDN,CGj0DI,KC6DA,2BAAA,IAAA,qBAAA,KAAA,iCAAA,IAAA,2BAAA,KAAA,qCAAA,KAAA,oCAAA,IJ6wDJ,CG10DI,KC6DA,2BAAA,MAAA,sCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kCAAA,KAAA,4BAAA,MAAA,6BAAA,KAAA,sCAAA,KAAA,wBAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,qCAAA,IAAA,qCAAA,IAAA,uCAAA,IAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iCAAA,MAAA,4CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,KAAA,kCAAA,MAAA,mCAAA,KAAA,4CAAA,KAAA,8BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,2CAAA,IAAA,2CAAA,IAAA,6CAAA,IAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,IJmzDJ,CqBjzDQ,KAAA,CAAA,WAAA,CpB9EN,YG4EE,2BAAA,QAAA,4BAAA,KAAA,6BAAA,KAAA,wBAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJyzDJ,CqBnzDQ,KAAA,CAJA,WAIA,ChBnDJ,WD6CA,2BAAA,QAAA,4BAAA,KAAA,6BAAA,KAAA,wBAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GJ+zDJ,CqBrzDQ,KAAA,CARA,WAQA,ChBlDJ,SDwCA,2BAAA,QAAA,4BAAA,KAAA,6BAAA,KAAA,wBAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJq0DJ,CqBrzDQ,KAAA,CAAA,gBAAA,CpB5FN,YG4EE,iCAAA,QAAA,kCAAA,KAAA,mCAAA,KAAA,8BAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJ20DJ,CqBvzDQ,KAAA,CAJA,gBAIA,ChBjEJ,WD6CA,iCAAA,QAAA,kCAAA,KAAA,mCAAA,KAAA,8BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GJi1DJ,CqBzzDQ,KAAA,CARA,gBAQA,ChBhEJ,SDwCA,iCAAA,QAAA,kCAAA,KAAA,mCAAA,KAAA,8BAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GJu1DJ,CGp5DI,KC6DA,gCAAA,MAAA,sCAAA,KJ41DJ,CGz5DI,KC6DA,oCAAA,MAAA,EAAA,WAAA,oCAAA,KAAA,wCAAA,cAAA,sCAAA,GJm2DJ,CGh6DI,KC6DA,gCAAA,GJu2DJ,CGp6DI,KC6DA,gCAAA,QAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,8BAAA,OJ62DJ,CG16DI,KC6DA,qCAAA,MAAA,EAAA,WAAA,4CAAA,KAAA,qCAAA,KAAA,uCAAA,GJo3DJ,CGj7DI,KC6DA,oCAAA,GJw3DJ,CGr7DI,KC6DA,8BAAA,MAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJ+3DJ,CG57DI,KC6DA,qCAAA,KAAA,qCAAA,KAAA,uCAAA,IJq4DJ,CGl8DI,KC6DA,kCAAA,MAAA,EAAA,WAAA,yCAAA,KAAA,kCAAA,KAAA,oCAAA,IAAA,sCAAA,cAAA,sCAAA,MAAA,EAAA,WAAA,6CAAA,KAAA,sCAAA,KAAA,wCAAA,IAAA,0CAAA,cAAA,yCAAA,MAAA,EAAA,WAAA,gDAAA,KAAA,yCAAA,KAAA,2CAAA,IAAA,6CAAA,aJu5DJ,CGp9DI,KC6DA,gDAAA,IAAA,8BAAA,IJ45DJ,CGz9DI,KC6DA,gDAAA,OJg6DJ,CsBt8DM,KAAA,CjBPF,WD6CA,gDAAA,OJm6DJ,CsBp8DM,KAAA,CjBPF,SDwCA,gDAAA,OJs6DJ,CGn+DI,KC6DA,6BAAA,IAAA,4BAAA,MAAA,uCAAA,MAAA,uCAAA,MAAA,mCAAA,KAAA,8CAAA,KAAA,8CAAA,KAAA,8BAAA,MAAA,EAAA,yCAAA,KAAA,EAAA,yCAAA,MAAA,EAAA,sCAAA,MAAA,iDAAA,KAAA,iDAAA,MAAA,+BAAA,EAAA,0CAAA,EAAA,0CAAA,CJy7DJ,CGt/DI,KC6DA,8BAAA,QAAA,wBAAA,MAAA,6CAAA,QAAA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJg8DJ,CuBv+DI,CAAA,iBnBuCA,8BAAA,QAAA,wBAAA,KJq8DJ,CuBv+DI,CAAA,enBkCA,8BAAA,QAAA,wBAAA,KJ08DJ,CGvgEI,KC6DA,uBAAA,MAAA,EAAA,WAAA,uBAAA,KAAA,yBAAA,IAAA,kCAAA,IAAA,kCAAA,IJk9DJ,CG/gEI,KC6DA,oCAAA,GJs9DJ,CGnhEI,KC6DA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,KJ29DJ,CGxhEI,KC6DA,wCAAA,MAAA,EAAA,WAAA,+CAAA,KAAA,wCAAA,KAAA,4CAAA,cAAA,0CAAA,GJm+DJ,CGhiEI,KC6DA,mCAAA,KAAA,kCAAA,IAAA,sDAAA,EAAA,oCAAA,IAAA,wDAAA,IAAA,wDAAA,GJ4+DJ,CGziEI,KC6DA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,sDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4DAAA,QAAA,sDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4DAAA,QAAA,qEAAA,QAAA,yCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+CAAA,MAAA,gDAAA,MAAA,8DAAA,QAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8DAAA,MAAA,iEAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uEAAA,QAAA,4CAAA,OJggEJ,CG7jEI,KC6DA,qCAAA,IJogEJ,CGjkEI,KC6DA,4CAAA,MAAA,EAAA,WAAA,mDAAA,KAAA,4CAAA,KAAA,gDAAA,SAAA,8CAAA,IAAA,8CAAA,MAAA,EAAA,WAAA,qDAAA,KAAA,8CAAA,KAAA,kDAAA,SAAA,gDAAA,GJihEJ,CG9kEI,KC6DA,2CAAA,IAAA,iDAAA,IAAA,sDAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4DAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJwhEJ,CGrlEI,KC6DA,0DAAA,MAAA,gEAAA,QAAA,yEAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,mEAAA,MAAA,6DAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,6DAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,iDAAA,QAAA,gEAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,2EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,wEAAA,QAAA,iFAAA,QAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,iDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oDAAA,KAAA,oDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,6CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mEAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,YAAA,0DAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,4DAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,6DAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,sDAAA,MAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJwjEJ,CwBzkEM,CAAA,sBAAA,CnB5BF,WD6CA,0DAAA,MAAA,gEAAA,QAAA,yEAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,mEAAA,MAAA,6DAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,6DAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,gEAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,2EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,wEAAA,QAAA,iFAAA,OJqkEJ,CwBllEM,CAJA,sBAIA,CnB3BF,SDwCA,0DAAA,MAAA,gEAAA,QAAA,yEAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,mEAAA,MAAA,6DAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,6DAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,gEAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,2EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,wEAAA,QAAA,iFAAA,OJilEJ,CwBxlEM,CAAA,4BAAA,CnBtCF,WD6CA,iDAAA,OJqlEJ,CwBtlEM,CANA,4BAMA,CnBvCF,SDwCA,iDAAA,OJwlEJ,CwBpiEI,CAAA,sBpBpDA,wCAAA,IJ4lEJ,CoBlkEI,CI0BA,sBJ1BA,CAvDI,mBAuDJ,CAAA,oBhB1BA,oCAAA,KgBsCE,MAAA,IAAA,oCACA,OAAA,IAAA,oCtBnHN,QsBoHM,GpB0jEN,CG/pEI,KC6DA,qCAAA,MAAA,EAAA,WAAA,qCAAA,KAAA,gDAAA,KAAA,kDAAA,IAAA,mDAAA,KAAA,qDAAA,IAAA,4CAAA,KAAA,8CAAA,GJ6mEJ,CG1qEI,KC6DA,qBAAA,GJinEJ,CG9qEI,KC6DA,qBAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJqnEJ,CGlrEI,KC6DA,iCAAA,GJynEJ,CGtrEI,KC6DA,4CAAA,MAAA,sCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,kDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJqoEJ,CGlsEI,KC6DA,+CAAA,KAAA,8CAAA,IJ0oEJ,CGvsEI,KC6DA,kCAAA,MAAA,EAAA,WAAA,kCAAA,KAAA,oCAAA,IAAA,yCAAA,QAAA,sCAAA,QAAA,qCAAA,MAAA,EAAA,WAAA,4CAAA,KAAA,qCAAA,KAAA,yCAAA,cAAA,uCAAA,GJupEJ,CGptEI,KC6DA,+CAAA,KAAA,iDAAA,KAAA,+CAAA,KAAA,iDAAA,IJ8pEJ,CG3tEI,KC6DA,kBAAA,OJkqEJ,CyBzsEM,CAAA,QAAA,CxBrCJ,YG4EE,kBAAA,OJsqEJ,CyBzsEM,CAJA,QAIA,CpBVF,WD6CA,kBAAA,OJyqEJ,CyBxsEM,CARA,QAQA,CpBTF,SDwCA,kBAAA,OJ4qEJ,CGzuEI,KC6DA,+BAAA,EAAA,0CAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,+BAAA,IJkrEJ,CG/uEI,KC6DA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,0CAAA,MAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wCAAA,QAAA,kCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,2BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GJ2rEJ,CGxvEI,KC6DA,4CAAA,MAAA,2DAAA,QAAA,2DAAA,MAAA,uDAAA,QAAA,uDAAA,MAAA,uDAAA,QAAA,uDAAA,MAAA,+BAAA,MAAA,0BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,8CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,uCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,gDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,sDAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,mDAAA,QAAA,4CAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,wDAAA,QAAA,wDAAA,WJgtEJ,C0B9vEM,KAAA,CAAA,eAAA,CrBCF,WD6CA,4CAAA,MAAA,2DAAA,QAAA,2DAAA,MAAA,uDAAA,QAAA,uDAAA,MAAA,uDAAA,QAAA,uDAAA,KJytEJ,C0BlwEM,KAAA,CALA,eAKA,CrBCF,SDwCA,4CAAA,MAAA,2DAAA,QAAA,2DAAA,MAAA,uDAAA,QAAA,uDAAA,MAAA,uDAAA,QAAA,uDAAA,KJkuEJ,CG/xEI,KC6DA,6BAAA,IJsuEJ,CGnyEI,KC6DA,mCAAA,MAAA,EAAA,WAAA,sCAAA,MAAA,EAAA,WAAA,sCAAA,KAAA,wCAAA,IAAA,kDAAA,KAAA,qDAAA,KAAA,uDAAA,GJgvEJ,CG7yEI,KC6DA,wBAAA,OJovEJ,CGjzEI,KC6DA,0CAAA,WAAA,oCAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJyvEJ,C2BvyEM,C1B9BJ,W0B8BI,C1B9BJ,YG4EE,0CAAA,QAAA,oCAAA,KJ8vEJ,C2BxyEM,C1BlCJ,W0BkCI,CtBHF,WD6CA,0CAAA,QAAA,oCAAA,KJkwEJ,C2BxyEM,C1BtCJ,W0BsCI,CtBFF,SDwCA,0CAAA,QAAA,oCAAA,KJswEJ,CGn0EI,KC6DA,+BAAA,KAAA,6BAAA,IJ2wEJ,CGx0EI,KC6DA,+BAAA,MAAA,EAAA,WAAA,sCAAA,KAAA,+BAAA,KAAA,mCAAA,QAAA,iCAAA,GJmxEJ,CGh1EI,KC6DA,uCAAA,MAAA,4BAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IJwxEJ,CGr1EI,KC6DA,4BAAA,IJ4xEJ,CGz1EI,KC6DA,2BAAA,MAAA,EAAA,WAAA,2BAAA,KAAA,6BAAA,GJkyEJ,C4B32EE,KACE,MAAA,I5B82EJ,C4B32EE,GACE,MAAA,O5B82EJ,C4B32EE,mBAOE,MAAA,I5B82EJ,C4B32EE,CAAA,YAAA,EACE,MAAA,I5B82EJ,C4B32EE,KACE,MAAA,I5B82EJ,C4B32EE,CAAA,gBAAA,EACE,MAAA,O5B82EJ,C4B52EI,CAHF,gBAGE,CAAA,OACE,MAAA,O5B82EN,C6B14EE,OAEE,iBAAA,O7B44EJ,C6Bz4EM,OAAA,UAAA,CAAA,EACE,MAAA,I7B24ER,C6Bx4EM,OAAA,WAAA,EACE,MAAA,I7B04ER,C6Bv4EM,OAAA,WAAA,GACE,MAAA,I7By4ER,C8Bv5EE,KACE,WAAA,O9B05EJ,C+B15EE,CAAA,eACE,MAAA,S/B65EJ,C+B15EE,OAAA,CAAA,MACE,MAAA,I/B65EJ,C+B35EI,OAAA,CAHF,MAGE,CAAA,UACE,iBAAA,6C/B65EN,C+Bz5EE,CAAA,iBACE,iBAAA,S/B45EJ,C+B15EI,CAHF,iBAGE,CAAA,OACE,MAAA,KACA,iBAAA,O/B45EN,C+B15EM,CAPJ,iBAOI,CAJF,MAIE,OACE,MAAA,S/B45ER,C+Bv5EE,CAAA,SAAA,CAAA,KACE,iBAAA,I/B05EJ,C+Bv5EM,CAJJ,SAII,CAJJ,KAII,CAAA,oBAAA,EACE,MAAA,I/By5ER,C+Bp5EM,CAVJ,SAUI,CAVJ,IAUI,OAAA,GACE,MAAA,O/Bs5ER,C+Bj5EE,CA1BE,MA0BF,CAAA,SACE,iBAAA,I/Bo5EJ,C+B/4EI,CAAA,QAAA,CANF,SAOI,MAAA,O/Bk5EN,C+B74EE,CAAA,cACE,MAAA,I/Bg5EJ,C+B74EE,CAAA,iBACE,iBAAA,O/Bg5EJ,C+B94EI,CAHF,iBAGE,CAAA,gBACE,MAAA,I/Bg5EN,C+B14EM,SAAA,ChCPN,UgCOM,QACE,MAAA,KACA,iBAAA,O/B64ER,C+Bz4EI,SAAA,ChCbJ,UgCaI,SAAA,CAAA,eAAA,SAAA,CAAA,YAAA,SAAA,CAAA,gBACE,MAAA,I/B24EN,CgCt9EI,CAAA,YAAA,GAKF,CAAA,OAAA,CAAA,eAJI,MAAA,OhCy9EN,CiC19EE,qBAAA,CAAA,kBACE,iBAAA,OjCi+EJ,CiC/9EI,qBAAA,CAHF,kBAGE,WAAA,CAAA,QACE,iBAAA,KACA,aAAA,IAAA,MAAA,OjCi+EN,CiC/9EM,qBAAA,CAPJ,kBAOI,WAAA,CAJF,QAIE,CAAA,YACE,WAAA,IAAA,MAAA,OjCi+ER,CiC/9EQ,qBAAA,CAVN,kBAUM,WAAA,CAPJ,QAOI,CAHF,YAGE,OAEE,MAAA,KACA,WAAA,SjCg+EV,CiCx9EM,aAAA,aAAA,ChCrBF,mBgCsBI,MAAA,IjC29ER,CiCz9EQ,aAAA,aAAA,ChCxBJ,kBgCwBI,CAAA,QACE,MAAA,OjC29EV,CiCx9EQ,aAAA,aAAA,ChC5BJ,kBgC4BI,CAAA,QACE,MAAA,OjC09EV,CiCv9EQ,aAAA,aAAA,ChChCJ,kBgCgCI,CAAA,QACE,MAAA,OjCy9EV,CiCt9EQ,aAAA,aAAA,ChCpCJ,kBgCoCI,OACE,iBAAA,QACA,MAAA,QACA,YAAA,EAAA,EAAA,IAAA,OjCw9EV,CiCt9EU,aAAA,aAAA,ChCzCN,kBgCyCM,MAAA,ChCzCN,SgC0CQ,MAAA,OjCw9EZ,CiCp9EQ,aAAA,aAAA,ChC9CJ,kBgC8CI,ChC9CJ,SgC+CM,MAAA,OjCs9EV,CkCpgFE,WAAA,CjCNA,YiCOE,WAAA,EAAA,IAAA,IAAA,SlC2gFJ,CkCzgFI,WAAA,CjCTF,YiCSE,SACE,MAAA,IlC2gFN,CkCtgFE,SAAA,CnCmDF,UmCnDE,WAAA,CjCfA,YiCgBE,WAAA,OlCygFJ,CkCpgFI,CAAA,SAAA,CfyIE,cezIF,OACE,MAAA,OlCugFN,CkCpgFI,CAJA,SAIA,CfqIE,cerIF,CAAA,CTYE,SSXA,MAAA,IlCsgFN,CkClgFE,CAAA,QAAA,CAAA,gBACE,WAAA,SlCqgFJ,CkC//EQ,aAAA,GAAA,EAAA,OACE,iBAAA,OlCkgFV,CkC5/EM,aAAA,CAAA,CAdJ,QAcI,OACE,WAAA,SlC8/ER,CkCv/EI,cAAA,CAAA,iBAAA,MACE,MAAA,KACA,iBAAA,OlC0/EN,CkCr/EI,OAAA,OAAA,IAAA,CAAA,SAAA,EAAA,OADF,iBAEI,aAAA,IAAA,MAAA,OlCy/EJ,CACF,CmCljFE,CAAA,MACE,MAAA,InCqjFJ,CmCnjFI,CAHF,KAGE,CAAA,YACE,YAAA,IAAA,MAAA,QACA,iBAAA,SnCqjFN,CmCnjFM,CAPJ,KAOI,CAJF,YAIE,IAPJ,MAGE,gBAHF,MAGE,gBAHF,MAGE,gBAHF,MAGE,gBAHF,MAGE,eAUI,MAAA,OnCqjFR,CmCjjFI,CAjBF,KAiBE,CAAA,aACE,YAAA,IAAA,MAAA,QACA,iBAAA,SnCmjFN,CmCjjFM,CArBJ,KAqBI,CAJF,aAIE,IArBJ,MAiBE,iBAjBF,MAiBE,iBAjBF,MAiBE,iBAjBF,MAiBE,iBAjBF,MAiBE,gBAUI,MAAA,OnCmjFR,CmC/iFI,CA/BF,KA+BE,CAAA,WACE,YAAA,IAAA,MAAA,QACA,iBAAA,SnCijFN,CmC/iFM,CAnCJ,KAmCI,CAJF,WAIE,IAnCJ,MA+BE,eA/BF,MA+BE,eA/BF,MA+BE,eA/BF,MA+BE,eA/BF,MA+BE,cAUI,MAAA,OnCijFR,CoCtlFQ,aAAA,CAAA,WAAA,CAAA,YAAA,MACE,WAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,EAAA,IAAA,UACA,OAAA,IAAA,MAAA,QACA,iBAAA,KACA,MAAA,OpCylFV,CoCvlFU,aAAA,CANF,WAME,CANF,YAME,KAAA,4BACE,MAAA,OpCylFZ,CoCvlFU,aAAA,CATF,WASE,CATF,YASE,KAAA,mBACE,MAAA,OpCylFZ,CoCvlFU,aAAA,CAZF,WAYE,CAZF,YAYE,KAAA,uBACE,MAAA,OpCylFZ,CoCvlFU,aAAA,CAfF,WAeE,CAfF,YAeE,KAAA,kBACE,MAAA,OpCylFZ,CoCtlFU,aAAA,CAnBF,WAmBE,CAnBF,YAmBE,KAAA,OACE,OAAA,IAAA,MAAA,QACA,WAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,EAAA,IAAA,SpCwlFZ,CoCplFQ,aAAA,CAzBA,WAyBA,CAzBA,YAyBA,CJvBN,eIyBQ,MAAA,OpCqlFV,CoC/kFM,aAAA,CAAA,mBAAA,EACE,MAAA,OpCilFR,CoC5kFU,aAAA,CANJ,mBAMI,CAAA,SAAA,GAAA,EACE,MAAA,OpC8kFZ,CoC5kFY,aAAA,CATN,mBASM,CAHF,SAGE,GAAA,CAAA,OACE,WAAA,QACA,MAAA,OpC8kFd,CoCtkFE,CAAA,OACE,WAAA,EAAA,IAAA,IAAA,UACA,MAAA,IpCykFJ,CoCpkFM,CAPJ,MAOI,CAAA,IACE,WAAA,IpCskFR,CoCpkFQ,CAVN,MAUM,CAHF,GAGE,QACE,QAAA,GpCskFV,CoC1kFM,CAPJ,MAOI,CAAA,UACE,WAAA,OpC4kFR,CoC1kFQ,CAVN,MAUM,CAHF,SAGE,QACE,QAAA,GpC4kFV,CoChlFM,CAPJ,MAOI,CAAA,UACE,WAAA,OpCklFR,CoChlFQ,CAVN,MAUM,CAHF,SAGE,QACE,QAAA,GpCklFV,CoCtlFM,CAPJ,MAOI,CAAA,KACE,WAAA,OpCwlFR,CoCtlFQ,CAVN,MAUM,CAHF,IAGE,QACE,QAAA,GpCwlFV,CoC5lFM,CAPJ,MAOI,CAAA,MACE,WAAA,OpC8lFR,CoC5lFQ,CAVN,MAUM,CAHF,KAGE,QACE,QAAA,GpC8lFV,CoClmFM,CAPJ,MAOI,CAAA,UACE,WAAA,OpComFR,CoClmFQ,CAVN,MAUM,CAHF,SAGE,QACE,QAAA,GpComFV,CoCxmFM,CAPJ,MAOI,CAAA,SACE,WAAA,OpC0mFR,CoCxmFQ,CAVN,MAUM,CAHF,QAGE,QACE,QAAA,GpC0mFV,CoC9mFM,CAPJ,MAOI,CAAA,KACE,WAAA,OpCgnFR,CoC9mFQ,CAVN,MAUM,CAHF,IAGE,QACE,QAAA,GpCgnFV,CoCpnFM,CAPJ,MAOI,CAAA,MACE,WAAA,OpCsnFR,CoCpnFQ,CAVN,MAUM,CAHF,KAGE,QACE,QAAA,GpCsnFV,CoC1nFM,CAPJ,MAOI,CAAA,IACE,WAAA,OpC4nFR,CoC1nFQ,CAVN,MAUM,CAHF,GAGE,QACE,QAAA,GpC4nFV,CoChoFM,CAPJ,MAOI,CAAA,IACE,WAAA,OpCkoFR,CoChoFQ,CAVN,MAUM,CAHF,GAGE,QACE,QAAA,GpCkoFV,CoCtoFM,CAPJ,MAOI,CAAA,SACE,WAAA,IpCwoFR,CoCtoFQ,CAVN,MAUM,CAHF,QAGE,QACE,QAAA,GpCwoFV,CoC5oFM,CAPJ,MAOI,CAAA,WACE,WAAA,OpC8oFR,CoC5oFQ,CAVN,MAUM,CAHF,UAGE,QACE,QAAA,GpC8oFV,CoClpFM,CAPJ,MAOI,CAAA,QACE,WAAA,OpCopFR,CoClpFQ,CAVN,MAUM,CAHF,OAGE,QACE,QAAA,IpCopFV,CoC7oFI,CAAA,aAAA,CA/BM,SA+BN,EACE,MAAA,OpCgpFN,CoC9oFM,CAHF,aAGE,CAlCI,SAkCJ,CAAA,OACE,WAAA,QACA,MAAA,OpCgpFR,CoCzoFM,CAAA,WAAA,EAAA,KAAA,CAAA,WAAA,EAAA,CAAA,aAOF,CAAA,gBAAA,IAAA,CrC8BF,IqCpCM,MAAA,iBpC4oFR,CoCjoFE,CAZI,aAaF,MAAA,OpCwoFJ,CqCvuFI,CAAA,CNaA,MMbA,CAAA,UAAA,CAAA,kBNaA,OMbA,iBACE,WAAA,QACA,MAAA,SrC2uFN,CqCxuFI,CAAA,CNQA,MMRA,CALA,UAKA,CAAA,cNQA,OMRA,aACE,WAAA,KACA,MAAA,SrC2uFN,CqCxuFI,CAAA,CNGA,MMHA,CAVA,UAUA,CAAA,eNGA,OMHA,cACE,WAAA,QACA,MAAA,OrC2uFN,CqCzuFM,CAAA,CNDF,MMCE,CAdF,UAcE,CAJF,aAIE,QNDF,OMHA,oBAKI,MAAA,SrC4uFR,CqCxuFI,CAAA,CNNA,MMMA,CAnBA,UAmBA,CAAA,aNNA,OMMA,YACE,WAAA,QACA,MAAA,SrC2uFN,CqCzuFM,CAAA,CNVF,MMUE,CAvBF,UAuBE,CAJF,WAIE,QNVF,OMMA,kBAKI,MAAA,SrC4uFR,CqCxuFI,CAAA,CNfA,MMeA,CA5BA,UA4BA,CAAA,cAAA,CAAA,CNfA,MMeA,CA5BA,UA4BA,CAAA,aAAA,CA5BA,YNaA,OMeA,eNfA,OMeA,cA5BA,WA8BE,iBAAA,QACA,WAAA,QAAA,oFAAA,KAAA,KAAA,SrC2uFN,CqC1uFM,OAAA,KAAA,OAAA,IAAA,CAAA,8BAAA,EAAA,EAAA,CAAA,KAAA,OAAA,IAAA,CAAA,sBAAA,EAAA,GAJF,CAAA,CNfA,MMeA,CA5BA,UA4BA,CAAA,cAAA,CAAA,CNfA,MMeA,CA5BA,UA4BA,CAAA,aAAA,CA5BA,YNaA,OMeA,eNfA,OMeA,cA5BA,WAiCI,WAAA,QAAA,oFAAA,KAAA,KAAA,UACA,gBAAA,KAAA,IrC+uFN,CACF,CqC5uFI,CAAA,CNzBA,MMyBA,CAtCA,UAsCA,CAAA,eNzBA,OMyBA,cACE,WAAA,KACA,MAAA,SrC+uFN,CqCzuFM,CNDF,QMCE,CNjCF,MMiCE,OACE,MAAA,OrC4uFR,CqCpuFI,CAAA,cAAA,CAAA,CN1CA,MM0CA,CAvDA,UAuDA,CAAA,cACE,OAAA,IAAA,MAAA,QACA,iBAAA,SrCuuFN,CqCtuFM,CAHF,cAGE,CAAA,CN7CF,MM6CE,CA1DF,UA0DE,CAHF,aAGE,CpC7DF,SoC6DE,CAHF,cAGE,CAAA,CN7CF,MM6CE,CA1DF,UA0DE,CAHF,aAGE,OAEE,iBAAA,QACA,MAAA,IrCuuFR,CsCxyFI,CAAA,QAAA,OACE,MAAA,ItC2yFN,CsCxyFI,CAJA,OAIA,CHDA,YGEE,aAAA,QACA,WAAA,StC0yFN,CsCxyFM,CARF,OAQE,CHLF,YGKE,OACE,WAAA,OtC0yFR,CsCtyFI,CAbA,OAaA,CHIA,aGHE,aAAA,QACA,WAAA,StCwyFN,CsCtyFM,CAjBF,OAiBE,CHAF,aGAE,OACE,WAAA,OtCwyFR,CsCpyFI,CAtBA,OAsBA,CHSA,WGRE,aAAA,QACA,WAAA,StCsyFN,CsCpyFM,CA1BF,OA0BE,CHKF,WGLE,OACE,WAAA,OtCsyFR,CuCh0FI,CAAA,eAAA,CAAA,UACE,iBAAA,IvCm0FN,CuCj0FM,CAHF,eAGE,CAHF,UAGE,QACE,MAAA,IvCm0FR,CuCh0FM,CAPF,eAOE,CAPF,UAOE,EACE,MAAA,IvCk0FR,CuC/zFM,CAXF,eAWE,CAXF,UAWE,CAAA,YACE,MAAA,QACA,WAAA,KAAA,MAAA,OvCi0FR,CuC/zFQ,CAfJ,eAeI,CAfJ,UAeI,CAJF,YAIE,EACE,MAAA,OvCi0FV,CuC5zFQ,CArBJ,eAqBI,CArBJ,SAqBI,OAAA,QACE,MAAA,OvC8zFV,CuC3zFQ,CAzBJ,eAyBI,CAzBJ,SAyBI,OAAA,EACE,MAAA,IvC6zFV,CuC1zFQ,CA7BJ,eA6BI,CA7BJ,SA6BI,OAAA,CAlBF,YAmBI,iBAAA,UACA,MAAA,OvC4zFV,CuCrzFI,CAAA,YAAA,OACE,WAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,EAAA,IAAA,SvCwzFN,CwC91FI,YAAA,KAAA,CAAA,QACE,iBAAA,UACA,OAAA,KAAA,MAAA,QACA,MAAA,IxCi2FN,CwC71FI,YAAA,CAAA,WAAA,YAAA,CAAA,aAAA,YAAA,CAAA,eAGE,iBAAA,IxC61FN,CwC11FI,aAAA,OACE,iBAAA,QACA,MAAA,OxC41FN,CwCr1FQ,UAAA,CAAA,eAAA,CAAA,aAAA,OACE,WAAA,SxCw1FV,CwCl1FE,YAAA,CAAA,MAAA,qCAEE,OAAA,IAAA,MAAA,QACA,WAAA,OxCq1FJ,CwCl1FE,YAAA,CANA,uCAAA,oDAUE,OAAA,KAAA,MAAA,OxCq1FJ,CwC/0FQ,SAAA,GAAA,CzCqBN,YyCrBM,KAAA,EAAA,CzCmGN,SyClGQ,MAAA,OxCk1FV,CwC/0FQ,SAAA,GAAA,CzCiBN,YyCjBM,KAAA,CAAA,aACE,MAAA,OxCi1FV,CwC70FM,SAAA,GAAA,CzCYJ,YyCZI,CAAA,YACE,MAAA,OxC+0FR,CwC70FQ,SAAA,GAAA,CzCSN,YyCTM,CAHF,WAGE,OACE,MAAA,OxC+0FV,CwCz0FQ,SAAA,GAAA,CzCEN,WyCFM,CAAA,QAAA,CAVF,YAUE,SAAA,GAAA,CzCEN,WyCFM,CAAA,UAAA,CAVF,YAWI,MAAA,OxC20FV,CwCz0FU,SAAA,GAAA,CzCDR,WyCCQ,CAHF,QAGE,CAbJ,WAaI,OAAA,SAAA,GAAA,CzCDR,WyCCQ,CAHF,UAGE,CAbJ,WAaI,OACE,MAAA,OxC20FZ,CwCl0FM,CZtDJ,gBYsDI,KAAA,EACE,MAAA,OxCq0FR,CwCn0FQ,CZzDN,gBYyDM,KAAA,CAAA,OACE,MAAA,OxCq0FV,CwC/zFM,CZhEJ,gBYgEI,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IAAA,CAAA,KACE,iBAAA,UACA,MAAA,IxCi0FR,CwC3zFI,CAzEI,eAyEJ,CAzEI,aAyEJ,OACE,WAAA,SxC8zFN,CwC5yFE,CzCOA,IyCNE,MAAA,IxCkzFJ,CwC/yFE,OAAA,OACE,CzCtBF,IyCuBI,MAAA,IxCizFJ,CwC/yFE,CzCrBF,IyCsBI,MAAA,OxCizFJ,CwC/yFE,CzCpBF,IyCqBI,MAAA,IxCizFJ,CwC/yFE,CzCnBF,IyCoBI,MAAA,MxCizFJ,CwC/yFE,CzClBF,IyCmBI,MAAA,OxCizFJ,CwC9yFE,CzClBF,cyCqBI,MAAA,IxCizFJ,CwC/yFE,CzCfF,IyCgBI,MAAA,IxCizFJ,CwC/yFE,CzCbF,IyCcI,MAAA,IxCizFJ,CwC/yFE,CzCXF,IyCYI,MAAA,IxCizFJ,CwC/yFE,CzCVF,KqC9EI,II0FA,MAAA,IxCizFJ,CwC/yFE,CAAA,IACE,MAAA,GxCizFJ,CACF,CwC7yFE,OAAA,KAAA,CAAA,WACE,CzC/DF,IyCgEI,MAAA,IxCgzFJ,CwC9yFE,CzC9DF,IyC+DI,MAAA,KACA,YAAA,GxCgzFJ,CwC9yFE,CzC9DF,IyC+DI,MAAA,KACA,WAAA,MxCgzFJ,CwC9yFE,CzC9DF,IyC+DI,MAAA,KACA,YAAA,GxCgzFJ,CwC9yFE,CzC9DF,IyC+DI,MAAA,IxCgzFJ,CwC9yFE,CzC7DF,cyCgEI,MAAA,IxCgzFJ,CwC9yFE,CzC1DF,IyC2DI,MAAA,KACA,YAAA,GxCgzFJ,CwC9yFE,CzCzDF,IyC0DI,MAAA,IxCgzFJ,CwC9yFE,CzCvDF,IyCwDI,MAAA,IxCgzFJ,CACF,CwCvyFM,YAAA,CAlMF,WAkME,CAAA,iBAlMF,6BAAA,YzCkHF,iByClHE,6BAAA,YzC8FF,iByC9FE,YzCsGF,iByCtGE,YzCsHF,iByCtHE,YzC0FF,iByC1FE,YzCgIF,iByChIE,YzC2HF,iByC3HE,YzCkGF,iByClGE,YzC0GF,iByC1GE,YzC8GF,iByC9GE,YzCoIF,+ByC8DI,8DzChFJ,8DApBA,+BAQA,+BAgBA,+BA5BA,+BAsCA,+BALA,+BAzBA,+BAQA,+BAIA,+BAsBA,iCyC8DI,kEzChFJ,kEApBA,iCAQA,iCAgBA,iCA5BA,iCAsCA,iCALA,iCAzBA,iCAQA,iCAIA,iCAsBA,IyC4EM,MAAA,OxCo0FR,CyC1hGM,CJwDF,cIxDE,CAAA,CxCFF,SwCGI,iBAAA,QACA,MAAA,IzC6hGR,CyCxhGE,gBAAA,iBACE,WAAA,KACA,WAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,EAAA,IAAA,SzC2hGJ,CyCzhGI,gBAAA,CAAA,iBAAA,iBAAA,CAAA,iBACE,WAAA,SzC2hGN,CyCzhGM,gBAAA,CAHF,iBAGE,CAAA,UAAA,iBAAA,CAHF,iBAGE,CAAA,UACE,MAAA,IzC2hGR,CyCzhGQ,gBAAA,CANJ,iBAMI,CAHF,SAGE,OAAA,iBAAA,CANJ,iBAMI,CAHF,SAGE,OACE,WAAA,EAAA,IAAA,IAAA,SAAA,CAAA,EAAA,EAAA,IAAA,UACA,MAAA,OzC2hGV,CyCvhGM,gBAAA,CAZF,iBAYE,CAAA,YAAA,iBAAA,CAZF,iBAYE,CAAA,YACE,MAAA,IzCyhGR,CyCvhGQ,gBAAA,CAfJ,iBAeI,CAAA,WAAA,OAAA,iBAAA,CAfJ,iBAeI,CAAA,WAAA,OACE,MAAA,OzCyhGV,CyCphGI,gBAAA,CAAA,kBAAA,iBAAA,CAAA,kBACE,OAAA,IAAA,MAAA,OzCshGN,C0CzjGE,QACE,WAAA,EAAA,IAAA,IAAA,S1C4jGJ,C0CzjGE,OAAA,CAAA,QACE,WAAA,G1C4jGJ,C0CzjGE,QACE,MAAA,O1C4jGJ,C2CxkGE,CAAA,SACE,WAAA,QACA,OAAA,IAAA,MAAA,O3C2kGJ,C2CzkGI,CAJF,SAIE,CAAA,KACE,MAAA,I3C2kGN,C2CtkGQ,CAVN,SAUM,CAAA,SAAA,CANJ,IAMI,QACE,aAAA,O3CwkGV,C4C5kGM,ChBoBJ,gBgBpBI,GAAA,CAAA,ahBoBJ,oBgBpBI,ahBoBJ,oBgBpBI,ahBoBJ,oBgBpBI,ahBoBJ,oBgBpBI,ahBoBJ,oBgBpBI,YACE,MAAA,O5ColGR,C6C1lGE,GACE,WAAA,O7C6lGJ,C8C/lGI,CAAA,QAAA,OACE,WAAA,KACA,WAAA,IAAA,IAAA,IAAA,K9CkmGN,C+CrmGE,KAAA,CAAA,OAAA,CAAA,WAAA,MACE,MAAA,I/CwmGJ,C+CtmGI,KAAA,CAHF,MAGE,CAAA,iBAAA,CAHF,WAGE,KAAA,CAAA,iBACE,iBAAA,O/CwmGN,C+CtmGM,KAAA,CANJ,MAMI,CAHF,gBAGE,CAAA,WAAA,KAAA,CANJ,MAMI,CAHF,gBAGE,CAAA,SAAA,KAAA,CANJ,MAMI,CAHF,gBAGE,CAAA,YAAA,CANJ,WAMI,KAAA,CAHF,gBAGE,CAAA,WAAA,CANJ,WAMI,KAAA,CAHF,gBAGE,CAAA,SAAA,CANJ,WAMI,KAAA,CAHF,gBAGE,CAAA,YACE,iBAAA,O/CwmGR,C+CpmGI,KAAA,CAXF,MAWE,CAAA,eAAA,CAXF,WAWE,KAAA,CAAA,eACE,iBAAA,O/CsmGN,C+CnmGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,IWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,IWjDI,WAAA,I/CqmGV,C+CtmGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,UWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,UWjDI,WAAA,O/CwmGV,C+CzmGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,UWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,UWjDI,WAAA,O/C2mGV,C+C5mGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,KWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,KWjDI,WAAA,O/C8mGV,C+C/mGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,MWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,MWjDI,WAAA,O/CinGV,C+ClnGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,UWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,UWjDI,WAAA,O/ConGV,C+CrnGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,SWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,SWjDI,WAAA,O/CunGV,C+CxnGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,KWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,KWjDI,WAAA,O/C0nGV,C+C3nGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,MWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,MWlDE,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,IWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,IWlDE,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,IWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,IWjDI,WAAA,O/C6nGV,C+C9nGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,SWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,SWjDI,WAAA,I/CsoGV,C+CvoGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,WWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,WWjDI,WAAA,O/CyoGV,C+C1oGQ,KAAA,CAfN,MAeM,CAJJ,cAII,CXkDF,QWlDE,CAfN,WAeM,KAAA,CAJJ,cAII,CXkDF,QWjDI,WAAA,O/C4oGV,C+CvoGI,KAAA,CArBF,MAqBE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AAA,GAEI,cAAA,IAAA,MAAA,OrD8wGR,CACF,CsDjzGQ,CrDEN,UqDFM,CAAA,WAAA,CAAA,SAAA,OACE,MAAA,OtDozGV,CsD5yGQ,CrDPN,UqDOM,MAAA,CATA,WASA,CHRE,QGQF,OAAA,CrDPN,UqDOM,MAAA,CAAA,cAAA,CHRE,QGQF,OACE,WAAA,QACA,MAAA,OtD8yGV,CsDzyGQ,CrDdN,UqDcM,MAAA,CAhBA,WAgBA,MAAA,KAAA,CHfE,UGgBA,MAAA,OtD2yGV,CsDvyGM,CrDnBJ,UqDmBI,MAAA,CAZE,eAaA,MAAA,OtDyyGR,CsDvyGQ,CrDtBN,UqDsBM,MAAA,CAfA,cAeA,OACE,MAAA,OtDyyGV,CsDlyGQ,CrD9BN,UqD8BM,EAAA,CrD9BN,SqD8BM,EAAA,CAAA,EAAA,OACE,WAAA,OtDoyGV,CsDjyGQ,CrDlCN,UqDkCM,EAAA,CrDlCN,SqDkCM,GAAA,EACE,MAAA,OtDmyGV,CsD/xGU,CrDvCR,UqDuCQ,EAAA,CrDvCR,SqDuCQ,EAAA,OAAA,EACE,MAAA,OtDiyGZ,CsD5xGU,CrD7CR,UqD6CQ,EAAA,CrD7CR,SqD6CQ,EAAA,CrD7CR,OqD6CQ,EACE,MAAA,OtD8xGZ,CsD3xGU,CrDjDR,UqDiDQ,EAAA,CrDjDR,SqDiDQ,EAAA,CrDjDR,OqDiDQ,CAAA,QACE,WAAA,OtD6xGZ,CsDvxGQ,CrDxDN,UqDwDM,EAAA,CrDxDN,QqDwDM,KAAA,CHzDE,UGyDF,EAAA,QACE,kBAAA,OtDyxGV,CsDrxGU,CrD7DR,UqD6DQ,EAAA,CrD7DR,QqD6DQ,KAAA,CH9DA,UG8DA,EAAA,KAAA,CrD7DR,OqD6DQ,OAAA,CAAA,QACE,WAAA,OtDuxGZ,CsD9wGU,CrDvER,SqDuEQ,CHxEA,SGwEA,CrDvER,UqDuEQ,CAzEF,WAyEE,CAzEF,UA0EI,MAAA,StDgxGZ","names":[],"sourceRoot":"webpack:///","file":"light-theme.css","x_google_ignoreList":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]}