{"version":3,"sources":["./src/app/custom-elements/events/event.service.ts","./src/app/custom-elements/events/event-order-by.pipe.ts","./src/app/custom-elements/events/event-date-range.pipe.ts","./src/app/custom-elements/events/event-list.component.ts","./src/app/custom-elements/events/event-list.module.ts"],"names":["eventsPath","http","now","Date","this","currentDate","UTC","getFullYear","getMonth","getDate","events$","getEvents","upcomingEvents$","pipe","map","events","filter","event","endDate","pastEvents$","get","eventResponses","eventResponse","startDate","undefined","publishLast","connect","EventService","transform","orderBy","sort","eventOne","eventTwo","EventOrderByPipe","getTime","getYear","getDay","getDateString","EventDateRangePipe","date","getUTCDate","months","getUTCMonth","getUTCFullYear","eventService","EventListComponent","customElementComponent","EventListModule"],"mappings":"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","file":"events-event-list-module.07fce99c81e5a7178e7b.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { publishLast, map } from 'rxjs/operators';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { EventResponse, Event } from './event.model';\n\nconst eventsPath = CONTENT_URL_PREFIX + 'events.json';\n\n@Injectable()\nexport class EventService {\n  currentDate: Date;\n  private events$: Observable<Event[]>;\n  upcomingEvents$: Observable<Event[]>;\n  pastEvents$: Observable<Event[]>;\n\n  constructor(private http: HttpClient) {\n    const now = new Date();\n    // Compare soley on UTC date, without factoring in time.\n    this.currentDate = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));\n    this.events$ = this.getEvents();\n    this.upcomingEvents$ = this.events$.pipe(\n      map(events =>\n        events.filter(event => event.endDate >= this.currentDate)\n      )\n    );\n    this.pastEvents$ = this.events$.pipe(\n      map(events =>\n        events.filter(event => event.endDate < this.currentDate)\n      )\n    );\n  }\n\n  /**\n   * Fetch Event JSON from file and return an Observable that emits an Event array.\n   */\n  private getEvents(): Observable<Event[]> {\n    const events = this.http.get<EventResponse[]>(eventsPath).pipe(\n      map(eventResponses =>\n        eventResponses.map(eventResponse => {\n          const event: Event = {\n            ...eventResponse,\n            startDate: eventResponse.startDate ? new Date(eventResponse.startDate) : undefined,\n            endDate: new Date(eventResponse.endDate)\n          };\n          return event;\n        })\n      ),\n      publishLast(),\n    );\n\n    (events as ConnectableObservable<Event[]>).connect();\n    return events;\n  };\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Event } from './event.model';\n\ntype EventOrderBy = 'ascending' | 'descending';\n\n/**\n * Transforms the events to sorted ascending or descending order by date.\n * If an event has a startDate, order based on it.  If not, use it's endDate.\n */\n@Pipe({name: 'eventOrderBy'})\nexport class EventOrderByPipe implements PipeTransform {\n  transform(events: Event[] | null, orderBy: EventOrderBy): Event[] {\n    if (events === null) {\n      return [];\n    }\n    switch (orderBy) {\n      case 'ascending': {\n        return events.sort((eventOne, eventTwo) => +(eventOne.startDate || eventOne.endDate) - +(eventTwo.startDate || eventTwo.endDate));\n      }\n      case 'descending': {\n        return events.sort((eventOne, eventTwo) => +(eventTwo.startDate || eventTwo.endDate) - +(eventOne.startDate || eventOne.endDate));\n      }\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Event } from './event.model';\n\n/**\n * Transforms the startDate and endDate for a given event into a dange range string.\n * undefined until '01-01-2019' -> 'January 1, 2019'\n * '01-01-2019' until '01-01-2019' -> 'January 1, 2019'\n * '01-01-2019' until '01-02-2019' -> 'January 1 - 2, 2019'\n * '01-28-2019' until '02-01-2019' -> 'January 28 - February 1, 2019'\n * '12-31-2018' until '01-01-2019' -> 'December 31, 2018 - January 1, 2019'\n */\n@Pipe({name: 'eventDateRange'})\nexport class EventDateRangePipe implements PipeTransform {\n  transform(event: Event): string {\n    const startDate = event.startDate;\n    const endDate = event.endDate;\n    if (!startDate || startDate.getTime() === endDate.getTime()) {\n      return getDateString(endDate);\n    } else {\n      if (getMonth(startDate) === getMonth(endDate) && getYear(startDate) === getYear(endDate)) {\n        return getMonth(startDate)\n          + ' ' + getDay(startDate) + ' - ' + getDay(endDate)\n          + ', ' + getYear(startDate);\n      } else if (getYear(startDate) === getYear(endDate)) {\n        return getMonth(startDate)\n          + ' ' + getDay(startDate)\n          + ' - ' + getMonth(endDate)\n          + ' ' + getDay(endDate)\n          + ', ' + getYear(startDate);\n      } else {\n        return getDateString(startDate)\n          + ' - ' + getDateString(endDate);\n      }\n    }\n  }\n}\n\nconst getDay = (date: Date) => date.getUTCDate();\nconst getMonth = (date: Date) => months[date.getUTCMonth()];\nconst getYear = (date: Date) => date.getUTCFullYear();\nconst getDateString = (date: Date) => getMonth(date) + ' ' + getDay(date) + ', ' + getYear(date);\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n","import { Component } from '@angular/core';\nimport { Event } from './event.model';\nimport { EventService } from './event.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: `aio-event-list`,\n  template: `\n    <p>Upcoming Events presenting about NgRx:</p>\n    <table class=\"is-full-width\">\n      <thead>\n        <tr>\n          <th>Event</th>\n          <th>Location</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let upcomingEvent of upcomingEvents$ | async | eventOrderBy:'ascending'\">\n          <th><a [href]=\"upcomingEvent.url\" [title]=\"upcomingEvent.name\">{{upcomingEvent.name}}</a></th>\n          <td>{{upcomingEvent.location}}</td>\n          <td>{{upcomingEvent | eventDateRange}}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>Past Events:</p>\n    <table class=\"is-full-width\">\n      <thead>\n        <tr>\n          <th>Event</th>\n          <th>Location</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let pastEvent of pastEvents$ | async | eventOrderBy:'descending'\">\n          <th><a [href]=\"pastEvent.url\" [title]=\"pastEvent.name\">{{pastEvent.name}}</a></th>\n          <td>{{pastEvent.location}}</td>\n          <td>{{pastEvent | eventDateRange}}</td>\n        </tr>\n      </tbody>\n    </table>\n`\n})\nexport class EventListComponent {\n  upcomingEvents$: Observable<Event[]> = this.eventService.upcomingEvents$;\n  pastEvents$: Observable<Event[]> = this.eventService.pastEvents$;\n\n  constructor(private eventService: EventService) { }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { EventListComponent } from './event-list.component';\nimport { EventService } from './event.service';\nimport { EventDateRangePipe } from './event-date-range.pipe';\nimport { EventOrderByPipe } from './event-order-by.pipe';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ EventListComponent, EventDateRangePipe, EventOrderByPipe ],\n  entryComponents: [ EventListComponent ],\n  providers: [ EventService ]\n})\nexport class EventListModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = EventListComponent;\n}\n"],"sourceRoot":"webpack:///"}