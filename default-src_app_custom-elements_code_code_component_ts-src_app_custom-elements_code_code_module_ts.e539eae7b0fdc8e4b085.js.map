{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts"],"names":["SimpleSnackBar_div_2_Template","rf","ctx","_r2","action","ctx_r0","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","this","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","setTimeout","min","dispose","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","ɵfac","t","ɵcmp","type","selectors","hostAttrs","decls","vars","consts","template","message","hasAction","directives","styles","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","event","toState","fromState","_completeExit","onEnter","run","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","viewQuery","_t","first","hostVars","hostBindings","$event","onAnimationEnd","features","animation","MatSnackBarModule","ɵmod","ɵinj","imports","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","parent","_openedSnackBarRef","value","component","config","_attach","_config","Object","assign","undefined","openFromComponent","overlayRef","injector","viewContainerRef","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","state","overlayElement","matches","remove","announce","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","ɵprov","token","snackbar","pretty","copier","logger","ariaLabel","codeFormatted","_code","code","trim","formatDisplayedCode","showMissingCodeMessage","_header","header","ngOnChanges","indent","lines","leftAlignedCode","Number","MAX_VALUE","split","line","lineIndent","search","map","substr","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","emit","c","err","src","path","region","formattedCode","codeContainer","innerHTML","textContent","doCopy","copyText","log","open","error","Error","linenums","parseInt","isNaN","match","length","CodeComponent","CodeModule","prettyPrintOne","getPrettyPrintOne","ppo","window","Promise","resolve","then","msg","console","PrettyPrinter","createFake","text","docElem","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","yPosition","pageYOffset","scrollTop","body","select","setSelectionRange","removeFake","removeChild","execCommand","CopierService"],"mappings":"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","file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.e539eae7b0fdc8e4b085.js","sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n    selector: 'aio-code',\n    template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n    ariaLabel = '';\n\n    /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n    private codeText: string;\n\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code: string) {\n        this._code = code;\n\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        } else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code(): string {\n        return this._code;\n    }\n    _code: string;\n\n    /** Whether the copy button should be shown. */\n    @Input() hideCopy: boolean;\n\n    /** Language to render the code (e.g. javascript, dart, typescript). */\n    @Input() language: string;\n\n    /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n    @Input() linenums: boolean | number | string;\n\n    /** Path to the source of the code. */\n    @Input() path: string;\n\n    /** Region of the source of the code being displayed. */\n    @Input() region: string;\n\n    /** Optional header to be displayed above the code. */\n    @Input()\n    set header(header: string) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header(): string {\n        return this._header;\n    }\n    private _header: string;\n\n    @Output() codeFormatted = new EventEmitter<void>();\n\n    /** The element in the template that will display the formatted code. */\n    @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n    constructor(\n        private snackbar: MatSnackBar,\n        private pretty: PrettyPrinter,\n        private copier: CopierService,\n        private logger: Logger\n    ) {}\n\n    ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n\n    private formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n        this.pretty\n            .formatCode(\n                leftAlignedCode,\n                this.language,\n                this.getLinenums(leftAlignedCode)\n            )\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(\n                c => this.setCodeHtml(c),\n                err => {\n                    /* ignore failure to format */\n                }\n            );\n    }\n\n    /** Sets the message showing that the code could not be found. */\n    private showMissingCodeMessage() {\n        const src = this.path\n            ? this.path + (this.region ? '#' + this.region : '')\n            : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(\n            `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n        );\n    }\n\n    /** Sets the innerHTML of the code container to the provided code string. */\n    private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n\n    /** Gets the textContent of the displayed code element. */\n    private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        } else {\n            this.logger.error(\n                new Error(`ERROR copying code to clipboard: \"${code}\"`)\n            );\n            this.snackbar.open('Copy failed. Please try again!', '', {\n                duration: 800,\n            });\n        }\n    }\n\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums(code: string) {\n        const linenums =\n      typeof this.linenums === 'boolean'\n          ? this.linenums\n          : this.linenums === 'true'\n              ? true\n              : this.linenums === 'false'\n                  ? false\n                  : typeof this.linenums === 'string'\n                      ? parseInt(this.linenums, 10)\n                      : this.linenums;\n\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums as number)\n            ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n            : linenums;\n    }\n}\n\nfunction leftAlign(text: string): string {\n    let indent = Number.MAX_VALUE;\n\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n\n    return lines\n        .map(line => line.substr(indent))\n        .join('\\n')\n        .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n    imports: [ CommonModule, MatSnackBarModule ],\n    declarations: [ CodeComponent ],\n    entryComponents: [ CodeComponent ],\n    exports: [ CodeComponent ],\n    providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement | null;\n\n    /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n    createFake(text: string) {\n        const docElem = document.documentElement!;\n        const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n        // Create a fake element to hold the contents to copy\n        this.fakeElem = document.createElement('textarea');\n\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || docElem.scrollTop;\n        this.fakeElem.style.top = yPosition + 'px';\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = text;\n\n        document.body.appendChild(this.fakeElem);\n\n        this.fakeElem.select();\n        this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n        if (this.fakeElem) {\n            document.body.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    copyText(text: string) {\n        try {\n            this.createFake(text);\n            return document.execCommand('copy');\n        } catch (err) {\n            return false;\n        } finally {\n            this.removeFake();\n        }\n    }\n}\n"],"sourceRoot":"webpack:///"}