{"version":3,"file":"src_app_custom-elements_contributor_contributor-list_module_ts.42aaca5b91dc6e39.js","mappings":"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","names":["i0","ctx_r2","ctx_r5","_r9","ctx_r8","ctx_r10","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","Subject","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","super","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","next","required","_required","control","hasValidator","Validators","coerceBooleanProperty","multiple","compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","coerceNumberProperty","_id","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","userAriaDescribedBy","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵdir","viewQuery","_c0","_c1","CdkConnectedOverlay","_t","ctx","MatSelect","arguments","_positions","originX","originY","overlayX","overlayY","panelClass","_overlayWidth","_getOverlayWidth","ngAfterViewInit","_preferredOverlayOrigin","getConnectedOverlayOrigin","index","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","CdkOverlayOrigin","getBoundingClientRect","width","t","ɵcmp","selectors","dirIndex","MatOption","MAT_OPTGROUP","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","_c2","i7","i8","styles","changeDetection","MatSelectModule","ɵmod","ɵinj","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","PANEL_CLASS","passiveListenerOptions","normalizePassiveListenerOptions","passive","_MatTooltipBase","_overlay","_scrollDispatcher","_viewContainerRef","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_document","_position","_positionAtOrigin","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_destroyed","position","positionAtOrigin","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","_detach","hide","_setupPointerEnterEventsIfNeeded","_mouseLeaveHideDelay","message","removeDescription","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","describe","tooltipClass","_tooltipClass","_setTooltipClass","monitor","origin","run","clearTimeout","_touchstartTimeout","dispose","listener","removeEventListener","stopMonitoring","delay","_cancelPendingAnimations","overlayRef","_createOverlay","_portal","ComponentPortal","_tooltipComponent","instance","attach","_triggerElement","afterHidden","isVisible","existingStrategy","getConfig","positionStrategy","_origin","ElementRef","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","ESCAPE","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","_getOrigin","_getOverlayPosition","withPositions","_addOffset","main","fallback","isLtr","originPosition","x","y","_invertPosition","overlayPosition","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","point","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","inputs","MatTooltip","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","offsetY","offsetX","DOCUMENT","_TooltipComponentBase","animationMode","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_hideTimeoutId","_showTimeoutId","_toggleVisibility","_handleMouseLeave","_finalizeAnimation","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","getPropertyValue","ANIMATION_MODULE_TYPE","changeDetectorRef","_isMultiline","_isTooltipMultiline","rect","height","tooltip_c0","hostVars","decls","MatTooltipModule","A11yModule","_r8","ctx_r7","ctx_r4","_r10","ctx_r9","_r12","ctx_r11","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","startIndex","Math","max","min","ɵprov","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","mixinInitialized","_MatPaginatorBase","_intl","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","selectConfig","_intlChanges","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","pageIndex","_updateDisplayedPageSizeOptions","p","_initialized","_markInitialized","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","MatPaginator","intl","_pageSizeLabelId","_formFieldAppearance","formFieldAppearance","i6","MatPaginatorModule","MatButtonModule","contributorsPath","CONTENT_URL_PREFIX","knownGroups","ContributorService","http","BehaviorSubject","_currentContributorsPage$","asObservable","contributors","getContributors","updateContributorsCurrentPage","coreContributors","get","commmunityContributors","currentContributorsPage$","currentPage","commContribs","reduce","prev","current","login","name","pictureUrl","avatar_url","group","combineLatest","contribs","contribMap","Object","keys","key","contributor","contribGroup","cmap","order","compareContributors","compareGroups","static","core","l","r","toUpperCase","$event","ContributorComponent","json","contributorInfo","clickable","person","JSON","parse","bioImage","pictureBase","picture","noPicture","flipCard","isFlipped","ContributorListComponent","contributorService","locationService","destroy$","grps","groupName","search","groups","groupNames","g","selectGroup","contributorPage$","toLowerCase","selectedGroup","setSearch","changePage","ContributorModule","ContributorListModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2020/select.mjs","./node_modules/@angular/material/fesm2020/tooltip.mjs","./node_modules/@angular/material/fesm2020/paginator.mjs","./src/app/custom-elements/contributor/contributor.service.ts","./src/app/custom-elements/contributor/contributor.component.ts","./src/app/custom-elements/contributor/contributor-list.component.ts","./src/app/custom-elements/contributor/contributor-list.module.ts"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth();\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // Note that it's important that we read this in `ngAfterViewInit`, because\n        // reading it earlier will cause the form field to return a different element.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n    }\n    open() {\n        this._overlayWidth = this._getOverlayWidth();\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth() {\n        const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin\n            ? this._preferredOverlayOrigin.elementRef\n            : this._preferredOverlayOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n","import { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ElementRef, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined }, { type: i4.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n        this._cssClassPrefix = 'mat-mdc';\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _elementRef, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n    }\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:-8px;right:-8px;bottom:-8px;left:-8px;z-index:-1;position:absolute}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:-8px;right:-8px;bottom:-8px;left:-8px;z-index:-1;position:absolute}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i6 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i4 from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatPaginatorIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatPaginatorBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", selectConfig: \"selectConfig\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], selectConfig: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\nlet nextUniqueId = 0;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        /** ID for the DOM node containing the paginator's items per page label. */\n        this._pageSizeLabelId = `mat-paginator-page-size-label-${nextUniqueId++}`;\n        this._formFieldAppearance = defaults?.formFieldAppearance || 'outline';\n    }\n}\nMatPaginator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPaginator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-mdc-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatIconButton, selector: \"button[mat-icon-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: i5.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i6.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"directive\", type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-mdc-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"] }]\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule], exports: [MatPaginator] });\nMatPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Core', 'Contributor', 'Community'];\n\n@Injectable()\nexport class ContributorService {\n    contributors: Observable<ContributorGroup[]>;\n    private _currentContributorsPage$ = new BehaviorSubject(1);\n    currentContributorsPage$ = this._currentContributorsPage$.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.contributors = this.getContributors();\n    }\n\n    updateContributorsCurrentPage(page: number) {\n        this._currentContributorsPage$.next(page);\n    }\n\n    private getContributors() {\n        // combine both contributors.json and github api into one list\n        const coreContributors = this.http.get<{ [key: string]: Contributor }>(contributorsPath);\n        const commmunityContributors = this.currentContributorsPage$\n            .pipe(\n                switchMap(currentPage => {\n                    return this.http.get<any[]>(`https://api.github.com/repos/ngrx/platform/contributors?per_page=100&page=${currentPage}`)\n                        .pipe(\n                            map(commContribs => {\n                                const data = commContribs.reduce((prev, current) => {\n                                    return {\n                                        ...prev,\n                                        [current.login]: {\n                                            name: current.login,\n                                            pictureUrl: current.avatar_url,\n                                            group: 'Community'\n                                        }\n                                    };\n                                }, {});\n\n                                return data;\n                            })\n                        );\n                })\n            );\n\n        const contributors = combineLatest([coreContributors, commmunityContributors])\n            .pipe(\n                // Create group map\n                map(([contribs, commContribs]) => {\n                    const contribMap: { [name: string]: Contributor[] } = {};\n\n                    // adds core/contributors\n                    Object.keys(contribs).forEach(key => {\n                        const contributor = contribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    // adds community\n                    Object.keys(commContribs).forEach(key => {\n                        const contributor = commContribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    return contribMap;\n                }),\n\n                // Flatten group map into sorted group array of sorted contributors\n                map(cmap => {\n                    return Object.keys(cmap)\n                        .map(key => {\n                            const order = knownGroups.indexOf(key);\n                            return {\n                                name: key,\n                                order: order === -1 ? knownGroups.length : order,\n                                contributors: cmap[key].sort(compareContributors),\n                            } as ContributorGroup;\n                        })\n                        .sort(compareGroups);\n                })\n            );\n\n        return contributors;\n    }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n    return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n    return l.order === r.order\n        ? l.name > r.name\n            ? 1\n            : -1\n        : l.order > r.order\n            ? 1\n            : -1;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n    selector: 'aio-contributor',\n    template: `\n    <div [ngClass]=\"{ 'flipped': person.isFlipped }\" class=\"contributor-card\">\n\n        <div class=\"card-front\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n\n            <div class=\"contributor-image\" [style.background-image]=\"'url('+ bioImage +')'\">\n                <div class=\"contributor-info\">\n                    <a *ngIf=\"person.bio\" mat-button>\n                        View Bio\n                    </a>\n                    <a *ngIf=\"person.twitter\" mat-button class=\"icon\"\n                        href=\"https://twitter.com/{{person.twitter}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-twitter fa-2x\"></span>\n                    </a>\n                    <a *ngIf=\"person.website\" mat-button class=\"icon\"\n                        href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-link fa-2x\"></span>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-back\" *ngIf=\"person.isFlipped\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n            <p class=\"contributor-bio\">{{person.bio}}</p>\n        </div>\n    </div>\n  `\n})\nexport class ContributorComponent {\n    @HostBinding('class.clickable')\n        clickable = true;\n\n    @Input()\n        person: Contributor;\n\n    // Allows to pass contributor data as a json string.\n    // Useful for web element version of this component.\n    @Input() set json(contributorInfo: string) {\n        this.clickable = false;\n        this.person = JSON.parse(contributorInfo);\n    }\n\n    noPicture = '_no-one.jpg';\n    pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n\n    get bioImage() {\n        if (this.person.pictureUrl) {\n            return this.person.pictureUrl;\n        }\n\n        return this.pictureBase+(this.person.picture || this.noPicture);\n    }\n\n    flipCard(person: Contributor) {\n        if (!this.clickable) {\n            return;\n        }\n        person.isFlipped = !person.isFlipped;\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\nimport { Observable, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'aio-contributor-list',\n    template: `\n  <div class=\"flex-center group-buttons\">\n    <a *ngFor=\"let name of groupNames\"\n       [class.selected]=\"name === selectedGroup.name\"\n       class=\"button mat-button filter-button\"\n       (click)=\"selectGroup(name)\">{{name}}</a>\n  </div>\n  <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n    <div *ngIf=\"selectedGroup.name === 'Community'\">\n      <mat-paginator\n        [length]=\"350\"\n        [pageIndex]=\"contributorPage$ | async\"\n        [pageSize]=\"100\"\n        [hidePageSize]=\"true\"\n        aria-label=\"Select page\"\n        (page)=\"changePage($event.pageIndex + 1)\">\n      </mat-paginator>\n    </div>\n    <div class=\"contributor-group\">\n      <aio-contributor *ngFor=\"let person of selectedGroup.contributors\" [person]=\"person\"></aio-contributor>\n    </div>\n  </section>`\n})\nexport class ContributorListComponent implements OnInit, OnDestroy {\n    private groups: ContributorGroup[];\n    groupNames: string[];\n    selectedGroup: ContributorGroup;\n    contributorPage$: Observable<number>;\n    destroy$ = new Subject<void>();\n\n    constructor(\n        private contributorService: ContributorService,\n        private locationService: LocationService) { }\n\n    ngOnInit() {\n        this.contributorService.contributors\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(grps => {\n                const groupName = this.locationService.search()['group'] || '';\n                this.groups = grps;\n                this.groupNames = grps.map(g => g.name);\n                this.selectGroup(groupName);\n            });\n\n        this.contributorPage$ = this.contributorService.currentContributorsPage$.pipe(\n            map(page => page - 1)\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n    }\n\n    selectGroup(name: string) {\n        name = name.toLowerCase();\n        this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n        this.locationService.setSearch('', { group: this.selectedGroup.name });\n    }\n\n    changePage(page: number) {\n        this.contributorService.updateContributorsCurrentPage(page);\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ContributorComponent],\n    declarations: [ ContributorComponent],\n})\nexport class ContributorModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorComponent;\n}\n\n@NgModule({\n    imports: [CommonModule, MatPaginatorModule, ContributorModule],\n    declarations: [ContributorListComponent],\n    providers: [ContributorService],\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorListComponent;\n}\n\n"],"x_google_ignoreList":[0,1,2]}