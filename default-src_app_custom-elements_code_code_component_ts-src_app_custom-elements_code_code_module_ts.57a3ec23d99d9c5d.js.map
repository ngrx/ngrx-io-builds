{"version":3,"mappings":"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","names":["i0","ctx_r2","CodeComponent","snackbar","pretty","copier","logger","O","this","EventEmitter","_code","set","code","trim","formatDisplayedCode","showMissingCodeMessage","_header","header","ariaLabel","leftAlignedCode","text","indent","Number","MAX_VALUE","lines","split","forEach","lineIndent","line","search","Math","min","map","substr","join","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","tap","c","codeFormatted","emit","subscribe","src","path","region","srcMsg","formattedCode","codeContainer","nativeElement","innerHTML","textContent","copyText","log","open","duration","error","Error","linenums","parseInt","isNaN","match","length","h","selectors","CodeModule","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","window","Promise","resolve","n","then","msg","err","message","console","first","B","factory","docElem","document","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","removeChild","createFake","execCommand","removeFake","g","i","action","t","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","v","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","setTimeout","dispose","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","ɵfac","ɵcmp","directives","i3","i2","styles","matSnackBarAnimations","snackBarState","trigger","state","transform","opacity","transition","animate","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","p","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","event","toState","fromState","_completeExit","onEnter","run","detectChanges","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","take","a","element","panelClasses","panelClass","Array","isArray","classList","add","cssClass","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","activeElement","HTMLElement","contains","removeAttribute","focus","BasePortalOutlet","i1","CdkPortalOutlet","o","decls","i3$1","ɵmod","ɵinj","OverlayModule","PortalModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","parent","_openedSnackBarRef","component","config","_attach","template","arguments","_config","undefined","openFromComponent","overlayRef","injector","Injector","viewContainerRef","providers","provide","useValue","containerPortal","ComponentPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","takeUntil","detachments","overlayElement","toggle","matches","announce","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","overlayConfig","OverlayConfig","direction","positionStrategy","global","isRtl","isLeft","isRight","left","right","centerHorizontally","bottom","create","i1$1","i2$1","i3$2","ɵprov"],"sources":["./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n    selector: 'aio-code',\n    template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n    ariaLabel = '';\n\n    /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n    private codeText: string;\n\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code: string) {\n        this._code = code;\n\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        } else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code(): string {\n        return this._code;\n    }\n    _code: string;\n\n    /** Whether the copy button should be shown. */\n    @Input() hideCopy: boolean;\n\n    /** Language to render the code (e.g. javascript, dart, typescript). */\n    @Input() language: string;\n\n    /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n    @Input() linenums: boolean | number | string;\n\n    /** Path to the source of the code. */\n    @Input() path: string;\n\n    /** Region of the source of the code being displayed. */\n    @Input() region: string;\n\n    /** Optional header to be displayed above the code. */\n    @Input()\n    set header(header: string) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header(): string {\n        return this._header;\n    }\n    private _header: string;\n\n    @Output() codeFormatted = new EventEmitter<void>();\n\n    /** The element in the template that will display the formatted code. */\n    @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n    constructor(\n        private snackbar: MatSnackBar,\n        private pretty: PrettyPrinter,\n        private copier: CopierService,\n        private logger: Logger\n    ) {}\n\n    ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n\n    private formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n        this.pretty\n            .formatCode(\n                leftAlignedCode,\n                this.language,\n                this.getLinenums(leftAlignedCode)\n            )\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(\n                c => this.setCodeHtml(c),\n                err => {\n                    /* ignore failure to format */\n                }\n            );\n    }\n\n    /** Sets the message showing that the code could not be found. */\n    private showMissingCodeMessage() {\n        const src = this.path\n            ? this.path + (this.region ? '#' + this.region : '')\n            : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(\n            `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n        );\n    }\n\n    /** Sets the innerHTML of the code container to the provided code string. */\n    private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n\n    /** Gets the textContent of the displayed code element. */\n    private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        } else {\n            this.logger.error(\n                new Error(`ERROR copying code to clipboard: \"${code}\"`)\n            );\n            this.snackbar.open('Copy failed. Please try again!', '', {\n                duration: 800,\n            });\n        }\n    }\n\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums(code: string) {\n        const linenums =\n      typeof this.linenums === 'boolean'\n          ? this.linenums\n          : this.linenums === 'true'\n              ? true\n              : this.linenums === 'false'\n                  ? false\n                  : typeof this.linenums === 'string'\n                      ? parseInt(this.linenums, 10)\n                      : this.linenums;\n\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums as number)\n            ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n            : linenums;\n    }\n}\n\nfunction leftAlign(text: string): string {\n    let indent = Number.MAX_VALUE;\n\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n\n    return lines\n        .map(line => line.substr(indent))\n        .join('\\n')\n        .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n    imports: [ CommonModule, MatSnackBarModule ],\n    declarations: [ CodeComponent ],\n    entryComponents: [ CodeComponent ],\n    exports: [ CodeComponent ],\n    providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement | null;\n\n    /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n    createFake(text: string) {\n        const docElem = document.documentElement!;\n        const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n        // Create a fake element to hold the contents to copy\n        this.fakeElem = document.createElement('textarea');\n\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || docElem.scrollTop;\n        this.fakeElem.style.top = yPosition + 'px';\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = text;\n\n        document.body.appendChild(this.fakeElem);\n\n        this.fakeElem.select();\n        this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n        if (this.fakeElem) {\n            document.body.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    copyText(text: string) {\n        try {\n            this.createFake(text);\n            return document.execCommand('copy');\n        } catch (err) {\n            return false;\n        } finally {\n            this.removeFake();\n        }\n    }\n}\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                    entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"sourceRoot":"webpack:///","file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.57a3ec23d99d9c5d.js"}