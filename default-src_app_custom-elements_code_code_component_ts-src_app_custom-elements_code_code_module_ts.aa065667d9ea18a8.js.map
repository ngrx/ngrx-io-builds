{"version":3,"file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.aa065667d9ea18a8.js","mappings":"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","names":["i0","CodeComponent","constructor","snackbar","pretty","copier","logger","this","EventEmitter","code","_code","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","ariaLabel","ngOnChanges","leftAlignedCode","text","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","map","substring","join","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","tap","codeFormatted","emit","subscribe","c","err","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","doCopy","copyText","log","open","duration","error","Error","linenums","parseInt","isNaN","match","length","selectors","CodeModule","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","window","Promise","resolve","s","then","msg","message","console","first","factory","createFake","docElem","document","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","removeFake","removeChild","execCommand","t","o","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵfac","ɵcmp","n","dependencies","i2","i3","styles","matSnackBarAnimations","snackBarState","trigger","state","transform","opacity","transition","animate","_MatSnackBarContainerBase","BasePortalOutlet","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","super","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","h","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","take","element","panelClasses","panelClass","Array","isArray","cssClass","classList","add","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","activeElement","HTMLElement","contains","removeAttribute","focus","i1","ɵdir","viewQuery","CdkPortalOutlet","MatSnackBarContainer","decls","i3$1","ɵmod","ɵinj","OverlayModule","PortalModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","openFromComponent","component","config","_attach","openFromTemplate","template","_config","undefined","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","injector","Injector","viewContainerRef","providers","provide","useValue","containerPortal","ComponentPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","takeUntil","detachments","overlayElement","toggle","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","OverlayConfig","direction","positionStrategy","global","isRtl","isLeft","isRight","left","m","right","centerHorizontally","bottom","create","i1$1","i2$1","i3$2","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///","sources":["./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./node_modules/@angular/material/fesm2020/snack-bar.mjs"],"sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n    selector: 'aio-code',\n    template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n    ariaLabel = '';\n\n    /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n    private codeText: string;\n\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code: string) {\n        this._code = code;\n\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        } else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code(): string {\n        return this._code;\n    }\n    _code: string;\n\n    /** Whether the copy button should be shown. */\n    @Input() hideCopy: boolean;\n\n    /** Language to render the code (e.g. javascript, dart, typescript). */\n    @Input() language: string;\n\n    /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n    @Input() linenums: boolean | number | string;\n\n    /** Path to the source of the code. */\n    @Input() path: string;\n\n    /** Region of the source of the code being displayed. */\n    @Input() region: string;\n\n    /** Optional header to be displayed above the code. */\n    @Input()\n    set header(header: string) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header(): string {\n        return this._header;\n    }\n    private _header: string;\n\n    @Output() codeFormatted = new EventEmitter<void>();\n\n    /** The element in the template that will display the formatted code. */\n    @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n    constructor(\n        private snackbar: MatSnackBar,\n        private pretty: PrettyPrinter,\n        private copier: CopierService,\n        private logger: Logger\n    ) {}\n\n    ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n\n    private formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n        this.pretty\n            .formatCode(\n                leftAlignedCode,\n                this.language,\n                this.getLinenums(leftAlignedCode)\n            )\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(\n                c => this.setCodeHtml(c),\n                err => {\n                    /* ignore failure to format */\n                }\n            );\n    }\n\n    /** Sets the message showing that the code could not be found. */\n    private showMissingCodeMessage() {\n        const src = this.path\n            ? this.path + (this.region ? '#' + this.region : '')\n            : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(\n            `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n        );\n    }\n\n    /** Sets the innerHTML of the code container to the provided code string. */\n    private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n\n    /** Gets the textContent of the displayed code element. */\n    private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        } else {\n            this.logger.error(\n                new Error(`ERROR copying code to clipboard: \"${code}\"`)\n            );\n            this.snackbar.open('Copy failed. Please try again!', '', {\n                duration: 800,\n            });\n        }\n    }\n\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums(code: string) {\n        const linenums =\n      typeof this.linenums === 'boolean'\n          ? this.linenums\n          : this.linenums === 'true'\n              ? true\n              : this.linenums === 'false'\n                  ? false\n                  : typeof this.linenums === 'string'\n                      ? parseInt(this.linenums, 10)\n                      : this.linenums;\n\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums as number)\n            ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n            : linenums;\n    }\n}\n\nfunction leftAlign(text: string): string {\n    let indent = Number.MAX_VALUE;\n\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n\n    return lines\n        .map(line => line.substring(indent))\n        .join('\\n')\n        .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n    imports: [CommonModule, MatSnackBarModule],\n    declarations: [CodeComponent],\n    exports: [CodeComponent],\n    providers: [PrettyPrinter, CopierService],\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substring(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement | null;\n\n    /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n    createFake(text: string) {\n        const docElem = document.documentElement!;\n        const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n        // Create a fake element to hold the contents to copy\n        this.fakeElem = document.createElement('textarea');\n\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || docElem.scrollTop;\n        this.fakeElem.style.top = yPosition + 'px';\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = text;\n\n        document.body.appendChild(this.fakeElem);\n\n        this.fakeElem.select();\n        this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n        if (this.fakeElem) {\n            document.body.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    copyText(text: string) {\n        try {\n            this.createFake(text);\n            return document.execCommand('copy');\n        } catch (err) {\n            return false;\n        } finally {\n            this.removeFake();\n        }\n    }\n}\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0-rc.1\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"]}