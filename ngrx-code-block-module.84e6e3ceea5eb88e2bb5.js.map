{"version":3,"sources":["./src/app/custom-elements/ngrx/code-block.component.ts","./src/app/custom-elements/ngrx/code-block.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts"],"names":["pretty","code","formattedCode","ngAfterContentInit","this","formatCode","subscribe","codeContainer","nativeElement","innerHTML","CodeBlockComponent","customElementComponent","CodeBlockModule","logger","prettyPrintOne","getPrettyPrintOne","pipe","ppo","window","Promise","resolve","then","err","msg","message","error","Error","language","linenums","substr","console","PrettyPrinter"],"mappings":"iNAyBA,aAgBE,WAAoBA,GAAA,KAAAA,SAPX,KAAAC,KAAO,GAKhB,KAAAC,cAAgB,G,OAIhB,YAAAC,mBAAA,sBAGEC,KAAKJ,OAAOK,WAFa,YAAdD,KAAKH,KAnCI,wLAUG,0HA2BMK,WAAU,SAAAJ,GACrC,EAAKK,cAAcC,cAAcC,UAAYP,M,sCAdtCQ,GAAkB,Y,uBAAlBA,EAAkB,wD,MAAA,K,UAGO,K,4LARlC,gBACE,kBACF,S,oBALJ,GCnBA,0BAQE,KAAAC,uBAAoC,E,8BADzBC,I,oDAAAA,IAAe,UAFf,CAAC,KAAc,SAJjB,CAAC,Q,EADZ,I,kCCJA,8GAcA,aAKE,WAAoBC,GAAA,KAAAA,SAClBT,KAAKU,eAAiB,YAAYV,KAAKW,qBAAqBC,KAAK,e,OAG3D,YAAAD,kBAAR,sBACQE,EAAOC,OAA+B,eAC5C,OAAOD,EAAME,QAAQC,QAAQH,GAE3B,qCACGI,MACC,WAAM,OAACH,OAA+B,kBACtC,SAAAI,GACE,IAAMC,EAAM,uCAAuCD,EAAIE,QAGvD,OAFA,EAAKX,OAAOY,MAAM,IAAIC,MAAMH,IAErB,WAAQ,MAAM,IAAIG,MAAMH,QAczC,YAAAlB,WAAA,SAAWJ,EAAc0B,EAAmBC,GAC1C,OAAOxB,KAAKU,eAAeE,KACzB,aAAI,SAAAC,GACF,IACE,OAAOA,EAAIhB,EAAM0B,EAAUC,GAC3B,MAAON,GACP,IAAMC,EAAM,sCAAsCtB,EAAK4B,OAAO,EAAG,IAAG,QAEpE,MADAC,QAAQL,MAAMF,EAAKD,GACb,IAAII,MAAMH,OAGpB,gB,sCA5COQ,GAAa,Y,yBAAbA,EAAa,QAAbA,EAAa,Y,EAD1B","file":"ngrx-code-block-module.84e6e3ceea5eb88e2bb5.js","sourcesContent":["import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\nconst EFFECTS_EXAMPLE = `\nsearch$ = createEffect(() => \n  this.actions$.pipe(\n    ofType(BookActions.search),\n    exhaustMap(action =>\n      this.googleBooksService.search(action.query)\n    )\n  )\n);`;\n\nconst SCHEMATICS_EXAMPLE = `\n$ ng g store State --root --module app.module.ts\n create src/app/reducers/index.ts\n update src/app/app.module.ts\n`;\n\n@Component({\n  selector: 'ngrx-code-block',\n  template: `\n    <div class=\"prettyprint-scroller\">\n      <pre class=\"prettyprint\" #codeContainer></pre>\n    </div>\n  `,\n})\nexport class CodeBlockComponent implements AfterContentInit {\n  @Input() code = '';\n\n  @ViewChild('codeContainer', { read: ElementRef, static: true })\n  codeContainer;\n\n  formattedCode = '';\n\n  constructor(private pretty: PrettyPrinter) {}\n\n  ngAfterContentInit() {\n    let code = this.code === 'effects' ? EFFECTS_EXAMPLE : SCHEMATICS_EXAMPLE;\n\n    this.pretty.formatCode(code).subscribe(formattedCode => {\n      this.codeContainer.nativeElement.innerHTML = formattedCode;\n    });\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeBlockComponent } from './code-block.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { PrettyPrinter } from '../code/pretty-printer.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CodeBlockComponent],\n  exports: [CodeBlockComponent],\n  entryComponents: [CodeBlockComponent],\n  providers: [PrettyPrinter],\n})\nexport class CodeBlockModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = CodeBlockComponent;\n}\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n  import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      System.import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}