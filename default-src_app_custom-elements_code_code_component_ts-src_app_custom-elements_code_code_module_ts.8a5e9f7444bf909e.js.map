{"version":3,"file":"default-src_app_custom-elements_code_code_component_ts-src_app_custom-elements_code_code_module_ts.8a5e9f7444bf909e.js","mappings":"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","names":["i0","_r3","ctx_r2","doCopy","ctx_r0","ariaLabel","CodeComponent","code","this","_code","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","constructor","snackbar","pretty","copier","logger","codeFormatted","EventEmitter","ngOnChanges","leftAlignedCode","leftAlign","text","indent","Number","MAX_VALUE","lines","split","forEach","line","lineIndent","search","Math","min","map","substring","join","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","tap","emit","subscribe","c","err","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","copyText","log","open","duration","error","Error","linenums","parseInt","isNaN","match","length","t","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_2__","Xpm","selectors","viewQuery","rf","ctx","CodeComponent_button_2_Template","hideCopy","CodeModule","_angular_core__WEBPACK_IMPORTED_MODULE_1__","oAB","cJS","PrettyPrinter","CopierService","imports","CommonModule","MatSnackBarModule","prettyPrintOne","fromPromise","getPrettyPrintOne","share","ppo","window","Promise","resolve","__webpack_require__","e","then","bind","msg","message","console","first","_angular_core__WEBPACK_IMPORTED_MODULE_5__","Yz7","factory","ɵfac","createFake","docElem","document","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","removeFake","removeChild","execCommand","_angular_core__WEBPACK_IMPORTED_MODULE_0__","SimpleSnackBar_div_2_Template","_r2","ctx_r1","action","data","_c0","MatSnackBarContainer_ng_template_4_Template","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","MatSnackBarLabel","ɵdir","type","hostAttrs","MatSnackBarActions","MatSnackBarAction","SimpleSnackBar","snackBarRef","hasAction","ɵcmp","exportAs","decls","vars","consts","template","dependencies","styles","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","trigger","state","transform","opacity","transition","animate","uniqueId","_MatSnackBarContainerBase","BasePortalOutlet","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","super","_document","inject","DOCUMENT","_trackedModals","Set","_announceDelay","_destroyed","_onAnnounce","_animationState","_liveElementId","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","ngOnDestroy","_clearFromModals","onMicrotaskEmpty","take","element","panelClasses","panelClass","Array","isArray","cssClass","classList","add","_exposeToModals","id","modals","querySelectorAll","i","modal","ariaOwns","indexOf","newValue","replace","removeAttribute","clear","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","activeElement","HTMLElement","contains","focus","CdkPortalOutlet","_t","features","MatSnackBarContainer","label","_label","labelClass","toggle","ɵMatSnackBarContainer_BaseFactory","hostVars","hostBindings","$event","i3$1","animation","ɵmod","ɵinj","OverlayModule","PortalModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_openedSnackBarRef","parent","_parentSnackBar","_snackBarRefAtThisLevel","_overlay","_injector","_breakpointObserver","_defaultConfig","openFromComponent","component","config","_attach","openFromTemplate","_config","undefined","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","injector","Injector","viewContainerRef","providers","provide","useValue","containerPortal","ComponentPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","takeUntil","detachments","overlayElement","handsetCssClass","matches","announce","_animateSnackBar","overlayConfig","OverlayConfig","direction","positionStrategy","global","isRtl","isLeft","isRight","left","right","centerHorizontally","bottom","create","i1$1","i2$1","i3$2","ɵprov","token","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///","sources":["./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/shared/copier.service.ts","./node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n    selector: 'aio-code',\n    template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `,\n})\nexport class CodeComponent implements OnChanges {\n    ariaLabel = '';\n\n    /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n    private codeText: string;\n\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code: string) {\n        this._code = code;\n\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        } else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code(): string {\n        return this._code;\n    }\n    _code: string;\n\n    /** Whether the copy button should be shown. */\n    @Input() hideCopy: boolean;\n\n    /** Language to render the code (e.g. javascript, dart, typescript). */\n    @Input() language: string;\n\n    /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n    @Input() linenums: boolean | number | string;\n\n    /** Path to the source of the code. */\n    @Input() path: string;\n\n    /** Region of the source of the code being displayed. */\n    @Input() region: string;\n\n    /** Optional header to be displayed above the code. */\n    @Input()\n    set header(header: string) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header(): string {\n        return this._header;\n    }\n    private _header: string;\n\n    @Output() codeFormatted = new EventEmitter<void>();\n\n    /** The element in the template that will display the formatted code. */\n    @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n    constructor(\n        private snackbar: MatSnackBar,\n        private pretty: PrettyPrinter,\n        private copier: CopierService,\n        private logger: Logger\n    ) {}\n\n    ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n\n    private formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n        this.pretty\n            .formatCode(\n                leftAlignedCode,\n                this.language,\n                this.getLinenums(leftAlignedCode)\n            )\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(\n                c => this.setCodeHtml(c),\n                err => {\n                    /* ignore failure to format */\n                }\n            );\n    }\n\n    /** Sets the message showing that the code could not be found. */\n    private showMissingCodeMessage() {\n        const src = this.path\n            ? this.path + (this.region ? '#' + this.region : '')\n            : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(\n            `<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`\n        );\n    }\n\n    /** Sets the innerHTML of the code container to the provided code string. */\n    private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n\n    /** Gets the textContent of the displayed code element. */\n    private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        } else {\n            this.logger.error(\n                new Error(`ERROR copying code to clipboard: \"${code}\"`)\n            );\n            this.snackbar.open('Copy failed. Please try again!', '', {\n                duration: 800,\n            });\n        }\n    }\n\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums(code: string) {\n        const linenums =\n      typeof this.linenums === 'boolean'\n          ? this.linenums\n          : this.linenums === 'true'\n              ? true\n              : this.linenums === 'false'\n                  ? false\n                  : typeof this.linenums === 'string'\n                      ? parseInt(this.linenums, 10)\n                      : this.linenums;\n\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums as number)\n            ? (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT\n            : linenums;\n    }\n}\n\nfunction leftAlign(text: string): string {\n    let indent = Number.MAX_VALUE;\n\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n\n    return lines\n        .map(line => line.substring(indent))\n        .join('\\n')\n        .trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n    imports: [CommonModule, MatSnackBarModule],\n    declarations: [CodeComponent],\n    exports: [CodeComponent],\n    providers: [PrettyPrinter, CopierService],\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n    import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n    private prettyPrintOne: Observable<PrettyPrintOne>;\n\n    constructor(private logger: Logger) {\n        this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n    }\n\n    private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n        const ppo = (window as any)['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n        // prettify.js is not in window global; load it with webpack loader\n            import('assets/js/prettify.js')\n                .then(\n                    () => (window as any)['prettyPrintOne'],\n                    err => {\n                        const msg = `Cannot get prettify.js from server: ${err.message}`;\n                        this.logger.error(new Error(msg));\n                        // return a pretty print fn that always fails.\n                        return () => {\n                            throw new Error(msg);\n                        };\n                    });\n    }\n\n    /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n    formatCode(code: string, language?: string, linenums?: number | boolean) {\n        return this.prettyPrintOne.pipe(\n            map(ppo => {\n                try {\n                    return ppo(code, language, linenums);\n                } catch (err) {\n                    const msg = `Could not format code that begins '${code.substring(0, 50)}...'.`;\n                    console.error(msg, err);\n                    throw new Error(msg);\n                }\n            }),\n            first(),  // complete immediately\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement | null;\n\n    /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n    createFake(text: string) {\n        const docElem = document.documentElement!;\n        const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n        // Create a fake element to hold the contents to copy\n        this.fakeElem = document.createElement('textarea');\n\n        // Prevent zooming on iOS\n        this.fakeElem.style.fontSize = '12pt';\n\n        // Reset box model\n        this.fakeElem.style.border = '0';\n        this.fakeElem.style.padding = '0';\n        this.fakeElem.style.margin = '0';\n\n        // Move element out of screen horizontally\n        this.fakeElem.style.position = 'absolute';\n        this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n\n        // Move element to the same position vertically\n        const yPosition = window.pageYOffset || docElem.scrollTop;\n        this.fakeElem.style.top = yPosition + 'px';\n\n        this.fakeElem.setAttribute('readonly', '');\n        this.fakeElem.value = text;\n\n        document.body.appendChild(this.fakeElem);\n\n        this.fakeElem.select();\n        this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n        if (this.fakeElem) {\n            document.body.removeChild(this.fakeElem);\n            this.fakeElem = null;\n        }\n    }\n\n    copyText(text: string) {\n        try {\n            this.createFake(text);\n            return document.execCommand('copy');\n        } catch (err) {\n            return false;\n        } finally {\n            this.removeFake();\n        }\n    }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\nlet uniqueId = 0;\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        this._document = inject(DOCUMENT);\n        this._trackedModals = new Set();\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /** Unique ID of the aria-live element. */\n        this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(crisbeto): consider de-duplicating this with the `LiveAnnouncer`.\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    /** Applies the correct CSS class to the label based on its content. */\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatSnackBarContainer, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], propDecorators: { _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\nclass MatSnackBarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarModule, declarations: [SimpleSnackBar,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatCommonModule,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [\n                        MatCommonModule,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                    declarations: [\n                        SimpleSnackBar,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                }]\n        }] });\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\nclass _MatSnackBarBase {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSnackBarBase }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"x_google_ignoreList":[4]}