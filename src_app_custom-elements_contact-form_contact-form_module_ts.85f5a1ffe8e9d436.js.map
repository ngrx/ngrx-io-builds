{"version":3,"file":"src_app_custom-elements_contact-form_contact-form_module_ts.85f5a1ffe8e9d436.js","mappings":"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","names":["listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_class","constructor","_platform","_ngZone","this","_monitoredElements","Map","monitor","elementOrRef","isBrowser","EMPTY","element","coerceElement","info","get","subject","result","Subject","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","TextFieldModule","_class4","ɵmod","type","ɵinj","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","MatInput","disabled","_disabled","value","coerceBooleanProperty","focused","id","_id","_uid","required","_required","control","hasValidator","Validators","_type","_validateType","_isTextarea","getSupportedInputTypes","has","_elementRef","nativeElement","_inputValueAccessor","readonly","_readonly","inputValueAccessor","_autofillMonitor","ngZone","_formField","super","controlType","autofilled","_neverEmptyInputTypes","filter","_iOSKeyupListener","el","selectionStart","selectionEnd","setSelectionRange","nodeName","toLowerCase","_previousNativeValue","IOS","_isServer","_isNativeSelect","_isInFormField","multiple","ngAfterViewInit","subscribe","ngOnChanges","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","newValue","placeholder","_getPlaceholder","_previousPlaceholder","setAttribute","removeAttribute","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","i2","i3","i4","MAT_FORM_FIELD","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","name","errorState","inputs","errorStateMatcher","userAriaDescribedBy","exportAs","features","provide","MatFormFieldControl","useExisting","MatInputModule","_class2","imports","MatCommonModule","MatFormFieldModule","ctx_r4","error","_r6","_r3","ctx_r5","submit","ContactFormComponent_form_0_div_16_Template","valid","ctx_r0","ContactFormComponent","firestore","emailSent","contact","addDoc","collection","to","from","email","replyTo","message","text","body","fromName","then","e","decls","vars","consts","template","ContactFormComponent_form_0_Template","ContactFormComponent_ng_template_1_Template","_r1","ContactFormModule","customElementComponent","CommonModule","MatButtonModule","FormsModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input.mjs","./src/app/custom-elements/contact-form/contact-form.component.ts","./src/app/custom-elements/contact-form/contact-form.module.ts"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TextFieldModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n});\nclass MatInput extends _MatInputBase {\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\nclass MatInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [MatCommonModule, MatFormFieldModule], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                    declarations: [MatInput],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import { Component } from '@angular/core';\nimport {addDoc, collection, Firestore} from '@angular/fire/firestore/lite';\n\n@Component({\n    selector: 'ngrx-contact-form',\n    styles: [\n        `\n        :host {\n            display: block;\n            margin: 20px auto;\n            max-width: 500px;\n        }\n        form {\n            display: flex;\n            flex-direction: column;\n        }\n        button {\n                align-self: end;\n            }\n        `\n    ],\n    template: `\n      <form *ngIf=\"!emailSent else thankYou\" #contactForm=\"ngForm\" (ngSubmit)=\"submit(contactForm.value)\">\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n          <mat-label>Name</mat-label>\n          <input matInput required ngModel name=\"fromName\" placeholder=\"Enter your name\">\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n          <mat-label>Email</mat-label>\n          <input type=\"email\" matInput ngModel email name=\"email\" required placeholder=\"Enter your email\">\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n          <mat-label>Message</mat-label>\n          <textarea type=\"text\" matInput ngModel name=\"body\" required placeholder=\"Type your message\" rows=\"10\"></textarea>\n        </mat-form-field>\n\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!contactForm.valid\">Send</button>\n        <div *ngIf=\"error\" class=\"alert is-critical\">\n          <p>Error sending email</p>\n          <p>{{error}}</p>\n        </div>\n      </form>\n      <ng-template #thankYou>\n        <div class=\"alert is-helpful\">\n          <p>Thank you for reaching out.</p>\n          <p>Our team would respond promptly.</p>\n        </div>\n      </ng-template>\n    `\n})\n\nexport class ContactFormComponent {\n    protected emailSent = false;\n    protected error: unknown;\n\n    constructor(private readonly firestore: Firestore ) { }\n\n    submit(contact: {\n        fromName: string;\n        email: string;\n        body: string;\n    }) {\n        addDoc(collection(this.firestore, 'mail'), {\n            to: ['info@ts.dev', 'hello+ngrx@liveloveapp.com'],\n            from: contact.email,\n            replyTo: [contact.email, 'info@ts.dev', 'hello+ngrx@liveloveapp.com'],\n            message: {\n                subject: 'NgRx Enterprise Support inquiry',\n                text: `${contact.body}\\n${contact.fromName}`\n            }\n        }).then(\n            () => this.emailSent = true,\n            (e) => this.error = e,\n        )\n    }\n\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { ContactFormComponent } from './contact-form.component';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n    imports: [CommonModule, MatButtonModule, FormsModule, MatFormFieldModule, MatInputModule],\n    declarations: [ ContactFormComponent],\n})\nexport class ContactFormModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContactFormComponent;\n}\n"],"x_google_ignoreList":[0,1]}