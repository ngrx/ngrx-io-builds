{"version":3,"file":"src_app_custom-elements_contributor_contributor-list_module_ts.0a6db6db9556c21b.js","mappings":"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","names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","i0","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_10_Template","_r9","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","ctx_r10","_handleKeydown","ctx_r4","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","Subject","_MatSelectBase","focused","_focused","_panelOpen","_placeholder","required","_required","control","hasValidator","Validators","coerceBooleanProperty","_multiple","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","coerceNumberProperty","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","super","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","controlType","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","userAriaDescribedBy","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","_skipPredicate","item","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","firstEnabledOptionIndex","index","length","get","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","t","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵdir","type","viewQuery","CdkConnectedOverlay","_t","first","inputs","errorStateMatcher","outputs","features","MatSelect","arguments","_positions","originX","originY","overlayX","overlayY","_hideSingleSelectionIndicator","hideSingleSelectionIndicator","_overlayWidth","_getOverlayWidth","ngAfterViewInit","_preferredOverlayOrigin","getConnectedOverlayOrigin","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","CdkOverlayOrigin","getBoundingClientRect","width","_syncParentProperties","ɵMatSelect_BaseFactory","ɵcmp","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","hostAttrs","hostVars","hostBindings","toString","errorState","disableRipple","exportAs","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r0","dependencies","i7","i8","styles","encapsulation","data","animation","changeDetection","MatSelectModule","ɵmod","ɵinj","providers","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","PANEL_CLASS","passiveListenerOptions","normalizePassiveListenerOptions","passive","_MatTooltipBase","position","_position","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","positionAtOrigin","_positionAtOrigin","_detach","_disabled","hide","_setupPointerEnterEventsIfNeeded","_showDelay","_hideDelay","_mouseLeaveHideDelay","message","_message","_ariaDescriber","removeDescription","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","describe","tooltipClass","_tooltipClass","_setTooltipClass","_overlay","_scrollDispatcher","_viewContainerRef","_platform","_focusMonitor","scrollStrategy","_document","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","touchGestures","_passiveListeners","_destroyed","monitor","origin","run","clearTimeout","_touchstartTimeout","dispose","listener","removeEventListener","stopMonitoring","delay","_cancelPendingAnimations","overlayRef","_createOverlay","_portal","ComponentPortal","_tooltipComponent","instance","attach","_triggerElement","afterHidden","isVisible","existingStrategy","getConfig","positionStrategy","_origin","ElementRef","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","ESCAPE","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","_getOrigin","_getOverlayPosition","withPositions","_addOffset","main","fallback","isLtr","originPosition","x","y","_invertPosition","overlayPosition","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","point","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","MatTooltip","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","offsetY","offsetX","DOCUMENT","_TooltipComponentBase","animationMode","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_hideTimeoutId","_showTimeoutId","_toggleVisibility","_handleMouseLeave","_finalizeAnimation","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","getPropertyValue","ANIMATION_MODULE_TYPE","changeDetectorRef","_isMultiline","_isTooltipMultiline","rect","height","MatTooltipModule","A11yModule","MatPaginator_div_2_mat_form_field_3_mat_option_2_Template","pageSizeOption_r6","$implicit","MatPaginator_div_2_mat_form_field_3_Template","_r8","ctx_r7","_changePageSize","_formFieldAppearance","pageSize","_pageSizeLabelId","selectConfig","_displayedPageSizeOptions","MatPaginator_div_2_div_4_Template","MatPaginator_div_2_Template","ctx_r0","_intl","itemsPerPageLabel","MatPaginator_button_6_Template","_r10","ctx_r9","firstPage","ctx_r1","firstPageLabel","_previousButtonsDisabled","MatPaginator_button_13_Template","_r12","ctx_r11","lastPage","lastPageLabel","_nextButtonsDisabled","MatPaginatorIntl","nextPageLabel","previousPageLabel","getRangeLabel","page","startIndex","Math","max","min","ɵprov","token","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","mixinInitialized","_MatPaginatorBase","pageIndex","_pageIndex","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_pageSizeOptions","p","hidePageSize","_hidePageSize","showFirstLastButtons","_showFirstLastButtons","defaults","_intlChanges","_initialized","_markInitialized","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","getNumberOfPages","maxPageIndex","ceil","floor","slice","MatPaginator","intl","formFieldAppearance","i6","MatPaginatorModule","MatButtonModule","contributorsPath","CONTENT_URL_PREFIX","knownGroups","ContributorService","http","_currentContributorsPage$","BehaviorSubject","currentContributorsPage$","asObservable","contributors","getContributors","updateContributorsCurrentPage","coreContributors","commmunityContributors","currentPage","commContribs","reduce","prev","current","login","name","pictureUrl","avatar_url","group","combineLatest","contribs","contribMap","Object","keys","key","contributor","contribGroup","cmap","order","compareContributors","compareGroups","core","Yz7","l","r","toUpperCase","person","twitter","website","_r7","ctx_r6","flipCard","bio","ContributorComponent","clickable","noPicture","pictureBase","json","contributorInfo","JSON","parse","bioImage","picture","isFlipped","Xpm","ContributorComponent_a_6_Template","ContributorComponent_a_7_Template","ContributorComponent_a_8_Template","ContributorComponent_div_9_Template","name_r2","_r4","selectGroup","selectedGroup","changePage","contributorPage$","ContributorListComponent_section_2_div_1_Template","ContributorListComponent_section_2_aio_contributor_3_Template","ContributorListComponent","contributorService","locationService","destroy$","grps","groupName","search","groups","groupNames","g","toLowerCase","setSearch","ContributorListComponent_a_1_Template","ContributorListComponent_section_2_Template","ContributorModule","customElementComponent","oAB","cJS","ContributorListModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/select.mjs","./node_modules/@angular/material/fesm2022/tooltip.mjs","./node_modules/@angular/material/fesm2022/paginator.mjs","./src/app/custom-elements/contributor/contributor.service.ts","./src/app/custom-elements/contributor/contributor.component.ts","./src/app/custom-elements/contributor/contributor-list.component.ts","./src/app/custom-elements/contributor/contributor-list.module.ts"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    _skipPredicate(item) {\n        return item.disabled;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth();\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // Note that it's important that we read this in `ngAfterViewInit`, because\n        // reading it earlier will cause the form field to return a different element.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n    }\n    open() {\n        this._overlayWidth = this._getOverlayWidth();\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth() {\n        const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin\n            ? this._preferredOverlayOrigin.elementRef\n            : this._preferredOverlayOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\", \"ngSkipHydration\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mdc-menu-surface{max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px)}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        'ngSkipHydration': 'true',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mdc-menu-surface{max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px)}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n","import { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ElementRef, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\nclass _MatTooltipBase {\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            this._showDelay = _defaultOptions.showDelay;\n            this._hideDelay = _defaultOptions.hideDelay;\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined }, { type: i4.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n        this._cssClassPrefix = 'mat-mdc';\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: _TooltipComponentBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _elementRef, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n    }\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\nclass MatTooltipModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i6 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i4 from '@angular/material/form-field';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", selectConfig: \"selectConfig\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], selectConfig: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\nlet nextUniqueId = 0;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        /** ID for the DOM node containing the paginator's items per page label. */\n        this._pageSizeLabelId = `mat-paginator-page-size-label-${nextUniqueId++}`;\n        this._formFieldAppearance = defaults?.formFieldAppearance || 'outline';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-mdc-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\"\\n          hideSingleSelectionIndicator>\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatIconButton, selector: \"button[mat-icon-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: i5.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i6.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"directive\", type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-mdc-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\"\\n          hideSingleSelectionIndicator>\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"] }]\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                }] }]; } });\n\nclass MatPaginatorModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule], exports: [MatPaginator] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0-rc.2\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Core', 'Contributor', 'Community'];\n\n@Injectable()\nexport class ContributorService {\n    contributors: Observable<ContributorGroup[]>;\n    private _currentContributorsPage$ = new BehaviorSubject(1);\n    currentContributorsPage$ = this._currentContributorsPage$.asObservable();\n\n    constructor(private http: HttpClient) {\n        this.contributors = this.getContributors();\n    }\n\n    updateContributorsCurrentPage(page: number) {\n        this._currentContributorsPage$.next(page);\n    }\n\n    private getContributors() {\n        // combine both contributors.json and github api into one list\n        const coreContributors = this.http.get<{ [key: string]: Contributor }>(contributorsPath);\n        const commmunityContributors = this.currentContributorsPage$\n            .pipe(\n                switchMap(currentPage => {\n                    return this.http.get<any[]>(`https://api.github.com/repos/ngrx/platform/contributors?per_page=100&page=${currentPage}`)\n                        .pipe(\n                            map(commContribs => {\n                                const data = commContribs.reduce((prev, current) => {\n                                    return {\n                                        ...prev,\n                                        [current.login]: {\n                                            name: current.login,\n                                            pictureUrl: current.avatar_url,\n                                            group: 'Community'\n                                        }\n                                    };\n                                }, {});\n\n                                return data;\n                            })\n                        );\n                })\n            );\n\n        const contributors = combineLatest([coreContributors, commmunityContributors])\n            .pipe(\n                // Create group map\n                map(([contribs, commContribs]) => {\n                    const contribMap: { [name: string]: Contributor[] } = {};\n\n                    // adds core/contributors\n                    Object.keys(contribs).forEach(key => {\n                        const contributor = contribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    // adds community\n                    Object.keys(commContribs).forEach(key => {\n                        const contributor = commContribs[key];\n                        const group = contributor.group;\n                        const contribGroup = contribMap[group];\n                        if (contribGroup) {\n                            contribGroup.push(contributor);\n                        } else {\n                            contribMap[group] = [contributor];\n                        }\n                    });\n\n                    return contribMap;\n                }),\n\n                // Flatten group map into sorted group array of sorted contributors\n                map(cmap => {\n                    return Object.keys(cmap)\n                        .map(key => {\n                            const order = knownGroups.indexOf(key);\n                            return {\n                                name: key,\n                                order: order === -1 ? knownGroups.length : order,\n                                contributors: cmap[key].sort(compareContributors),\n                            } as ContributorGroup;\n                        })\n                        .sort(compareGroups);\n                })\n            );\n\n        return contributors;\n    }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n    return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n    return l.order === r.order\n        ? l.name > r.name\n            ? 1\n            : -1\n        : l.order > r.order\n            ? 1\n            : -1;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n    selector: 'aio-contributor',\n    template: `\n    <div [ngClass]=\"{ 'flipped': person.isFlipped }\" class=\"contributor-card\">\n\n        <div class=\"card-front\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n\n            <div class=\"contributor-image\" [style.background-image]=\"'url('+ bioImage +')'\">\n                <div class=\"contributor-info\">\n                    <a *ngIf=\"person.bio\" mat-button>\n                        View Bio\n                    </a>\n                    <a *ngIf=\"person.twitter\" mat-button class=\"icon\"\n                        href=\"https://twitter.com/{{person.twitter}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-twitter fa-2x\"></span>\n                    </a>\n                    <a *ngIf=\"person.website\" mat-button class=\"icon\"\n                        href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-link fa-2x\"></span>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-back\" *ngIf=\"person.isFlipped\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n            <p class=\"contributor-bio\">{{person.bio}}</p>\n        </div>\n    </div>\n  `\n})\nexport class ContributorComponent {\n    @HostBinding('class.clickable')\n        clickable = true;\n\n    @Input()\n        person: Contributor;\n\n    // Allows to pass contributor data as a json string.\n    // Useful for web element version of this component.\n    @Input() set json(contributorInfo: string) {\n        this.clickable = false;\n        this.person = JSON.parse(contributorInfo);\n    }\n\n    noPicture = '_no-one.jpg';\n    pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n\n    get bioImage() {\n        if (this.person.pictureUrl) {\n            return this.person.pictureUrl;\n        }\n\n        return this.pictureBase+(this.person.picture || this.noPicture);\n    }\n\n    flipCard(person: Contributor) {\n        if (!this.clickable) {\n            return;\n        }\n        person.isFlipped = !person.isFlipped;\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\nimport { Observable, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'aio-contributor-list',\n    template: `\n  <div class=\"flex-center group-buttons\">\n    <a *ngFor=\"let name of groupNames\"\n       [class.selected]=\"name === selectedGroup.name\"\n       class=\"button mat-button filter-button\"\n       (click)=\"selectGroup(name)\">{{name}}</a>\n  </div>\n  <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n    <div *ngIf=\"selectedGroup.name === 'Community'\">\n      <mat-paginator\n        [length]=\"350\"\n        [pageIndex]=\"contributorPage$ | async\"\n        [pageSize]=\"100\"\n        [hidePageSize]=\"true\"\n        aria-label=\"Select page\"\n        (page)=\"changePage($event.pageIndex + 1)\">\n      </mat-paginator>\n    </div>\n    <div class=\"contributor-group\">\n      <aio-contributor *ngFor=\"let person of selectedGroup.contributors\" [person]=\"person\"></aio-contributor>\n    </div>\n  </section>`\n})\nexport class ContributorListComponent implements OnInit, OnDestroy {\n    private groups: ContributorGroup[];\n    groupNames: string[];\n    selectedGroup: ContributorGroup;\n    contributorPage$: Observable<number>;\n    destroy$ = new Subject<void>();\n\n    constructor(\n        private contributorService: ContributorService,\n        private locationService: LocationService) { }\n\n    ngOnInit() {\n        this.contributorService.contributors\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(grps => {\n                const groupName = this.locationService.search()['group'] || '';\n                this.groups = grps;\n                this.groupNames = grps.map(g => g.name);\n                this.selectGroup(groupName);\n            });\n\n        this.contributorPage$ = this.contributorService.currentContributorsPage$.pipe(\n            map(page => page - 1)\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n    }\n\n    selectGroup(name: string) {\n        name = name.toLowerCase();\n        this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n        this.locationService.setSearch('', { group: this.selectedGroup.name });\n    }\n\n    changePage(page: number) {\n        this.contributorService.updateContributorsCurrentPage(page);\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ContributorComponent],\n    declarations: [ ContributorComponent],\n})\nexport class ContributorModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorComponent;\n}\n\n@NgModule({\n    imports: [CommonModule, MatPaginatorModule, ContributorModule],\n    declarations: [ContributorListComponent],\n    providers: [ContributorService],\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n    customElementComponent: Type<any> = ContributorListComponent;\n}\n\n"],"x_google_ignoreList":[0,1,2]}