{"version":3,"file":"default-node_modules_angular_cdk_fesm2020_overlay_mjs.a3eaba5f2defa9e5.js","mappings":"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","names":["scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","constructor","_viewportRuler","document","this","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","i0","i1","DOCUMENT","ɵprov","factory","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","undefined","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","ngOnDestroy","push","index","indexOf","splice","length","OverlayKeyboardDispatcher","super","_keydownListener","event","overlays","i","_keydownEvents","observers","keydownEvents","next","_isAttached","runOutsideAngular","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","target","origin","type","slice","_outsidePointerEvents","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","container","createElement","setAttribute","appendChild","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","onDestroy","Promise","resolve","then","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","value","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","nextSibling","parentNode","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","filter","c","subscription","takeUntil","merge","children","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","cssClass","ElementRef","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","end","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","parent","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","_animationsModuleType","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","ApplicationRef","DomPortalOutlet","i5","i6","ANIMATION_MODULE_TYPE","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","elementRef","ɵdir","selectors","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","EventEmitter","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","coerceBooleanProperty","lockPosition","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","takeWhile","predicate","inclusive","operate","subscriber","createOperatorSubscriber","result","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","ɵmod","ɵinj","imports","BidiModule","PortalModule","ScrollingModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2020/overlay.mjs","./node_modules/rxjs/dist/esm/internal/operators/takeWhile.js"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, ElementRef, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations');\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () { return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n"],"x_google_ignoreList":[0,1]}